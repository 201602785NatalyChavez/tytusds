{"version":3,"sources":["components/Cargar.js","components/Navbar.js","components/Division.js","components/Divisiones.js","estructuras/EstructurasLineales/Cola.js","estructuras/EstructurasLineales/ColaPrioridad.js","estructuras/Estructuras_Arboreas/AVL.js","estructuras/Estructuras_Arboreas/ABB.js","estructuras/Estructuras_Arboreas/merkleTree.js","estructuras/EstructurasLineales/Pila.js","estructuras/EstructurasLineales/ListaCirD.js","estructuras/EstructurasLineales/ListaCirS.js","estructuras/EstructurasLineales/ListaDoble.js","estructuras/Estructuras_Arboreas/ArbolB.js","estructuras/Estructuras_Arboreas/ArbolBplus.js","estructuras/EstructurasNoLineales/TablaHashAbierta.js","estructuras/EstructurasNoLineales/TablaHashCerrada.js","estructuras/EstructurasCompuestas/Col_Major.js","estructuras/EstructurasCompuestas/MatrizDis.js","estructuras/EstructurasNoLineales/ReccProfAnch.js","estructuras/EstructurasNoLineales/CostoUniforme.js","estructuras/AlgoritmosDeCodificacion/Hamming.js","estructuras/AlgoritmosDeCodificacion/Huffman.js","estructuras/AlgoritmosDeCodificacion/LZW.js","estructuras/AlgoritmosDeCodificacion/Feistel.js","components/Agregar.js","components/Eliminar.js","components/Actualizar.js","components/GraficaListas.js","components/GraficaListaCircular.js","components/GraficoOrdenamientos.js","components/Dibujar.js","components/Buscar.js","components/GraficarTablaHash.js","components/GraficarTablaHashCerrada.js","estructuras/Ordenamientos/Seleccion.js","estructuras/Ordenamientos/Insercion.js","estructuras/Ordenamientos/OrdRapido.js","estructuras/Ordenamientos/OrdBurbuja.js","components/GraficarArboles.js","components/GraficarArbol.js","components/GraficarAdayacencia.js","components/GraficaLinealizado.js","components/GraficarMDispersa.js","components/GraficarGrafo.js","components/TablaCodificacion.js","components/NavbarInter.js","App.js","reportWebVitals.js","index.js","estructuras/EstructurasLineales/ListaSimple.js"],"names":["propsG","key","num","Navbar","Menu","className","Item","to","Component","colorcard","background","Division","Card","color","this","props","style","Image","src","imagen","wrapped","ui","Content","Header","title","Description","descripcion","extra","Icon","pathname","state","nombre","Divisiones","Group","itemsPerRow","Nodo","require","dato","siguiente","Cola","primero","ultimo","longitud","nuevoNodo","estaVacia","eliminado","nodoActual","text","datoAnterior","datoNuevo","nodoanterior","arr","map","e","Agregar","arreglo","push","datoBuscar","contador","id","label","toString","prioridad","ColaPrioridad","temp","temp1","console","log","valor","colaP","derecha","izquierda","altura","ArbolAVL","raiz","valor1","valor2","nodo","_agregar","temporal","r_izquierda","r_dobleizquierda","r_derecha","r_doblederecha","al_der","al_izq","MAX","aux","agregar","_eliminar","balancear","anterior","_encontrarReemplazo","tempEliminar","anteriorValor","anteriorAux","encicla","balancearAlturas","_balancear","valorNuevo","eliminar","variable","_buscar","buscar","preOrden","vector","recorridoPre","graficarNodos","graficarApuntadores","edge","from","ABB","add","imprimir","tmp","maxiz","enlace","nodmax","maxIzq","trasiz","trasder","minder","nodmin","minDer","mandardato","datoborr","datoin","eliminando","insertar","etiqueta","graficar","sha256","NodoListaTemporal","datTemporal","contadorglobal","salida","ListaTemporal","cabeza","cola","size","recarga","nodohijo","hash","MerkleTree","listatmp","insertLista","construirArbol","ObtenerLista","hashing","obtenerlista","lista","cant","operacion","Float64Array","length","vectorTotal","totalnodos","Math","pow","floor","segundo","eliminarLista","nodo1","nodo2","suma","nuevo","subHashing","hasheo","create","update","String","hex","noha","cargaArbolLista","i","cargandoArbolLista","datoelim","nuevodato","modificando","elemento","guardar","valorBuscar","graficando","Pila","contadorPilas","nodonuevo","inicio","valoranterior","archivojs","ListaCD","opcion","insertarInicio","agregarOrdenado","insertFinal","datoins","accion","contadoraux","ListaSimple","ListaCS","agregarFinal","agregarInicio","datoinse","ListaDoble","siguienteT","reemplazo","izquierdo","derecho","idRama","Rama","hoja","ArbolB","orden","rama","divRam","der","izq","mitad","medio","parseInt","final","subprint","recorrido","buscando","aux2","elimin","creando","dat","datelim","datins","encuentra","rama_Izq","rama_Der","permiso","indice","ramaContinua","ramaPadre","ArbolBplus","NodoAux","cuentaRamas","cuentaNodos","ramaAux","agregarNodo","dividirRama","buscarInsercion","valorMedio","rama_derAux","rama_izAux","nuevaRaiz","tempContinua","arbolAux","nodotemp","Encontrado","_recorrer","uuidv4","TablaHashAbierta","tamaño","minimo","maximo","forma","tabla","funcion","datosAgregados","iscargar","iniciar","newTable","index","valorretorno","charCodeAt","getCharCodes","hashSimple","division","multiplicacion","s","charCodeArr","posicionTabla","funcion_Hash","posicion","rehashing","copyarray","tamañoAnterior","Imprimir","datoanterior","datonuevo","concat","nodoArreglo","type","data","position","x","y","connectable","Recorrido","nodoege","source","target","varnew","cordenada","targetPosition","sourcePosition","TablaHashCerrada","colision","colisiones","h1","retorno","colisionLineal","colisionCuadratica","colisionDobleHash","prueba","h2","matriz","array","j","busqueda","busquedaRowMajor","busquedaColMajor","arregloguardar","datos","indices","vectorlinealizado","NodoMatriz","este","sur","norte","oeste","identificador","cabnodo","obtenerASCCI","ordenar","Matriz","CHorizontal","CVertical","Ni","Nj","C1","C2","C3","C4","n","cAgrego","contadorC","alert","cab","datobus","datomod","datoel","ab","iz","valorBusqueda","graficarCabeceraHorizontal","graficarCabeceraVertical","nodoedge","stroke","nodoedgePI","nodoInterior","arregloGuardar","tempo","valorGuardar","idNodos","NodoListaDoble","regresar","ident","distTotal","camino","enlaces","adyacentes","Enlaces","distancia","destino","ListaAdyacencia","almacenamiento","caminoFinal","distanciaFinal","profundidad","busquedaRecorrido","anchura","costoUnfi","recminimo","getVerticeNoDirigido","EnlazarNoDirigido","enlazarprimeroNoDirigido","n1","n2","origen","c","d","dat1","dat2","getVertice","Enlazar","enlazarprimero","contiente","imp","egde","agregado","arregloEdge","ady","subDFS","fin","iniRec","enl","adyman","subbusqueda","borrar","cargacamino","nuevosenlaces","verificacioncaminodestino","adymandar","ini","costos","enlacesmandar","minimodis","regresarMinimo","enlaces2","seguirRecorriendo","restoCaminos","lisCostos","lisEnlaces","formarcaminooptimo","bool","datocam","vertice","aristas","arista","insertarNoDirigido","table","arregloedge","graficarM","graficarLista","arregloM","graficarMatriz","contadorfuera","nodoArregloFuera","Hamming","ecriptado","tamanio","contadorPotencia","potencia","tamArreglo","cabezaDatos","refPotencia","contadorCadena","charAt","contPotencia","contArreglo","ObtenerHamming","Potencia","potenciaIndice","arregloNuevo","contadorUnos","contadorInsercion","contadorRelleno","resultado","arregloDatos","codigo","frecuencia","Lista","repetido","AlgoritmoHuffman","texto","listaOrdenada","listaCodigos","textoCodificado","info","agregarFinalValor","reasignarValores","generaCodificado","textoCodi","buscarValor","crearArbol","crearCodigos","agregarOrdenadoFrecuencia","nodoiz","eliminarInicio","nododer","nodoPadre","hijoIzq","hijoDer","RecorrerYCrear","imprimirCodigos","arregloencabeazados","recorrerCodigos","LZW","diccionario","Map","mensaje","iniciarDiccionario","w","k","enDiccionario","wk","keys","set","get","result","letra","arregloLlave","arregloValor","arreglogeneral","llave","values","Feistel","entrada","tablaIzquierda","tablaDerecha","numeroPasadas","left","right","ciclosCodificar","imprimirTablas","ciclos","diff","xor_uno","xor_dos","auxChar","slice","contadorTabla","onChange","files","reader","FileReader","onload","trim","JSON","parse","edd","json","valores","grado","cargar","ListaCirD","arrString","obtenerNodos","obtenerAputadores","m","CRMajor","imprimirMatriz","CostoUniforme","obtenerDatos","structW","readAsText","newarr","newValor","ASCII","Cargar","React","useState","open","setOpen","setLlave","Numero","setNumero","Modal","basic","onClose","onOpen","trigger","icon","name","Input","value","fluid","placeholder","accept","Actions","Button","inverted","onClick","countryOptions","textoDato","opciones","swtEdd","splitarr","split","NaN","arreglosplit","actualizar","obtenerText","setState","options","Eliminar","Actualizar","modificar","GraficaListas","nodosAfuera","uniones","edgefuera","edgeF","graph","nodes","node","angle","edges","physics","width","shadow","shape","font","borderWidth","interaction","navigationButtons","keyboard","height","events","select","event","getNetwork","network","GraficaListaCircular","PI","cos","sin","GraficoOrdenamientos","BarChart","margin","top","bottom","XAxis","dataKey","YAxis","Tooltip","Bar","fill","animationDuration","Dibujar","estructura","Buscar","retornarValor","customNodeStyles","padding","nodeTypes","special","borderRadius","GraficarTablaHash","elements","variant","gap","nodeStrokeColor","nodeColor","divnodo","float","border","GraficarTablaHashCerrada","Seleccion","menor","Insercion","ordRapido","pivote","partIzq","partDer","el","fs","Ordenamiento","contadorArreglos","archivo","contadorListas","stringify","writeFile","GraficarArboles","dot","Graphviz","zoom","GraficarArbol","layout","hierarchical","direction","sortMethod","GraficarAdayacencia","graficarML","GraficaLinealizado","linealizado","graficarVector","GraficarMDispersa","GraficarGrafo","graficarEnlaces","forceAtlas2Based","gravitationalConstant","centralGravity","springLength","springConstant","maxVelocity","solver","timestep","stabilization","iterations","filterType","TablaCodificacion","graficardatos","columns","graficarencabezados","count","NavbarInter","estrutura","datoaencriptar","fileDownloadUrl","valorGrafo","handleItemClick","activeItem","obtenerBusqueda","ordenarDatos","arregloOrdenado","desencolar","Pop","linealizar","colMajor","rowMajor","recorridosAnchura","BFS","encryptado","splitEntrada","recorridosProfundidad","DFS","busquedaConRecorrido","busquedaEspecifica","costoUniforme","costoMinimo","recubrimientoMinimo","guardarOrdenamiento","preventDefault","archivoJSON","blob","Blob","URL","createObjectURL","dofileDownload","click","revokeObjectURL","guardarEstructuras","guardarCodificados","location","download","href","ref","sectionStyle","backgroundImage","App","exact","path","render","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.293dde9c.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\n\r\nimport Cola from '../estructuras/EstructurasLineales/Cola'\r\nimport ColaPrioridad from '../estructuras/EstructurasLineales/ColaPrioridad'\r\n\r\nimport ArbolAVL from '../estructuras/Estructuras_Arboreas/AVL'\r\nimport ABB from '../estructuras/Estructuras_Arboreas/ABB'\r\nimport MerkleTree from '../estructuras/Estructuras_Arboreas/merkleTree'\r\n\r\nimport Pila from '../estructuras/EstructurasLineales/Pila'\r\nimport ListaCirD from '../estructuras/EstructurasLineales/ListaCirD'\r\nimport ListaCS from '../estructuras/EstructurasLineales/ListaCirS'\r\nimport ListaSimple from '../estructuras/EstructurasLineales/ListaSimple'\r\nimport ListaDoble from '../estructuras/EstructurasLineales/ListaDoble'\r\n\r\nimport ArbolB from '../estructuras/Estructuras_Arboreas/ArbolB'\r\nimport ArbolBplus from '../estructuras/Estructuras_Arboreas/ArbolBplus'\r\n\r\nimport TablaHashAbierta from '../estructuras/EstructurasNoLineales/TablaHashAbierta'\r\nimport TablaHashCerrada from '../estructuras/EstructurasNoLineales/TablaHashCerrada'\r\n\r\nimport CRMajor from '../estructuras/EstructurasCompuestas/Col_Major'\r\nimport Matriz from '../estructuras/EstructurasCompuestas/MatrizDis'\r\n\r\nimport ListaAdyacencia from '../estructuras/EstructurasNoLineales/ReccProfAnch'\r\nimport CostoUniforme from '../estructuras/EstructurasNoLineales/CostoUniforme'\r\nimport Hamming from '../estructuras/AlgoritmosDeCodificacion/Hamming'\r\nimport AlgoritmoHuffman from '../estructuras/AlgoritmosDeCodificacion/Huffman'\r\nimport LZW from '../estructuras/AlgoritmosDeCodificacion/LZW'\r\nimport Feistel from '../estructuras/AlgoritmosDeCodificacion/Feistel'\r\nlet propsG\r\nfunction onChange(e){\r\n    let files = e.target.files[0];\r\n    let reader = new FileReader();\r\n    console.log(e.target.files[0])\r\n    reader.onload = (e) => {\r\n        const text = reader.result.toString().trim();\r\n        console.log(text)\r\n        let data; //parseo de archivo JSON\r\n        if(\"Código de Hamming\" === propsG.nombre ||\r\n           \"Algoritmo de Huffman\" === propsG.nombre ||\r\n           \"Algoritmo LZW\" === propsG.nombre ||\r\n           \"Cifrado Feistel\" === propsG.nombre ){\r\n            data = text\r\n        }else{\r\n            data = JSON.parse(text);\r\n        }\r\n        \r\n        structW(propsG.nombre, propsG.edd,data) \r\n    }\r\n    reader.readAsText(files);\r\n}\r\nfunction structW(nombre,edd,json){ // FUNCION PARA SABER QUE TIPO DE ESTRUCTURA ES.\r\n    let datos = json.valores\r\n    let grado = json.grado\r\n    let posicion = json.posicion\r\n    switch(nombre){\r\n        case \"Pila\" :\r\n            if(edd == null){\r\n                edd = new Pila();\r\n            }\r\n            edd.cargar(datos)\r\n            break\r\n        case \"Cola\":\r\n            if(edd == null){\r\n                edd = new Cola();\r\n            }\r\n            edd.cargar(datos)\r\n            edd.Imprimir()\r\n            break\r\n        case \"Cola de prioridad\":\r\n            if(edd == null){\r\n                edd = new ColaPrioridad();\r\n            }\r\n            edd.cargar(datos)\r\n            break\r\n        case \"Lista simplemente enlazada\":\r\n\r\n            if(edd == null){\r\n                edd = new ListaSimple();\r\n            }\r\n            edd.cargar(datos,posicion)\r\n            break\r\n\r\n        case \"Lista doblemente enlazada\":\r\n\r\n            if(edd == null){\r\n                edd = new ListaDoble();\r\n            }\r\n            edd.cargar(datos,posicion) \r\n            break\r\n\r\n        case \"Lista circular simplemente enlazada\":\r\n\r\n            if(edd == null){\r\n                edd = new ListaCS();\r\n            }\r\n            edd.cargar(datos,posicion)\r\n            break\r\n\r\n        case \"Lista circular doblemente enlazada\":\r\n\r\n            if(edd == null){\r\n                edd = new ListaCirD();\r\n            }\r\n            edd.cargar(datos,posicion)\r\n            break\r\n        case \"Ordenamiento Selección\":\r\n\r\n            edd = arrString(datos)\r\n            break\r\n        case \"Ordenamiento Inserción\":\r\n\r\n            edd = arrString(datos)\r\n            break\r\n        case \"Ordenamiento Burbuja\":\r\n\r\n            edd = arrString(datos)\r\n            break\r\n        case \"Ordenamiento Rapido\":\r\n\r\n            edd = arrString(datos)\r\n            break\r\n        case \"Arbol ABB\":\r\n\r\n            edd = new ABB();\r\n            edd.cargar(datos)\r\n            console.log(edd.obtenerNodos())\r\n            console.log(edd.obtenerAputadores())\r\n            break\r\n        case \"Arbol AVL\":\r\n\r\n            edd = new ArbolAVL();\r\n            edd.cargar(datos)\r\n            console.log(edd.obtenerNodos())\r\n            console.log(edd.obtenerAputadores())\r\n            break\r\n        case \"Arbol B\":\r\n\r\n            edd = new ArbolB(grado);\r\n            edd.cargar(datos)\r\n            console.log(edd.graficar())\r\n            break\r\n        case \"Arbol Merkle\":\r\n\r\n            edd = new MerkleTree();\r\n            edd.cargar(datos)\r\n            break\r\n         case \"Arbol B+\":\r\n\r\n            edd = new ArbolBplus(grado);\r\n            edd.cargar(datos)\r\n            console.log(edd.graficar())\r\n            break\r\n        case \"Tabla Hash Abierta\":\r\n\r\n            edd = new TablaHashAbierta(json.m, json.minimo, json.maximo, json.funcion);\r\n            edd.cargar(datos)\r\n            edd.imprimir()\r\n            break\r\n        case \"Tabla Hash Cerrada\":\r\n\r\n            edd = new TablaHashCerrada(json.m, json.minimo, json.maximo, json.funcion, json.prueba);\r\n            edd.cargar(datos)\r\n            edd.imprimir()\r\n            break\r\n        case \"Row Major\":\r\n\r\n            edd = new CRMajor(json.m);\r\n            edd.cargar(datos,nombre)\r\n            edd.imprimirMatriz()\r\n            break\r\n        case \"Col Major\":\r\n\r\n            edd = new CRMajor(json.m,nombre);\r\n            edd.cargar(datos)\r\n            edd.imprimirMatriz()\r\n            break\r\n        case \"Matriz Dispersa\":\r\n\r\n            edd = new Matriz();\r\n            edd.cargar(datos)\r\n            break\r\n        case \"Grafo Dirigido\":\r\n\r\n            edd = new ListaAdyacencia(json.almacenamiento);\r\n            edd.cargar(datos,nombre)\r\n            break\r\n        case \"Grafo No Dirigido\":\r\n\r\n            edd = new ListaAdyacencia(json.almacenamiento);\r\n            edd.cargar(datos,nombre)\r\n            break\r\n        case \"Código de Hamming\":\r\n            edd = new Hamming();\r\n            edd.cargar(json)\r\n            break\r\n        case \"Algoritmo de Huffman\":\r\n            edd = new AlgoritmoHuffman();\r\n            edd.cargar(json)\r\n            break\r\n        case \"Algoritmo LZW\":\r\n            edd = new LZW();\r\n            edd.cargar(json)\r\n            break\r\n        case \"Cifrado Feistel\":\r\n            edd = new Feistel();\r\n            edd.cargar(json,key,num)\r\n            break\r\n        case \"Algoritmo de costo uniforme\":\r\n            edd = new CostoUniforme();\r\n            edd.cargar(datos,nombre)\r\n            break\r\n        default:\r\n            break;\r\n    }\r\n    propsG.obtenerDatos(edd);\r\n}\r\n\r\n\r\n\r\nfunction arrString(arreglo){\r\n    let newarr = []\r\n  \r\n    \r\n    if(arreglo[0].charCodeAt){\r\n        for (let i = 0; i < arreglo.length-1; i++) {\r\n            let newValor = {valor:arreglo[i],ASCII:getCharCodes(arreglo[i])}\r\n          newarr.push(newValor)\r\n          \r\n        }\r\n    }else{\r\n        for (let i = 0; i < arreglo.length-1; i++) {\r\n            let newValor = {valor:arreglo[i],ASCII:arreglo[i]}\r\n          newarr.push(newValor)\r\n          \r\n        }\r\n    }\r\n  \r\n    return newarr\r\n  }\r\n  \r\n  function getCharCodes(s){\r\n    let charCodeArr = 0;\r\n    \r\n    for(let i = 0; i < s.length; i++){\r\n        let code = s.charCodeAt(i);\r\n        charCodeArr += code\r\n    }\r\n    \r\n    return charCodeArr;\r\n  }\r\nlet key ;\r\nlet num ;\r\nexport default function Cargar(props) {\r\n    propsG = props\r\n    const [open, setOpen] = React.useState(false)    \r\n    const [llave, setLlave] = React.useState(\"\")\r\n    const [Numero, setNumero] = React.useState(0)\r\n    key = llave\r\n    num = Numero\r\n    if(propsG.nombre === \"Cifrado Feistel\"){\r\n        return (\r\n            <Modal\r\n                className=\"modalcargar\"\r\n                basic\r\n                onClose={() => setOpen(false)}\r\n                onOpen={() => setOpen(true)}\r\n                open={open}\r\n                size='small'\r\n                trigger={<Menu.Item>Cargar</Menu.Item> }\r\n                >\r\n                <Header icon>\r\n                    <Icon name='folder open outline' />\r\n                    Cargar\r\n                </Header>\r\n                <Modal.Content>\r\n                </Modal.Content>\r\n                    <Input className=\"inputAgregar\" type=\"text\" name=\"llave\" value={llave}  fluid placeholder=\"agregar dato\" onChange={e => setLlave(e.target.value)}/>\r\n                    <br/>\r\n                    <Input className=\"inputAgregar\" type=\"text\" name=\"Numero\" value={Numero}  fluid placeholder=\"agregar prioridad\" onChange={e => setNumero(e.target.value)}/>\r\n                    <br/>\r\n                    <Input className=\"inputcargar\" fluid type=\"file\" accept=\".json, .txt\" onChange={(e) =>  onChange(e)} />\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() => setOpen(false)}>\r\n                    <Icon name='remove' /> No\r\n                    </Button>\r\n                    <Button className=\"buttoncargar\" color='green' inverted onClick={() =>  setOpen(false)}>\r\n                    <Icon name='checkmark' /> Si\r\n                    </Button>\r\n                </Modal.Actions>\r\n                </Modal>\r\n        )\r\n    }else{\r\n        return (\r\n            <Modal\r\n                className=\"modalcargar\"\r\n                basic\r\n                onClose={() => setOpen(false)}\r\n                onOpen={() => setOpen(true)}\r\n                open={open}\r\n                size='small'\r\n                trigger={<Menu.Item>Cargar</Menu.Item> }\r\n                >\r\n                <Header icon>\r\n                    <Icon name='folder open outline' />\r\n                    Cargar\r\n                </Header>\r\n                <Modal.Content>\r\n                </Modal.Content>\r\n                    <Input className=\"inputcargar\" fluid type=\"file\" accept=\".json, .txt\" onChange={(e) =>  onChange(e)} />\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() => setOpen(false)}>\r\n                    <Icon name='remove' /> No\r\n                    </Button>\r\n                    <Button className=\"buttoncargar\" color='green' inverted onClick={() =>  setOpen(false)}>\r\n                    <Icon name='checkmark' /> Si\r\n                    </Button>\r\n                </Modal.Actions>\r\n                </Modal>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Menu } from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default class Navbar extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                    <Menu.Item>\r\n                        <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                    </Menu.Item>\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nvar colorcard ={\r\n    background: \"rgba(0, 0, 0, 0.1)\"\r\n}\r\n\r\n\r\nexport default class Division extends Component {\r\n\r\n   \r\n    render() {\r\n        return (\r\n                 <Card color = {this.props.color} style={colorcard}>\r\n                    <Image src={this.props.imagen} wrapped ui={false} />\r\n                    <Card.Content>\r\n                    <Card.Header style={{ color: 'white' }}>{this.props.title}</Card.Header>\r\n                    <Card.Description style={{ color: 'white' }}>\r\n                        {this.props.descripcion}\r\n                    </Card.Description>\r\n                    </Card.Content>\r\n                    <Card.Content extra>\r\n                    <a>\r\n                        <Icon className='angle double right icon' style={{ color: 'white' }}>\r\n                            <Link style={{ color: 'white' }} to={{pathname:\"/tytusds/20211SVAC/G03/build/estructura\", state:{nombre: this.props.title}}}>IR</Link>\r\n                         </Icon>\r\n                    </a>\r\n                    </Card.Content>\r\n                </Card>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Card } from 'semantic-ui-react'\r\nimport Division from './Division'\r\nimport './Divisiones.css'\r\n\r\n\r\nexport default class Divisiones extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"divisiones\"> \r\n            <div className=\"one\">\r\n                <h1 style={{ color: 'white' }}>TytusDS</h1>\r\n            </div>\r\n            \r\n            <br/>\r\n            <br/>\r\n            <Card.Group itemsPerRow={4} >\r\n                    <Division title=\"Ordenamiento Burbuja\" descripcion=\"this a description\" color='red' imagen=\"https://upload.wikimedia.org/wikipedia/commons/e/ef/Sorting_shaker_sort_anim.gif\"/>\r\n                    <Division title=\"Ordenamiento Selección\" descripcion=\"this a description\" color='green' imagen=\"https://upload.wikimedia.org/wikipedia/commons/a/a5/Smoothsort.gif\"/>\r\n                    <Division title=\"Ordenamiento Inserción\" descripcion=\"this a description\" color='yellow' imagen=\"https://thumbs.gfycat.com/DazzlingGracefulAngelfish-size_restricted.gif\"/>\r\n                    <Division title=\"Ordenamiento Rapido\" descripcion=\"this a description\" color='blue' imagen=\"https://media.geeksforgeeks.org/wp-content/uploads/20190705180519/quicksort.gif\"/>\r\n                   \r\n                    <Division title=\"Lista simplemente enlazada\" descripcion=\"this a description\" color='green' imagen=\"https://s6.gifyu.com/images/A-1.gif\"/>\r\n                    <Division title=\"Lista doblemente enlazada\" descripcion=\"this a description\" color='yellow' imagen=\"https://s6.gifyu.com/images/A-2.gif\"/>\r\n                    <Division title=\"Lista circular simplemente enlazada\" descripcion=\"this a description\" color='blue' imagen=\"https://s6.gifyu.com/images/A-4.gif\"/>\r\n                    <Division title=\"Lista circular doblemente enlazada\" descripcion=\"this a description\" color='violet' imagen=\"https://s6.gifyu.com/images/A-3.gif\"/>\r\n\r\n                    <Division title=\"Pila\" descripcion=\"this a description\" color='green' imagen=\"https://s6.gifyu.com/images/Pila.gif\"/>\r\n                    <Division title=\"Cola\" descripcion=\"this a description\" color='yellow' imagen=\"https://s6.gifyu.com/images/Cola.gif\"/>\r\n                    <Division title=\"Cola de prioridad\" descripcion=\"this a description\" color='blue' imagen=\"https://s6.gifyu.com/images/Cola-de-Prioridad.gif\"/>\r\n\r\n\r\n                    <Division title=\"Arbol ABB\" descripcion=\"this a description\" color='yellow' imagen=\"https://s6.gifyu.com/images/Arbol-ABB.gif\"/>\r\n                    <Division title=\"Arbol AVL\" descripcion=\"this a description\" color = 'green' imagen=\"https://s6.gifyu.com/images/Arbol-AVL.gif\"/>\r\n                    <Division title=\"Arbol B\" descripcion=\"this a description\"color='blue' imagen=\"https://s6.gifyu.com/images/Arbol-B.gif\"/>\r\n                    <Division title=\"Arbol B+\" descripcion=\"this a description\" color='violet' imagen=\"https://s6.gifyu.com/images/Arbol-B03b18e464b7dd774.gif\"/>\r\n                    <Division title=\"Arbol Merkle\" descripcion=\"this a description\" color=\"green\" imagen=\"https://s6.gifyu.com/images/Arbol-Merkle.gif\"/>\r\n                    <Division title=\"Tabla Hash Abierta\" descripcion=\"this a description\" color=\"green\" imagen=\"\"/>\r\n                    <Division title=\"Tabla Hash Cerrada\" descripcion=\"this a description\" color=\"green\" imagen=\"\"/>\r\n                    <Division title=\"Col Major\" descripcion=\"this a description\" color=\"green\" imagen=\"\"/>\r\n                    <Division title=\"Row Major\" descripcion=\"this a description\" color=\"green\" imagen=\"\"/>\r\n\r\n                    <Division title=\"Matriz Dispersa\" descripcion=\"this a description\" color=\"green\" imagen=\"\"/>\r\n                    <Division title=\"Grafo Dirigido\" descripcion=\"this a description\" color=\"green\" imagen=\"\"/>\r\n                    <Division title=\"Grafo No Dirigido\" descripcion=\"this a description\" color=\"green\" imagen=\"\"/>\r\n\r\n                    <Division title=\"Código de Hamming\" descripcion=\"this a description\" color=\"green\" imagen=\"\"/>\r\n                    <Division title=\"Algoritmo de Huffman\" descripcion=\"this a description\" color=\"green\" imagen=\"\"/>\r\n                    <Division title=\"Algoritmo LZW\" descripcion=\"this a description\" color=\"green\" imagen=\"\"/>\r\n                    <Division title=\"Cifrado Feistel\" descripcion=\"this a description\" color=\"green\" imagen=\"\"/>\r\n\r\n                    \r\n                    <Division title=\"Algoritmo de costo uniforme\" descripcion=\"this a description\" color=\"green\" imagen=\"\"/>\r\n                    <Division title=\"Árbol de recubrimiento mínimo\" descripcion=\"this a description\" color=\"green\" imagen=\"\"/>\r\n\r\n            </Card.Group>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","var fs = require('fs')\r\nclass Nodo {\r\n    constructor(dato){\r\n        this.dato = dato\r\n        this.siguiente = null\r\n    }\r\n}\r\n\r\nclass Cola {\r\n    constructor(){\r\n        this.primero = null\r\n        this.ultimo = null\r\n        this.longitud = 0 \r\n    }\r\n\t\r\n\testaVacia() {\r\n        if (this.primero == null){\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    Agregar(dato){\r\n        let nuevoNodo = new Nodo(dato)\r\n\r\n        if(this.estaVacia()){\r\n            this.primero = nuevoNodo\r\n            this.ultimo = nuevoNodo\r\n        }else{\r\n            nuevoNodo.siguiente = this.primero\r\n            this.primero = nuevoNodo\r\n        }\r\n\r\n        this.longitud++\r\n    }\r\n\t\r\n\tPop(){\r\n        let eliminado = this.ultimo\r\n        if (this.primero == this.ultimo){\r\n            this.primero = null\r\n            this.ultimo = null\r\n        }else{\r\n            let nodoActual = this.primero\r\n            while (nodoActual.siguiente != eliminado){\r\n                nodoActual = nodoActual.siguiente\r\n            }\r\n\r\n            this.ultimo = nodoActual\r\n            this.ultimo.siguiente = null\r\n        }\r\n        this.longitud--\r\n    }\r\n\t\r\n\tImprimir(){\r\n        let text = \"\"\r\n        let nodoActual = this.primero\r\n\r\n        while (nodoActual != null){\r\n            text += nodoActual.dato + \"->\"\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            \r\n        }\r\n        text += \"null\"\r\n\r\n        return text\r\n    }\r\n\t\r\n\tactualizar(datoAnterior, datoNuevo){\r\n        let nodoActual = this.primero\r\n\r\n        while(nodoActual != null){\r\n            if(nodoActual.dato == datoAnterior){\r\n                nodoActual.dato = datoNuevo\r\n            }\r\n\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n    }\r\n\t\r\n\tbuscar (dato){\r\n        let datoEncontrado = null\r\n        let nodoActual = this.primero\r\n\r\n        while(nodoActual != null){\r\n            if(nodoActual.dato == dato){\r\n                datoEncontrado = \"El dato se encontró: \"+ nodoActual.dato\r\n                return datoEncontrado\r\n            }\r\n\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n        datoEncontrado = \"no se encontro el dato\"\r\n        return  datoEncontrado\r\n    }\r\n\t\r\n\teliminar(dato){\r\n       let nodoActual = this.primero\r\n        let nodoanterior = null\r\n\r\n        if(nodoActual != null && nodoActual.dato == dato){\r\n            this.primero = nodoActual.siguiente\r\n            return\r\n        }\r\n\r\n        while(nodoActual != null && nodoActual.dato != dato){\r\n            nodoanterior = nodoActual\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n\r\n        if (nodoActual == null){\r\n            return\r\n        }\r\n\r\n        nodoanterior.siguiente = nodoActual.siguiente;\r\n    }\r\n\t\r\n\tcargar(arr){\r\n        arr.map(e => {\r\n            this.Agregar(e)\r\n        })\r\n    }\r\n\r\n    guardar(){\r\n        let arreglo = []\r\n        let nodoActual = this.primero\r\n\r\n        while (nodoActual != null){\r\n            arreglo.push(nodoActual.dato)\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            \r\n        }\r\n\r\n        return arreglo\r\n    }\r\n\t\r\n\tRecorrido(datoBuscar){\r\n        let arreglo = []\r\n        let nodoActual = this.primero\r\n        let contador = 0\r\n\r\n        while (nodoActual != null){\r\n            let dato = {id: contador, label: nodoActual.dato.toString(),}\r\n            arreglo[contador] = dato\r\n\r\n            if(nodoActual.dato == datoBuscar){\r\n                let dato = {id: contador, label: nodoActual.dato.toString(),  color: \"lime\"}\r\n                arreglo[contador] = dato\r\n            }\r\n\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            contador++\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n\r\n}\r\n\r\nexport default Cola;","var fs = require('fs')\r\nclass Nodo {\r\n    constructor(dato, prioridad){\r\n        this.dato = dato\r\n        this.prioridad = prioridad\r\n        this.siguiente = null\r\n    }\r\n}\r\n\r\nclass ColaPrioridad {\r\n    constructor(){\r\n        this.primero = null\r\n        this.ultimo = null\r\n        this.longitud = 0 \r\n    }\r\n\t\r\n\testaVacia() {\r\n        if (this.primero == null){\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    Agregar(dato,prioridad){\r\n        let nuevoNodo = new Nodo(dato,prioridad)\r\n\r\n        if(this.estaVacia()){\r\n            this.primero = nuevoNodo\r\n            this.ultimo = nuevoNodo\r\n        }else{\r\n\r\n            nuevoNodo.siguiente = this.primero\r\n            this.primero = nuevoNodo\r\n            // Ordenando cola segun la prioridad\r\n            let temp,nodoActual,temp1\r\n            nodoActual = this.primero\r\n            let siguiente = nodoActual.siguiente\r\n            while(nodoActual.siguiente != null){\r\n            \r\n                if(nodoActual.prioridad > siguiente.prioridad){\r\n                    temp = nodoActual.dato\r\n                    temp1 = nodoActual.prioridad\r\n                    nodoActual.dato = siguiente.dato\r\n                    nodoActual.prioridad = siguiente.prioridad\r\n                    siguiente.dato = temp\r\n                    siguiente.prioridad = temp1\r\n        \r\n                    nodoActual = nodoActual.siguiente\r\n                    siguiente = siguiente.siguiente\r\n                }else{\r\n                    nodoActual = nodoActual.siguiente\r\n                    siguiente = siguiente.siguiente\r\n                }\r\n            }\r\n        }\r\n\r\n        this.longitud++\r\n    }\r\n\t\r\n\t Pop(){\r\n        let eliminado = this.ultimo\r\n        if (this.primero == this.ultimo){\r\n            this.primero = null\r\n            this.ultimo = null\r\n        }else{\r\n            let nodoActual = this.primero\r\n            while (nodoActual.siguiente != eliminado){\r\n                nodoActual = nodoActual.siguiente\r\n            }\r\n\r\n            this.ultimo = nodoActual\r\n            this.ultimo.siguiente = null\r\n        }\r\n        this.longitud--\r\n    }\r\n\t\r\n\t Imprimir(){\r\n        let text = \"\"\r\n        let nodoActual = this.primero\r\n\r\n        while (nodoActual != null){\r\n            text += nodoActual.dato + \"->\"\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            \r\n        }\r\n        text += \"null\"\r\n\r\n        console.log(text)\r\n    }\r\n\r\n    actualizar(datoAnterior, datoNuevo){\r\n        let nodoActual = this.primero\r\n\r\n        while(nodoActual != null){\r\n            if(nodoActual.dato == datoAnterior){\r\n                nodoActual.dato = datoNuevo\r\n            }\r\n\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n    }\r\n\r\n    buscar (dato){\r\n        let datoEncontrado = null\r\n        let nodoActual = this.primero\r\n\r\n        while(nodoActual != null){\r\n            if(nodoActual.dato == dato){\r\n                datoEncontrado = \"El dato se encontró: \"+ nodoActual.dato\r\n                return datoEncontrado\r\n            }\r\n\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n        datoEncontrado = \"no se encontro el dato\"\r\n        return  datoEncontrado\r\n    }\r\n\t\r\n\teliminar(dato){\r\n       let nodoActual = this.primero\r\n        let nodoanterior = null\r\n\r\n        if(nodoActual != null && nodoActual.dato == dato){\r\n            this.primero = nodoActual.siguiente\r\n            return\r\n        }\r\n\r\n        while(nodoActual != null && nodoActual.dato != dato){\r\n            nodoanterior = nodoActual\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n\r\n        if (nodoActual == null){\r\n            return\r\n        }\r\n\r\n        nodoanterior.siguiente = nodoActual.siguiente;\r\n    }\r\n    \r\n    cargar(arr){\r\n        arr.map(e => {\r\n            this.Agregar(e.valor,e.prioridad)\r\n        })\r\n    }\r\n\r\n    guardar(){\r\n        let arreglo = []\r\n        let nodoActual = this.primero\r\n\r\n        while (nodoActual != null){\r\n            let colaP = {valor: nodoActual.dato, prioridad: nodoActual.prioridad}\r\n            arreglo.push(colaP)\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            \r\n        }\r\n\r\n        return arreglo\r\n    }\r\n\r\n\tRecorrido(datoBuscar){\r\n        let arreglo = []\r\n        let nodoActual = this.primero\r\n        let contador = 0\r\n\r\n        while (nodoActual != null){\r\n            let dato = {id: contador, label: nodoActual.dato.toString(),}\r\n            arreglo[contador] = dato\r\n\r\n            if(nodoActual.dato == datoBuscar){\r\n                let dato = {id: contador, label: nodoActual.dato.toString(),  color: \"lime\"}\r\n                arreglo[contador] = dato\r\n            }\r\n\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            contador++\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n}\r\n\r\n\r\nexport default ColaPrioridad;","class Nodo {\r\n    constructor(valor) {\r\n        this.valor = valor;\r\n        this.derecha = null;\r\n        this.izquierda = null;\r\n        this.altura = 0;\r\n    }\r\n\r\n}\r\n\r\nclass ArbolAVL {\r\n    constructor() {\r\n        this.raiz = null;\r\n\r\n    }\r\n\r\n    MAX(valor1, valor2) {\r\n        if (valor1 > valor2) {\r\n            return valor1;\r\n        } else {\r\n            return valor2;\r\n        }\r\n    }\r\n\r\n    altura(nodo) {\r\n        if (nodo == null) {\r\n            return -1;\r\n        }\r\n        else {\r\n            return nodo.altura;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    agregar(valor) {\r\n        //inserta la raiz como un nodo temporan inicial\r\n        this.raiz = this._agregar(valor, this.raiz)\r\n\r\n    }\r\n\r\n    _agregar(valor, temporal) {\r\n        if (temporal == null) {\r\n            return new Nodo(valor);\r\n        }\r\n        else {\r\n            /*cuando el valor sea menor al valor del nodo temporal, recursivamente\r\n hasta que sea nulo se desplaza hacia la izquierda, en caso contrario,\r\n si es mayor, se desplaza hacia la derecha*/\r\n            if (valor < temporal.valor) {\r\n                temporal.izquierda = this._agregar(valor, temporal.izquierda);\r\n                if ((this.altura(temporal.derecha) - this.altura(temporal.izquierda)) == -2) {\r\n                    if (valor < temporal.izquierda.valor) {\r\n                        temporal = this.r_izquierda(temporal);\r\n                    } else {\r\n                        temporal = this.r_dobleizquierda(temporal);\r\n                    }\r\n                }\r\n            } else if (valor > temporal.valor) {\r\n                temporal.derecha = this._agregar(valor, temporal.derecha);\r\n                if ((this.altura(temporal.derecha) - this.altura(temporal.izquierda)) == 2) {\r\n                    if (valor > temporal.derecha.valor) {                        \r\n                        temporal = this.r_derecha(temporal);\r\n                    }else{\r\n                        temporal = this.r_doblederecha(temporal);\r\n\r\n                    }\r\n\r\n                }\r\n            }else{\r\n                //si el valor a agregar ya existe\r\n                temporal.valor = valor;\r\n            }\r\n        }\r\n//altura del nodo a insertar\r\n        let al_der = this.altura(temporal.derecha);\r\n        let al_izq = this.altura(temporal.izquierda);\r\n        temporal.altura = this.MAX(al_der,al_izq)+1\r\n        return temporal;\r\n \r\n    }\r\n\r\n\r\n    r_izquierda(nodo) {\r\n        let aux; \r\n        aux = nodo.izquierda;\r\n        nodo.izquierda = aux.derecha;\r\n        aux.derecha = nodo;\r\n        nodo.altura = this.MAX(this.altura(nodo.derecha), this.altura(nodo.izquierda)) +1;\r\n        aux.altura = this.MAX(this.altura(nodo.izquierda),nodo.altura) + 1;\r\n        return aux;\r\n\r\n    }\r\n\r\n\r\n    r_derecha(nodo) {\r\n        let aux;\r\n        aux = nodo.derecha;\r\n        nodo.derecha = aux.izquierda;\r\n        aux.izquierda = nodo;\r\n        nodo.altura = this.MAX(this.altura(nodo.derecha), this.altura(nodo.izquierda))+ 1;\r\n        aux.altura = this.MAX(this.altura(nodo.derecha), nodo.altura) + 1;\r\n        return aux;\r\n\r\n    }\r\n\r\n\r\n    r_dobleizquierda(nodo) {\r\n        nodo.izquierda =  this.r_derecha(nodo.izquierda);\r\n        return this.r_izquierda(nodo)\r\n\r\n    }\r\n\r\n\r\n    r_doblederecha(nodo) {\r\n        nodo.derecha = this.r_izquierda(nodo.derecha);\r\n        return this.r_derecha(nodo)\r\n    }\r\n    \r\n\r\n    cargar(arreglo) {\r\n        \r\n        arreglo.map(e => {\r\n            this.agregar(e)\r\n        })\r\n    }\r\n\r\n\r\n    eliminar(valor) {\r\n        this._eliminar(valor, this.raiz, null);\r\n        this.balancear(this.raiz)\r\n\r\n\r\n    }\r\n\r\n    _eliminar(valor, temporal, anterior) {\r\n        if (valor == temporal.valor) {\r\n            if ((temporal.derecha == null) && (temporal.izquierda == null)) {\r\n                if(anterior.derecha == temporal){\r\n                    anterior.derecha = null;\r\n                }else if(anterior.izquierda == temporal){\r\n                    anterior.izquierda = null;\r\n                }\r\n                \r\n\r\n            } else if (temporal.izquierda != null) {\r\n                this._encontrarReemplazo(temporal, temporal.izquierda, anterior);\r\n\r\n            } else if ((temporal.izquierda == null) && temporal.derecha != null) {\r\n                if (anterior.derecha = temporal) {\r\n                    anterior.derecha = temporal.derecha\r\n                    temporal = null;\r\n                } else if (anterior.izquierda = temporal) {\r\n                    anterior.izquierda = temporal.derecha;\r\n                    temporal = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(temporal != null){\r\n            if (temporal.izquierda != null) {\r\n                if (valor <= temporal.izquierda.valor) {\r\n                    this._eliminar(valor, temporal.izquierda, temporal)\r\n                }\r\n                if (temporal.derecha != null) {\r\n                    if (valor >= temporal.derecha.valor) {\r\n                        this._eliminar(valor, temporal.derecha, temporal)\r\n                    }\r\n                }\r\n            }\r\n        \r\n    }\r\n    }\r\n\r\n\r\n    _encontrarReemplazo(tempEliminar, temporal, anteriorValor) {\r\n\r\n        let aux = temporal;\r\n        let anteriorAux = null;\r\n        let encicla = false;\r\n\r\n        while (aux.derecha != null) {\r\n            encicla = true;\r\n            anteriorAux = aux;\r\n            aux = aux.derecha;\r\n        }\r\n        if (aux.izquierda != null) {\r\n            anteriorAux.derecha = aux.izquierda;\r\n        } else if (encicla == true) {\r\n            anteriorAux.derecha = null;\r\n        } else if (encicla == false) {\r\n            if (tempEliminar.izquierda == temporal) {\r\n                tempEliminar.izquierda = temporal.izquierda;\r\n            }\r\n        }\r\n\r\n        if (anteriorValor.derecha == tempEliminar) {\r\n            anteriorValor.derecha.valor = aux.valor;\r\n        } else if (anteriorValor.izquierda == tempEliminar) {\r\n            anteriorValor.izquierda.valor = aux.valor;\r\n        }\r\n        aux = null;\r\n    }\r\n\r\n\r\n    balancear() {\r\n        this.balancearAlturas(this.raiz)\r\n        this.raiz = this._balancear(this.raiz)\r\n\r\n    }\r\n\r\n    _balancear(temporal) {\r\n        if (temporal.izquierda == null) {\r\n            return temporal;\r\n        }else if(temporal.derecha == null){\r\n            return temporal;\r\n        }\r\n        else {\r\n\r\n            temporal.izquierda = this._balancear(temporal.izquierda);\r\n            if ((this.altura(temporal.izquierda) - this.altura(temporal.derecha)) == 2) {\r\n                if (temporal.izquierda.derecha == null) {\r\n                    temporal = this.r_izquierda(temporal);\r\n                } else {\r\n                    temporal = this.r_dobleizquierda(temporal);\r\n                }\r\n            }\r\n            temporal.derecha = this._balancear(temporal.derecha);\r\n            if ((this.altura(temporal.derecha) - this.altura(temporal.izquierda)) == 2) {\r\n                if (temporal.derecha.izquierda == null) {\r\n                    temporal = this.r_derecha(temporal);\r\n                } else {\r\n                    temporal = this.r_doblederecha(temporal);\r\n                }\r\n            }\r\n        }\r\n        /* */\r\n        let al_der = this.altura(temporal.derecha);\r\n        let al_izq = this.altura(temporal.izquierda);\r\n        temporal.altura = this.MAX(al_der, al_izq) + 1\r\n        return temporal;\r\n    }\r\n\r\n    balancearAlturas(temporal) {\r\n        if (temporal.izquierda != null) {\r\n            this.balancearAlturas(temporal.izquierda);\r\n        } else if (temporal.derecha != null) {\r\n            this.balancearAlturas(temporal.derecha);\r\n        }\r\n        temporal.altura = this.MAX(this.altura(temporal.derecha), this.altura(temporal.izquierda)) + 1\r\n\r\n    }\r\n\r\n\r\n    actualizar(valor, valorNuevo) {\r\n        this.eliminar(valor);\r\n        this.agregar(valorNuevo)\r\n    }\r\n\r\n    buscar(valor) {\r\n       let variable = this._buscar(valor,this.raiz);\r\n       console.log(\"-------\")\r\n       console.log(variable.valor)\r\n       console.log(\"-------\")\r\n\r\n    }\r\n\r\n    _buscar(valor, temporal){\r\n        if(temporal.valor < valor){\r\n            temporal = this._buscar(valor, temporal.izquierda)\r\n        }else if(temporal.valor > valor){\r\n            temporal = this.buscar(valor, temporal.derecha)\r\n        }else if(temporal.valor == valor){\r\n            return temporal;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    guardar(){\r\n        let vector = []\r\n        return this.preOrden(this.raiz, vector);\r\n    }\r\n\r\n    preOrden(nodo,vector){\r\n        if(nodo != null){\r\n        vector.push(nodo.valor)\r\n        this.preOrden(nodo.izquierda,vector)\r\n        this.preOrden(nodo.derecha,vector)\r\n        }\r\n        return vector\r\n    }\r\n\r\n    recorridoPre(nodo){\r\n        if(nodo != null){\r\n        console.log(nodo.valor)\r\n        this.recorridoPre(nodo.izquierda)\r\n        this.recorridoPre(nodo.derecha)\r\n        }\r\n    }\r\n\r\n    graficarNodos(nodo,vector,datoBuscar){\r\n\r\n        if(nodo.izquierda == null && nodo.derecha == null){\r\n            let dato\r\n            if(datoBuscar == nodo.valor){\r\n                dato = {id: nodo.valor, label: nodo.valor.toString(), color: \"lime\"}\r\n            }else{\r\n                dato = {id: nodo.valor, label: nodo.valor.toString(),}\r\n            }\r\n            \r\n            vector.push(dato)\r\n        }else{\r\n            let dato\r\n            if(datoBuscar == nodo.valor){\r\n                dato = {id: nodo.valor, label: nodo.valor.toString(), color: \"lime\"}\r\n            }else{\r\n                dato = {id: nodo.valor, label: nodo.valor.toString(),}\r\n            }\r\n            \r\n            vector.push(dato)\r\n        }\r\n        \r\n        if(nodo.izquierda != null){\r\n            this.graficarNodos(nodo.izquierda,vector,datoBuscar)\r\n        }\r\n\r\n        if (nodo.derecha != null){\r\n            this.graficarNodos(nodo.derecha,vector,datoBuscar)\r\n        }\r\n\r\n        return vector\r\n    }\r\n\r\n    obtenerNodos(datoBuscar){\r\n        let vector = []\r\n\r\n        return this.graficarNodos(this.raiz,vector,datoBuscar)\r\n    }\r\n\r\n    graficarApuntadores(nodo,vector){\r\n\r\n        if(nodo.izquierda != null){\r\n            this.graficarApuntadores(nodo.izquierda,vector)\r\n            let edge = {from:nodo.valor, to:nodo.izquierda.valor}\r\n            vector.push(edge)\r\n        }\r\n\r\n        if (nodo.derecha != null){\r\n            this.graficarApuntadores(nodo.derecha,vector)\r\n            let edge = {from:nodo.valor, to:nodo.derecha.valor}\r\n            vector.push(edge)\r\n        }\r\n\r\n        return vector\r\n    }\r\n\r\n    obtenerAputadores(){\r\n        let vector = []\r\n\r\n        return this.graficarApuntadores(this.raiz,vector)\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n}\r\nexport default ArbolAVL;\r\n\r\n\r\n","//Clase Nodo\r\nvar fs = require('fs')\r\nclass Nodo{\r\n    constructor(dato){  //Constructor\r\n        this.dato = dato\r\n        this.izquierda = null\r\n        this.derecha = null\r\n    }\r\n}\r\n//Clase Arbol Binario de Busqueda\r\nclass ABB{\r\n    //Constructor\r\n    constructor(){\r\n        this.raiz = null\r\n    }\r\n\r\n    //Metodo Insertar\r\n    insertar(dato){\r\n        this.raiz = this.add(dato, this.raiz)\r\n        console.log(\"Inserto un nodo\" )\r\n    }\r\n\r\n    //Sub Metodo Insertar\r\n    add(dato, nodo){\r\n        if(nodo == null){\r\n            return new Nodo(dato)\r\n        }else{\r\n            if(dato > nodo.dato){\r\n                nodo.derecha =  this.add(dato,nodo.derecha)\r\n            }else{\r\n                nodo.izquierda =  this.add(dato,nodo.izquierda)\r\n            }\r\n        }\r\n        return nodo\r\n    }\r\n\r\n    //Metodo Buscar\r\n    buscar(dato, nodo){\r\n        if(nodo!= null){\r\n            if(dato == nodo.dato){\r\n                console.log(nodo.dato + \" fue encontrado\")\r\n                return \r\n            }\r\n            this.buscar(dato, nodo.izquierda)\r\n            this.buscar(dato, nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //SubMetodo Buscar\r\n    buscando(dato){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        if(dato == this.raiz.dato){\r\n            console.log(this.raiz.dato)\r\n            return\r\n        }\r\n        let nodo = this.raiz\r\n        this.buscar(dato, nodo)\r\n    }\r\n\r\n    //Metodo Imprimir\r\n    imprimir(nodo){\r\n        if(nodo != null){\r\n            console.log(nodo.dato)\r\n            this.imprimir(nodo.izquierda)\r\n            this.imprimir(nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //Sub Metodo Imprimir\r\n    imprimiendo(){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        this.imprimir(this.raiz)\r\n    }\r\n\r\n    //Metodo Eliminar\r\n    eliminando(dato){\r\n        //Caso1: no existe arbol\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        //asignando valor inicial\r\n        let nodo = this.raiz\r\n        this.eliminar(dato, nodo)\r\n    }\r\n\r\n    //Sub Metodo Eliminar\r\n    eliminar(dato, nodo){\r\n        //Caso2: el dato a buscar se encuentra en la raiz\r\n        if(dato == this.raiz.dato){\r\n            if(nodo.izquierda != null){\r\n                let nodiz = nodo.izquierda\r\n                let maxiz= null\r\n                if(nodiz.derecha != null){\r\n                    maxiz = this.maxIzq(nodo.izquierda)\r\n                }else{\r\n                    maxiz = nodo.izquierda\r\n                    if(nodo.derecha != null){\r\n                        let enlace = nodo.derecha\r\n                        maxiz.derecha = enlace\r\n                        nodo.derecha = null\r\n                    }\r\n                    nodo.izquierda = null\r\n                    console.log(\"se elimino el nodo\")\r\n                    return\r\n                }\r\n                let nodmax = new nodo(maxiz)\r\n                let trasiz = null\r\n                let trasder = null\r\n                if(nodo.izquierda!=null){\r\n                    trasiz = nodo.izquierda\r\n                }\r\n                if(nodo.derecha != null){\r\n                    trasder = nodo.derecha\r\n                }\r\n                if(trasiz != null){\r\n                    nodmax.izquierda = trasiz\r\n                    nodo.izquierda = null\r\n                }\r\n                if(trasder != null){\r\n                    nodmax.derecha = trasder\r\n                    nodo.derecha = null\r\n                }\r\n                console.log(\"se elimino el nodo\")\r\n                return\r\n            }else if(nodo.izquierda == null && nodo.derecha != null){\r\n                let nodiz = nodo.derecha\r\n                let minder= null\r\n                if(nodiz.izquierda != null){\r\n                    minder = this.minDer(nodo.derecha) // minder con valor de dato\r\n                }else{\r\n                    minder = nodo.derecha // miner con valor de nodo\r\n                    if(nodo.izquierda != null){\r\n                        let enlace = nodo.izquierda\r\n                        minder.izquierda = enlace\r\n                        nodo.izquierda = null\r\n                    }\r\n                    this.raiz = nodo.derecha\r\n                    nodo.derecha = null\r\n                    console.log(\"se elimino el nodo\")\r\n                    return\r\n                }\r\n                let nodmin = new nodo(minder)\r\n                let trasiz = null\r\n                let trasder = null\r\n                if(nodo.izquierda!=null){\r\n                    trasiz = nodo.izquierda\r\n                }\r\n                if(nodo.derecha != null){\r\n                    trasder = nodo.derecha\r\n                }\r\n                if(trasiz != null){\r\n                    nodmin.izquierda = trasiz\r\n                    nodo.izquierda = null\r\n                }\r\n                if(trasder != null){\r\n                    nodmin.derecha = trasder\r\n                    nodo.derecha = null\r\n                }\r\n                this.raiz = nodmin\r\n                console.log(\"se elimino el nodo\")\r\n                return\r\n            }else{\r\n                this.raiz = null\r\n                return\r\n            }\r\n        }\r\n        //Demas Casos: eliminacion dentro del arbol\r\n        if(nodo.izquierda!= null){\r\n            //Dato encontrado a la izquierda\r\n            if(dato == nodo.izquierda.dato){\r\n                let tmp = nodo.izquierda\r\n                //Caso3: Eliminacion de hijo a la izquierda\r\n                if(tmp.izquierda == null && tmp.derecha == null){\r\n                    nodo.izquierda = null\r\n                    console.log(\"nodo hoja fue eliminado con exito\")\r\n                    return\r\n                }else{ // Caso 4: Eliminacion de no hijo a la izquierda\r\n                    if(tmp.izquierda != null){ // Reestructuracion de arbol y eliminacion de nodo\r\n                        let nodiz = tmp.izquierda\r\n                        let maxiz= null\r\n                        if(nodiz.derecha != null){\r\n                            maxiz = this.maxIzq(tmp.izquierda) // maxiz con valor de dato \r\n                        }else{\r\n                            maxiz = tmp.izquierda // maxiz con valor de nodo\r\n                            if(tmp.derecha != null){\r\n                                let enlace = tmp.derecha\r\n                                maxiz.derecha = enlace\r\n                                tmp.derecha = null\r\n                            }\r\n                            tmp.izquierda = null\r\n                            nodo.izquierda = maxiz\r\n                            console.log(\"se elimino el nodo\")\r\n                            return\r\n                        }\r\n                        let nodmax = new nodo(maxiz)\r\n                        let trasiz = null\r\n                        let trasder = null\r\n                        if(tmp.izquierda!=null){\r\n                            trasiz = tmp.izquierda\r\n                        }\r\n                        if(tmp.derecha != null){\r\n                            trasder = tmp.derecha\r\n                        }\r\n                        if(trasiz != null){\r\n                            nodmax.izquierda = trasiz\r\n                            tmp.izquierda = null\r\n                        }\r\n                        if(trasder != null){\r\n                            nodmax.derecha = trasder\r\n                            tmp.derecha = null\r\n                        }\r\n                        nodo.izquierda = nodmax\r\n                        console.log(\"se elimino el nodo\")\r\n                        return\r\n                    }else if(tmp.izquierda == null && tmp.derecha != null){ // Reestructuracion de arbol y eliminacion de nodo\r\n                        let nodiz = tmp.derecha\r\n                        let minder= null\r\n                        if(nodiz.izquierda != null){\r\n                            minder = this.minDer(tmp.derecha) // minder con valor de dato \r\n                        }else{\r\n                            minder = tmp.derecha // minder con valor de nodo\r\n                            if(tmp.izquierda != null){\r\n                                let enlace = tmp.izquierda\r\n                                minder.izquierda = enlace\r\n                                tmp.izquierda = null\r\n                            }\r\n                            nodo.derecha = minder\r\n                            tmp.derecha = null\r\n                            console.log(\"se elimino el nodo\")\r\n                            return\r\n                        }\r\n                        let nodmin = new nodo(minder)\r\n                        let trasiz = null\r\n                        let trasder = null\r\n                        if(tmp.izquierda!=null){\r\n                            trasiz = tmp.izquierda\r\n                        }\r\n                        if(tmp.derecha != null){\r\n                            trasder = tmp.derecha\r\n                        }\r\n                        if(trasiz != null){\r\n                            nodmin.izquierda = trasiz\r\n                            tmp.izquierda = null\r\n                        }\r\n                        if(trasder != null){\r\n                            nodmin.derecha = trasder\r\n                            tmp.derecha = null\r\n                        }\r\n                        nodo.derecha = nodmin\r\n                        console.log(\"se elimino el nodo\")\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(nodo.derecha != null){\r\n // Caso 5: Eliminacion de hijo a la derecha\r\n            if(dato == nodo.derecha.dato){\r\n                let tmp = nodo.derecha\r\n                if(tmp.izquierda == null && tmp.derecha == null){\r\n                    nodo.derecha = null\r\n                    console.log(\"nodo hoja fue eliminado con exito\")\r\n                    return\r\n                }else{ // Caso 6: Eliminacion de no hijo a la derecha\r\n                    if(tmp.derecha != null){ // Reestructuracion de arbol y eliminacion de nodo\r\n                        let nodiz = tmp.derecha\r\n                        let minder= null\r\n                        if(nodiz.izquierda != null){\r\n                            minder = this.minDer(tmp.derecha) // minder con valor de dato \r\n                        }else{\r\n                            minder = tmp.derecha // minder con valor de nodo\r\n                            if(tmp.izquierda != null){\r\n                                let enlace = tmp.izquierda\r\n                                minder.izquierda = enlace\r\n                                tmp.izquierda = null\r\n                            }\r\n                            nodo.derecha = minder\r\n                            tmp.derecha = null\r\n                            console.log(\"se elimino el nodo\")\r\n                            return\r\n                        }\r\n                        let nodmin = new nodo(minder)\r\n                        let trasiz = null\r\n                        let trasder = null\r\n                        if(tmp.izquierda!=null){\r\n                            trasiz = tmp.izquierda\r\n                        }\r\n                        if(tmp.derecha != null){\r\n                            trasder = tmp.derecha\r\n                        }\r\n                        if(trasiz != null){\r\n                            nodmin.izquierda = trasiz\r\n                            tmp.izquierda = null\r\n                        }\r\n                        if(trasder != null){\r\n                            nodmin.derecha = trasder\r\n                            tmp.derecha = null\r\n                        }\r\n                        nodo.derecha = nodmin\r\n                    }else if(tmp.derecha == null && tmp.izquierda != null){ // Reestructuracion de arbol y eliminacion de nodo\r\n                        let nodiz = tmp.izquierda\r\n                        let maxiz= null\r\n                        if(nodiz.derecha != null){\r\n                            maxiz = this.maxIzq(tmp.izquierda) // maxiz con valor de dato \r\n                        }else{\r\n                            maxiz = tmp.izquierda // maxiz con valor de nodo\r\n                            if(tmp.derecha != null){\r\n                                let enlace = tmp.derecha\r\n                                maxiz.derecha = enlace\r\n                                tmp.derecha = null\r\n                            }\r\n                            tmp.izquierda = null\r\n                            nodo.izquierda = maxiz\r\n                            console.log(\"se elimino el nodo\")\r\n                            return\r\n                        }\r\n                        let nodmax = new nodo(maxiz)\r\n                        let trasiz = null\r\n                        let trasder = null\r\n                        if(tmp.izquierda!=null){\r\n                            trasiz = tmp.izquierda\r\n                        }\r\n                        if(tmp.derecha != null){\r\n                            trasder = tmp.derecha\r\n                        }\r\n                        if(trasiz != null){\r\n                            nodmax.izquierda = trasiz\r\n                            tmp.izquierda = null\r\n                        }\r\n                        if(trasder != null){\r\n                            nodmax.derecha = trasder\r\n                            tmp.derecha = null\r\n                        }\r\n                        nodo.izquierda = nodmax\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(nodo.izquierda !=null){\r\n            this.eliminar(dato, nodo.izquierda)\r\n        }\r\n       if(nodo.derecha != null){\r\n            this.eliminar(dato, nodo.derecha)\r\n       }\r\n    }\r\n\r\n    //Metodo de obtencion para maximo valor a la Izquierda\r\n    maxIzq(nodo){\r\n        if (nodo.derecha != null){\r\n            let tmp = nodo.derecha\r\n            if(tmp.derecha !=null){\r\n                this.maxIzq(tmp)\r\n            }else{\r\n                var mandardato = tmp.dato\r\n                if(tmp.izquierda != null){\r\n                    nodo.derecha = tmp.izquierda\r\n                    tmp.izquierda = null\r\n                }else{\r\n                    nodo.derecha = null\r\n                }\r\n                return mandardato\r\n            }\r\n        }\r\n    }\r\n\r\n    //Metodo de obtencion para minimo valor a la Derecha\r\n    minDer(nodo){\r\n        if (nodo.izquierda != null){\r\n            let tmp = nodo.izquierda\r\n            if(tmp.izquierda !=null){\r\n                this.minDer(tmp)\r\n            }else{\r\n                var mandardato = tmp.dato\r\n                if(tmp.derecha != null){\r\n                    nodo.izquierda = tmp.derecha\r\n                    tmp.derecha = null\r\n                }else{\r\n                    nodo.izquierda = null\r\n                }\r\n                return mandardato\r\n            }\r\n        }\r\n    }\r\n\r\n    //Metodo Actualizar\r\n    actualizar(datoborr, datoin){\r\n        if(this.raiz==null){\r\n            console.log(\"no existe ningun arbol\")\r\n        }\r\n        this.eliminando(datoborr)\r\n        this.insertar(datoin)\r\n        console.log(\"Actualizado\")\r\n    }\r\n    //Metodo Cargar\r\n    cargar(arreglo) {\r\n        arreglo.map(e => {\r\n            this.insertar(e)\r\n        })\r\n    }\r\n    \r\n\r\n    //Metodo Guardar\r\n    guardar(){\r\n        let vector = []\r\n        return this.preOrden(this.raiz, vector);\r\n    }\r\n\r\n    preOrden(nodo,vector){\r\n        if(nodo != null){\r\n        vector.push(nodo.dato)\r\n        this.preOrden(nodo.izquierda,vector)\r\n        this.preOrden(nodo.derecha,vector)\r\n        }\r\n        return vector\r\n    }\r\n\r\n    \r\n    graficarNodos(nodo,vector,datoBuscar){\r\n\r\n        if(nodo.izquierda == null && nodo.derecha == null){\r\n            let dato\r\n            if(datoBuscar == nodo.dato){\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(), color: \"lime\"}\r\n            }else{\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(),}\r\n            }\r\n            \r\n            vector.push(dato)\r\n        }else{\r\n            let dato\r\n            if(datoBuscar == nodo.dato){\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(), color: \"lime\"}\r\n            }else{\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(),}\r\n            }\r\n            \r\n            vector.push(dato)\r\n        }\r\n        \r\n        if(nodo.izquierda != null){\r\n            this.graficarNodos(nodo.izquierda,vector,datoBuscar)\r\n        }\r\n\r\n        if (nodo.derecha != null){\r\n            this.graficarNodos(nodo.derecha,vector,datoBuscar)\r\n        }\r\n\r\n        return vector\r\n    }\r\n\r\n    obtenerNodos(datoBuscar){\r\n        let vector = []\r\n\r\n        return this.graficarNodos(this.raiz,vector,datoBuscar)\r\n    }\r\n\r\n    graficarApuntadores(nodo,vector){\r\n\r\n        if(nodo.izquierda != null){\r\n            this.graficarApuntadores(nodo.izquierda,vector)\r\n            let edge = {from:nodo.dato, to:nodo.izquierda.dato}\r\n            vector.push(edge)\r\n        }\r\n\r\n        if (nodo.derecha != null){\r\n            this.graficarApuntadores(nodo.derecha,vector)\r\n            let edge = {from:nodo.dato, to:nodo.derecha.dato}\r\n            vector.push(edge)\r\n        }\r\n\r\n        return vector\r\n    }\r\n\r\n    obtenerAputadores(){\r\n        let vector = []\r\n\r\n        return this.graficarApuntadores(this.raiz,vector)\r\n    }\r\n\r\n    graficar(nodo){\r\n        let etiqueta = \"\"\r\n\r\n        if(nodo.izquierda == null && nodo.derecha == null){\r\n            etiqueta = \"nodo\" + nodo.dato.toString() +\" [ shape=circle, label=\\\"{\" + nodo.dato.toString() +\"}\\\"];\\n\"\r\n        }else{\r\n            etiqueta = \"nodo\" + nodo.dato.toString() +\" [ shape=circle, label=\\\"{\" + nodo.dato.toString() +\"}\\\"];\\n\"\r\n        }\r\n\r\n        if(nodo.izquierda != null){\r\n            etiqueta = etiqueta + this.graficar(nodo.izquierda) + \"nodo\" + nodo.dato.toString() + \" -> nodo\" + nodo.izquierda.dato.toString() + \"\\n\"\r\n        }\r\n        if(nodo.derecha != null){\r\n            etiqueta = etiqueta + this.graficar(nodo.derecha) + \"nodo\" + nodo.dato.toString() + \" -> nodo\" + nodo.derecha.dato.toString() + \"\\n\"\r\n        }\r\n\r\n        return etiqueta\r\n\r\n    }\r\n\r\n    graficarArbol(){\r\n\r\n        let dot = \"digraph{ size=\\\"6,6\\\"; \tnode [color=lightblue2, style=filled];\" + this.graficar(this.raiz) +\"}\"\r\n\r\n        return dot\r\n\r\n    }\r\n}\r\n\r\nexport default ABB;\r\n\r\n","//Libreria para encriptado\r\nconst { sha256 } = require(\"js-sha256\")\r\n\r\n//Clase Nodo para lista temporal de carga de datos\r\nclass NodoListaTemporal{\r\n    //Constructor\r\n    constructor(datTemporal){\r\n        this.datTemporal = datTemporal\r\n        this.siguiente = null\r\n        this.anterior = null\r\n    }\r\n}\r\n\r\nvar contadorglobal = 0\r\nvar salida = \"\"\r\n\r\n//Clase Lista temporal para carga de datos\r\nclass ListaTemporal{\r\n    //Constructor\r\n    constructor(){\r\n        this.cabeza = null\r\n        this.cola = null\r\n        this.size = 0\r\n    }\r\n\r\n    //Metodo Insertar en lista temporal\r\n    insertLista(dato){\r\n        let nodo = new NodoListaTemporal(dato);\r\n        //Insercion de primer nodo\r\n        if(this.cabeza == null){\r\n            this.cabeza = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n        }else if(this.cabeza != null){ // Insercion de nodo No Cabeza\r\n            let aux = this.cabeza;\r\n            while(aux != this.cola){\r\n                aux = aux.siguiente;\r\n            }\r\n            aux.siguiente = nodo;\r\n            nodo.anterior = aux\r\n            this.cola = nodo;\r\n            this.size++;\r\n        }\r\n    }\r\n\r\n    //Metodo Eliminar par alista temporal\r\n    eliminarLista(dato){\r\n        let nodo = this.cabeza\r\n        if(this.cabeza.datTemporal == dato && this.cabeza == this.cola){\r\n            //Dato unico eliminado\r\n            this.cabeza = null\r\n            this.cola = null\r\n            this.size = 0\r\n            return\r\n        }\r\n        while(nodo.datTemporal != dato && nodo != this.cola){\r\n            nodo = nodo.siguiente\r\n        }\r\n        if(nodo.datTemporal== dato && nodo.anterior == null && nodo.siguiente != null){\r\n            //Dato Eliminado en el al inicio\r\n            let tmp = nodo.siguiente\r\n            this.cabeza = tmp\r\n            tmp.anterior = null\r\n            nodo.siguiente = null\r\n            this.size--\r\n            return\r\n        }else if(nodo.datTemporal == dato && nodo.siguiente != null && nodo.anterior != null){\r\n            //Dato Eliminado en el centro\r\n            let tmp = nodo.siguiente\r\n            tmp.anterior = nodo.anterior\r\n            nodo.anterior.siguiente = tmp\r\n            nodo.siguiente = null\r\n            nodo.anterior = null\r\n            this.size--\r\n            return\r\n        }else if(nodo.datTemporal == dato && nodo.siguiente == null && nodo.anterior != null){\r\n            //Dato eliminado al final de la lista\r\n            let tmp = nodo.anterior\r\n            this.cola = tmp\r\n            tmp.siguiente = null\r\n            nodo.anterior = null\r\n            this.size--\r\n            return\r\n        }\r\n        if(nodo == null){\r\n            //Dato no encontrado\r\n            console.log(\"No se encontro el dato a eliminar\")\r\n            return\r\n        }\r\n    }\r\n}\r\n\r\n//arreglo para reestructuracion de datos\r\nvar recarga = []\r\n\r\n//Clase Nodo para arbol merkle\r\nclass Nodo{\r\n    //Constructor\r\n    constructor(dato, izquierda, derecha, nodohijo){\r\n        this.dato = dato\r\n        this.hash = null\r\n        this.id = 0\r\n        this.nodohijo = nodohijo\r\n        this.izquierda = izquierda\r\n        this.derecha = derecha\r\n    }\r\n}\r\n\r\n//Clase Arbol Merkle\r\nclass MerkleTree{\r\n    //Constructor\r\n    constructor(){\r\n        this.raiz = null\r\n    }\r\n\r\n    //Metodo Insertar en arbol Merkle\r\n    insertar(dato){\r\n        let nodo = new Nodo(dato, null, null, true)\r\n        //Insercion de primer nodo\r\n        if(this.raiz == null){\r\n            let listatmp = new ListaTemporal()\r\n            listatmp.insertLista(nodo)\r\n            listatmp.insertLista(new Nodo(-1, null, null, true))\r\n            this.construirArbol(listatmp)           \r\n        }else{  //Insercion de Nodo no primero\r\n            let listatmp = this.ObtenerLista()\r\n            listatmp.insertLista(nodo)\r\n            this.construirArbol(listatmp)\r\n        }\r\n        //Hasheo de datos en sha256\r\n        this.hashing()\r\n        contadorglobal = 0\r\n    }\r\n\r\n    //Metodo de Carga de datos en lista temporal para insercion de arbol\r\n    ObtenerLista(){\r\n        let listatmp = new ListaTemporal()\r\n        this.obtenerlista(listatmp, this.raiz.izquierda)\r\n        this.obtenerlista(listatmp, this.raiz.derecha)\r\n        return listatmp\r\n    }\r\n\r\n    //Sub metodo de carga de datos en lista temporal para insercion de arbol\r\n    obtenerlista(lista, nodo){\r\n        if(nodo != null){\r\n            this.obtenerlista(lista, nodo.izquierda)\r\n            if(nodo != null && nodo.dato != -1 && nodo.nodohijo == true){\r\n                lista.insertLista(nodo)\r\n            }\r\n            this.obtenerlista(lista, nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //Metodo para armado base de arbol\r\n    construirArbol(lista){\r\n        let tamanio = new Float64Array(lista.size)\r\n        let cant = 1\r\n        let operacion = tamanio.length/2\r\n        //Calculo de nodos actuales\r\n        while (operacion > 1){\r\n            cant++\r\n            operacion = operacion/2\r\n        }\r\n        let vectorTotal = new Float64Array(cant)\r\n        let totalnodos = Math.pow(2, vectorTotal.length)    //Calculo de nodos hijos para arbol merkle\r\n        //Complemetacion de nodos hijo para arbol merkle final\r\n        while(lista.size < Math.floor(totalnodos)){\r\n            lista.insertLista(new Nodo(-1,null,null,true))\r\n        }\r\n        //Insercion de datos en arbol\r\n        while(lista.size>1){\r\n            let primero = lista.cabeza\r\n            let segundo = primero.siguiente\r\n            lista.eliminarLista(primero.datTemporal)\r\n            lista.eliminarLista(segundo.datTemporal)\r\n            let nodo1 = primero.datTemporal\r\n            nodo1.id = contadorglobal + 1\r\n            let nodo2 = segundo.datTemporal\r\n            nodo2.id = contadorglobal + 2 \r\n            let suma = nodo1.dato + nodo2.dato\r\n            let nuevo = new Nodo(suma, nodo1, nodo2,false)\r\n            nuevo.id = contadorglobal\r\n            lista.insertLista(nuevo)\r\n            contadorglobal = contadorglobal + 3\r\n        }\r\n        //Asignacion de raiz\r\n        this.raiz = lista.cabeza.datTemporal\r\n    }\r\n\r\n    //Metodo Asignacion de Hash\r\n    hashing(){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        this.subHashing(this.raiz)\r\n    }\r\n\r\n    //SubMetodo Asignacion de Hash\r\n    subHashing(nodo){\r\n        if(nodo != null){\r\n            let hasheo = sha256.create()\r\n            hasheo.update(String(nodo.dato))\r\n            hasheo.hex()\r\n            nodo.hash = hasheo\r\n            this.subHashing(nodo.izquierda)\r\n            this.subHashing(nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //Metodo Imprimir\r\n    imprimiendo(){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        this.imprimir(this.raiz)\r\n    }\r\n\r\n    //SubMetodo Imprimir\r\n    imprimir(nodo){\r\n        if(nodo != null){\r\n            console.log(nodo.dato + \" Es el dato\")\r\n            console.log(nodo.hash + \" Es el Hash\")\r\n            this.imprimir(nodo.izquierda)\r\n            this.imprimir(nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //Metodo Buscar\r\n    buscando(dato){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        let hasheo = sha256.create()\r\n        hasheo.update(String(dato))\r\n        hasheo.hex()\r\n        let nodo = this.raiz\r\n        this.buscar(hasheo, nodo)\r\n    }\r\n\r\n    //SubMetodo Buscar\r\n    buscar(hasheo, nodo){\r\n        if(nodo!= null){\r\n            let noha = nodo.hash.hex()\r\n            let has = hasheo.hex()\r\n            if(has == noha && nodo.nodohijo == true){\r\n                console.log(nodo.hash + \" fue encontrado para \"+nodo.dato)\r\n                return\r\n            }\r\n            this.buscar(hasheo, nodo.izquierda)\r\n            this.buscar(hasheo, nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //Metodo Eliminar\r\n    Eliminar(dato){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        let hasheo = sha256.create()\r\n        hasheo.update(String(dato))\r\n        hasheo.hex()\r\n        let nodo = this.raiz\r\n        this.eliminando(hasheo, nodo)\r\n    }\r\n\r\n    //SubMetodo Eliminar\r\n    eliminando(hasheo, nodo){\r\n        if(nodo!= null){\r\n            let noha = nodo.hash.hex()\r\n            let has = hasheo.hex()\r\n            if(has == noha && nodo.nodohijo == true){\r\n                nodo.nodohijo = false\r\n                this.cargaArbolLista()\r\n                this.raiz = null\r\n                for(let i = 0;i<recarga.length;i++){\r\n                    this.insertar(recarga[i])\r\n                }\r\n                recarga = []\r\n                this.hashing()\r\n                console.log(\"Dato Eliminado\")\r\n                return\r\n            }\r\n            this.eliminando(hasheo, nodo.izquierda)\r\n            this.eliminando(hasheo, nodo.derecha)\r\n        }\r\n    }\r\n    \r\n    //Metodo cargarlista para reestructuracion del arbol\r\n    cargaArbolLista(){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        let nodo = this.raiz\r\n        this.cargandoArbolLista(nodo)\r\n    }\r\n\r\n    //SubMetodo Cargando lista para reestructuracion del arbol\r\n    cargandoArbolLista(nodo){\r\n        if(nodo!= null){\r\n            if(nodo.nodohijo == true && nodo.dato != -1){\r\n                recarga.push(nodo.dato)\r\n            }\r\n            this.cargandoArbolLista(nodo.izquierda)\r\n            this.cargandoArbolLista(nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //Metodo Modificar\r\n    modificar(datoelim, nuevodato){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        let hasheo = sha256.create()\r\n        hasheo.update(String(datoelim))\r\n        hasheo.hex()\r\n        let nodo = this.raiz\r\n        this.modificando(hasheo, nuevodato, nodo)\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n    //SubMetodo modificar\r\n    modificando(hasheo, nuevodato, nodo){\r\n        if(nodo!= null){\r\n            let noha = nodo.hash.hex()\r\n            let has1 = hasheo.hex()\r\n            if(has1 == noha && nodo.nodohijo == true){\r\n                nodo.dato = nuevodato\r\n                this.cargaArbolLista()\r\n                this.raiz = null\r\n                for(let i = 0;i<recarga.length;i++){\r\n                    this.insertar(recarga[i])\r\n                }\r\n                recarga = []\r\n                this.hashing()\r\n                console.log(\"Dato Modificado\")\r\n                return\r\n            }\r\n            this.modificando(hasheo, nuevodato, nodo.izquierda)\r\n            this.modificando(hasheo, nuevodato, nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //Metodo Cargar\r\n    cargar(arreglo) {\r\n        arreglo.map(elemento => {\r\n            this.insertar(elemento);\r\n        })\r\n    }\r\n\r\n    //Metodo Guardar\r\n    guardando(){\r\n        if(this.raiz==null){\r\n            console.log(\"no existe arbol\")\r\n            return\r\n        }\r\n        let nodo = this.raiz;\r\n        this.guardar(nodo)\r\n    }\r\n\r\n    //Metodo Guardar\r\n    guardar(){\r\n        let vector = []\r\n        return this.preOrden(this.raiz, vector);\r\n    }\r\n\r\n    preOrden(nodo,vector){\r\n        if(nodo != null){\r\n        vector.push(nodo.dato)\r\n        this.preOrden(nodo.izquierda,vector)\r\n        this.preOrden(nodo.derecha,vector)\r\n        }\r\n        return vector\r\n    }\r\n\r\n    graficarNodos(nodo,vector,datoBuscar){\r\n\r\n        if(nodo.izquierda == null && nodo.derecha == null){\r\n            let dato\r\n            if(datoBuscar == nodo.dato){\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(), color: \"lime\"}\r\n            }else{\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(),}\r\n            }\r\n            \r\n            vector.push(dato)\r\n        }else{\r\n            let dato\r\n            if(datoBuscar == nodo.dato){\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(), color: \"lime\"}\r\n            }else{\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(),}\r\n            }\r\n            \r\n            vector.push(dato)\r\n        }\r\n        \r\n        if(nodo.izquierda != null){\r\n            this.graficarNodos(nodo.izquierda,vector,datoBuscar)\r\n        }\r\n\r\n        if (nodo.derecha != null){\r\n            this.graficarNodos(nodo.derecha,vector,datoBuscar)\r\n        }\r\n\r\n        return vector\r\n    }\r\n\r\n    obtenerNodos(datoBuscar){\r\n        let vector = []\r\n\r\n        return this.graficarNodos(this.raiz,vector,datoBuscar)\r\n    }\r\n\r\n    graficarApuntadores(nodo,vector){\r\n\r\n        if(nodo.izquierda != null){\r\n            this.graficarApuntadores(nodo.izquierda,vector)\r\n            let edge = {from:nodo.dato, to:nodo.izquierda.dato}\r\n            vector.push(edge)\r\n        }\r\n\r\n        if (nodo.derecha != null){\r\n            this.graficarApuntadores(nodo.derecha,vector)\r\n            let edge = {from:nodo.dato, to:nodo.derecha.dato}\r\n            vector.push(edge)\r\n        }\r\n\r\n        return vector\r\n    }\r\n\r\n    obtenerAputadores(){\r\n        let vector = []\r\n\r\n        return this.graficarApuntadores(this.raiz,vector)\r\n    }\r\n\r\n    //Metodo Graficar\r\n    graficar(valorBuscar){\r\n        \r\n        salida = \"\"\r\n        if(this.raiz == null){\r\n            console.log(\"No hay nada aun\")\r\n            return\r\n        }\r\n        let nodo = this.raiz\r\n        let contador = 0\r\n        salida+= \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\r\n        this.graficando(nodo,valorBuscar)\r\n        salida+= \"}\"\r\n        console.log(salida)\r\n        contador = 0\r\n\r\n        return salida\r\n    }\r\n\r\n    //SubMetodo Buscar\r\n    graficando(nodo,valorBuscar){\r\n        if(nodo!= null){\r\n            if(valorBuscar == nodo.dato){\r\n                salida += \"node\"+nodo.id+\" [color=\\\"green\\\" label = \\\" iz| \"+nodo.dato+\"|\"+nodo.hash.hex()+\" |de \\\"]; \\n\"\r\n            }else{\r\n                salida += \"node\"+nodo.id+\" [label = \\\" iz| \"+nodo.dato+\"|\"+nodo.hash.hex()+\" |de \\\"]; \\n\"\r\n            }\r\n            if(nodo.derecha != null){\r\n                salida += \"node\"+nodo.id + \" -> node\" +nodo.derecha.id + \"\\n\"\r\n            }\r\n            if(nodo.izquierda != null){\r\n                salida+= \"node\"+nodo.id + \" -> node\" + nodo.izquierda.id + \"\\n\"\r\n            }\r\n            if(nodo.izquierda!=null){\r\n                this.graficando(nodo.izquierda,valorBuscar)\r\n            }\r\n            if(nodo.derecha != null){\r\n                this.graficando(nodo.derecha,valorBuscar)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default MerkleTree;","var fs = require('fs')\r\nclass Nodo{\r\n    constructor(valor){        \r\n        this.valor = valor;\r\n        this.siguiente = null;\r\n        this.id = null;\r\n    }\r\n}\r\n\r\nclass Pila{\r\n    constructor(){\r\n        this.cabeza = null;  \r\n        this.contador = 0;   \r\n        this.contadorPilas = 0;    \r\n    }\r\n    agregar(elemento){\r\n        this.contador ++;\r\n        let nodonuevo = new Nodo(elemento);\r\n        nodonuevo.id = this.contador;\r\n        if (this.cabeza == null){\r\n            this.cabeza = nodonuevo;\r\n            \r\n\r\n        }else{\r\n            nodonuevo.siguiente = this.cabeza;\r\n            this.cabeza = nodonuevo\r\n        }\r\n\r\n    }\r\n\r\n\r\n    eliminar(){\r\n        let inicio = this.cabeza;\r\n        this.cabeza = this.cabeza.siguiente\r\n        return inicio;\r\n    }\r\n\r\n    actualizar(valoranterior, valor){\r\n        let temporal = this.cabeza;\r\n        if (this.cabeza == null){\r\n            console.log(\"No hay nada en la lista\")\r\n            \r\n        }else{\r\n            while(temporal != null){\r\n                if (temporal.valor == valoranterior){\r\n                    temporal.valor = valor;\r\n                }\r\n                temporal = temporal.siguiente;                \r\n\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n    buscar(valor){\r\n        let temporal = this.cabeza;\r\n        if (this.cabeza == null){\r\n            console.log(\"No hay nada en la lista\")\r\n            \r\n        }else{\r\n            while(temporal != null){\r\n                if (temporal.valor == valor){\r\n                    return temporal;\r\n                }\r\n                temporal = temporal.siguiente;                \r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    cargar(arreglo) {\r\n        \r\n        arreglo.map(e => {\r\n            this.agregar(e)\r\n        })\r\n    }\r\n\r\n    guardar(){\r\n        let archivojs=[];\r\n        let temporal = this.cabeza;\r\n        while (temporal != null){\r\n            archivojs[temporal.id] = temporal.valor;\r\n            temporal = temporal.siguiente;\r\n            \r\n        }\r\n       return archivojs\r\n    }\t\r\n\r\n    Recorrido(datoBuscar){\r\n        let arreglo = []\r\n        let temporal = this.cabeza;\r\n        let contador = 0\r\n        if (this.cabeza == null){\r\n            console.log(\"No hay nada en la lista\")\r\n            \r\n        }else{\r\n            while(temporal != null){\r\n                let dato = {id: contador, label: temporal.valor.toString(),}\r\n                arreglo[contador] = dato\r\n\r\n                if (temporal.valor == datoBuscar){\r\n                    let dato = {id: contador, label: temporal.valor.toString(),  color: \"lime\"}\r\n                    arreglo[contador] = dato\r\n                }\r\n                temporal = temporal.siguiente;   \r\n                contador++              \r\n\r\n            }\r\n        }\r\n        return arreglo\r\n    }\r\n\r\n    \r\n   \t\r\n }\r\n\r\n export default Pila;","//Insertcion no ordenada\r\n//Busqueda unica\r\n//Eliminacion unica\r\nvar fs = require('fs')\r\nclass Nodo{ //Clase Nodo\r\n    \r\n    //Constructor\r\n    constructor(dato){\r\n        this.siguiente = null;\r\n        this.anterior = null;\r\n        this.dato = dato;\r\n    }\r\n}\r\n\r\nclass ListaCD{  //Clase Lista Circular doble\r\n\r\n    //Constructor\r\n    constructor(){\r\n        this.cabeza = null;\r\n        this.cola = null;\r\n        this.size = 0;\r\n    }\r\n\r\n    //Metodo opcion de insertados\r\n    agregar(dato, opcion){       \r\n        switch (opcion) {\r\n            case \"Inicio\":\r\n                this.insertarInicio(dato)\r\n                break;\r\n            case \"Ordenado\":\r\n                this.agregarOrdenado(dato)\r\n                break;\r\n            case \"Final\":\r\n                this.insertFinal(dato)\r\n                break;     \r\n        }\r\n    }\r\n\r\n    //Metodo Insertar al Inicio\r\n    insertarInicio(dato){\r\n        let nodo = new Nodo(dato);\r\n        //Insertcion de primer nodo \r\n        if(this.cabeza == null){\r\n            this.cabeza = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n            return\r\n        }else if(this.cabeza != null && this.cola != null){\r\n            //Insercion de Nodos no primeros\r\n            this.cabeza.anterior = nodo;\r\n            nodo.siguiente = this.cabeza;\r\n            nodo.anterior = this.cola;\r\n            this.cola.siguiente = nodo\r\n            this.cabeza = nodo;\r\n            this.size++;\r\n            return\r\n        }\r\n    }\r\n\r\n    //Metodo Insertar\r\n    agregarOrdenado(dato){\r\n        let nodo = new Nodo(dato)\r\n        let aux = this.cabeza\r\n        if(this.cabeza == null){\r\n            this.cabeza = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n            return\r\n        }\r\n        if(dato < this.cabeza.dato){\r\n            //Insercion de Nodos no primeros\r\n            this.cabeza.anterior = nodo;\r\n            nodo.siguiente = this.cabeza;\r\n            nodo.anterior = this.cola;\r\n            this.cola.siguiente = nodo\r\n            this.cabeza = nodo;\r\n            this.size++;\r\n            return\r\n        }else if(dato >= this.cabeza.dato && dato <= this.cola.dato){\r\n            while(aux != this.cola){\r\n                if(dato >= aux.dato && dato <= aux.siguiente.dato){\r\n                    let tmp = aux.siguiente\r\n                    tmp.anterior = nodo\r\n                    aux.siguiente = nodo\r\n                    nodo.siguiente = tmp\r\n                    nodo.anterior = aux\r\n                    this.size++;\r\n                    return\r\n                }\r\n                aux = aux.siguiente\r\n            }\r\n        }else if(dato > this.cola.dato){\r\n            //Insercion de Nodos no primeros\r\n            let aux = this.cola;\r\n            aux.siguiente = nodo;\r\n            nodo.anterior = aux;\r\n            nodo.siguiente = this.cabeza;\r\n            this.cabeza.anterior = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n            return\r\n        }\r\n        \r\n    }\r\n\r\n    //Metodo Insertar al Final\r\n    insertFinal(dato){\r\n        let nodo = new Nodo(dato);\r\n        //Insertcion de primer nodo \r\n        if(this.cabeza == null){\r\n            this.cabeza = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n            return\r\n        }else if(this.cabeza != null && this.cola != null){\r\n            //Insercion de Nodos no primeros\r\n            let aux = this.cola;\r\n            aux.siguiente = nodo;\r\n            nodo.anterior = aux;\r\n            nodo.siguiente = this.cabeza;\r\n            this.cabeza.anterior = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n            return\r\n        }\r\n    }\r\n\r\n    //Metodo Imprimir\r\n    print(){\r\n        let aux = this.cabeza;\r\n        console.log(\"Entro a print\")\r\n        while (aux != this.cola){\r\n            console.log(aux.dato);\r\n            aux = aux.siguiente\r\n        }\r\n        if(aux == this.cola){\r\n            console.log(aux.dato);\r\n        }\r\n    }\r\n\r\n    //Metodo Buscar\r\n    buscar(dato){\r\n        let aux = this.cabeza;\r\n        let contador = 1;\r\n        while(aux.dato != dato && contador != this.size){\r\n            aux= aux.siguiente;\r\n            contador++;\r\n        }\r\n        if(aux.dato == dato){\r\n            //Dato encontrado\r\n            console.log(aux.dato + \" fue encontrado exitosamente\");\r\n        }\r\n        if (contador == this.size){\r\n            //Dato no encontrado\r\n            console.log(\"No se encontro el dato buscado\");\r\n        }\r\n    }\r\n\r\n    //Metodo Eliminar\r\n    eliminar(dato){\r\n        let aux = this.cabeza;\r\n        let contador = 1;\r\n        while(aux.dato != dato && contador != this.size){\r\n            aux= aux.siguiente;\r\n            contador++;\r\n        }\r\n        if(aux.dato == dato && aux != this.cabeza){\r\n            //Dato eliminado en Nodo no cabeza\r\n            aux.anterior.siguiente = aux.siguiente;\r\n            aux.siguiente.anterior = aux.anterior;\r\n            aux.siguiente = null;\r\n            aux.anterior = null;\r\n            console.log(aux.dato + \" fue eliminado con exito\");\r\n        }else if(aux.dato == dato && aux == this.cabeza){\r\n            //Dato eliminado en Nodo Cabeza\r\n            let tmp = aux.siguiente\r\n            aux.anterior.siguiente = aux.siguiente;\r\n            aux.siguiente.anterior = aux.anterior;\r\n            aux.siguiente = null;\r\n            aux.anterior = null;\r\n            this.cabeza = tmp\r\n            console.log(aux.dato + \" fue eliminado con exito\");\r\n        }\r\n        if (contador == this.size){\r\n            //Dato no encontrado\r\n            console.log(\"No se encontro el dato a eliminar\");\r\n        }\r\n    }\r\n\r\n    //Metodo Actualizar\r\n    actualizar(datoelim, datoins){\r\n        let aux = this.cabeza;\r\n        let contador = 1;\r\n        while(aux.dato != datoelim && contador != this.size){\r\n            aux= aux.siguiente;\r\n            contador++;\r\n        }\r\n        if(aux.dato == datoelim){\r\n            //Dato encontrado\r\n            console.log(aux.dato + \" fue encontrado exitosamente\");\r\n            aux.dato = datoins\r\n            console.log(datoelim + \" fue cambiado exitosamente a \"+aux.dato);\r\n        }\r\n        if (contador == this.size){\r\n            //Dato no encontrado\r\n            console.log(\"No se encontro el dato buscado\");\r\n        }\r\n    }\r\n\r\n    //Metodo Carga\r\n    cargar(arreglo,accion) {\r\n        arreglo.map(elemento => {\r\n            this.agregar(elemento,accion)\r\n        })\r\n    }\r\n\r\n    //Metodo Guardar\r\n    guardar() {\r\n        let archivojs = [];\r\n        let temporal = this.cabeza;\r\n        archivojs.push(temporal.dato)\r\n        temporal = temporal.siguiente\r\n        while (temporal != this.cabeza && temporal != null){\r\n            archivojs.push(temporal.dato)\r\n            temporal = temporal.siguiente\r\n        }\r\n        return archivojs\r\n    }\r\n\r\n\r\n    Recorrido(datoBuscar){\r\n        let aux = this.cabeza;\r\n        let contador = 0;\r\n\r\n        \r\n        let arreglo = []\r\n        let contadoraux = 0;\r\n        while(contador != this.size){\r\n            let dato = {id: contadoraux, label: aux.dato.toString(),}\r\n            arreglo[contadoraux] = dato\r\n\r\n            \r\n            if(aux.dato == datoBuscar){\r\n                let dato = {id: contadoraux, label: aux.dato.toString(),  color: \"lime\"}\r\n                arreglo[contadoraux] = dato\r\n            }\r\n            aux= aux.siguiente;\r\n            contador++;\r\n            contadoraux++;\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n    \r\n}\r\n\r\nexport default ListaCD;\r\n\r\n","//Forma de insercion: Desordenada\r\n//Eliminacion Unica de primer dato encontrado\r\n//Busqueda de primer metodo encontrado\r\nvar fs = require('fs');\r\nconst { ListaSimple } = require('./ListaSimple');\r\nclass Nodo{ //Clase Nodo\r\n    //Constructor\r\n    constructor(dato){\r\n        this.siguiente = null;\r\n        this.dato = dato;\r\n    }\r\n\r\n}\r\n\r\nclass ListaCS{ //Clase Lista Circular Simple\r\n    constructor(){\r\n        this.cabeza = null;\r\n        this.cola = null;\r\n        this.size = 0;\r\n    }\r\n\r\n    agregar(elemento, accion){        \r\n        switch(accion){\r\n            case \"Ordenado\":\r\n                this.agregarOrdenado(elemento);\r\n                break;\r\n            case \"Final\":\r\n                this.agregarFinal(elemento);\r\n                break;\r\n            case \"Inicio\":\r\n                this.agregarInicio(elemento);\r\n                break;   \r\n        }\r\n    }\r\n\r\n\r\n    agregarInicio(dato){\r\n        let nodo = new Nodo(dato);\r\n        if(this.cabeza == null){\r\n            this.cabeza = nodo;\r\n            this.cola = nodo;\r\n            this.size++\r\n            return\r\n        }else if(this.cabeza != null  && this.cola != null){\r\n            this.cabeza.anterior = nodo;\r\n            nodo.siguiente = this.cabeza\r\n            nodo.anterior = this.cola\r\n            this.cola.siguiente = nodo\r\n            this.cabeza = nodo\r\n            this.size++\r\n            return\r\n        }\r\n    }\r\n    \r\n    //Metodo Insertar\r\n    agregarOrdenado(dato){\r\n        let nodo = new Nodo(dato)\r\n        let aux = this.cabeza\r\n        if(this.cabeza == null){\r\n            this.cabeza = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n            return\r\n        }\r\n        if(dato < this.cabeza.dato){\r\n            //Insercion de Nodos no primeros\r\n            this.cabeza.anterior = nodo;\r\n            nodo.siguiente = this.cabeza;\r\n            nodo.anterior = this.cola;\r\n            this.cola.siguiente = nodo\r\n            this.cabeza = nodo;\r\n            this.size++;\r\n            return\r\n        }else if(dato >= this.cabeza.dato && dato <= this.cola.dato){\r\n            while(aux != this.cola){\r\n                if(dato >= aux.dato && dato <= aux.siguiente.dato){\r\n                    let tmp = aux.siguiente\r\n                    tmp.anterior = nodo\r\n                    aux.siguiente = nodo\r\n                    nodo.siguiente = tmp\r\n                    nodo.anterior = aux\r\n                    this.size++;\r\n                    return\r\n                }\r\n                aux = aux.siguiente\r\n            }\r\n        }else if(dato > this.cola.dato){\r\n            //Insercion de Nodos no primeros\r\n            let aux = this.cola;\r\n            aux.siguiente = nodo;\r\n            nodo.anterior = aux;\r\n            nodo.siguiente = this.cabeza;\r\n            this.cabeza.anterior = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n            return\r\n        }\r\n        \r\n    }\r\n\r\n    //Metodo Insertar\r\n    agregarFinal(dato){\r\n        let nodo = new Nodo(dato);\r\n        //Insercion de primer nodo\r\n        if(this.cabeza == null){\r\n            this.cabeza = nodo;\r\n            this.cola = nodo;\r\n            this.size++;\r\n        }else if(this.cabeza != null){ // Insercion de nodo No Cabeza\r\n            let aux = this.cabeza;\r\n            while(aux != this.cola){\r\n                aux = aux.siguiente;\r\n            }\r\n            aux.siguiente = nodo;\r\n            nodo.siguiente = this.cabeza;\r\n            this.cola = nodo;\r\n            this.size++;\r\n        }\r\n    }\r\n\r\n    //Metodo Imprimir\r\n    print(){\r\n        let aux = this.cabeza;\r\n        while (aux != this.cola){\r\n            console.log(aux.dato);\r\n            aux = aux.siguiente\r\n        }\r\n        if(aux == this.cola){\r\n            console.log(aux.dato);\r\n        }\r\n    }\r\n\r\n    //Metodo buscar\r\n    buscar(dato){\r\n        let aux = this.cabeza;\r\n        let contador = 1;\r\n        let tmp = aux.siguiente\r\n        while(tmp.dato != dato && contador != this.size){\r\n            aux= aux.siguiente;\r\n            tmp= tmp.siguiente;\r\n            contador++;\r\n        }\r\n        if(tmp.dato == dato){\r\n            //Dato encontrado\r\n            console.log(tmp.dato + \" fue hayado con exito\");\r\n        }\r\n        if (contador == this.size){\r\n            //Dato no encontrado\r\n            console.log(\"No se encontro el dato buscado\");\r\n        }\r\n    }\r\n\r\n    //Metodo Eliminar\r\n    eliminar(dato){\r\n        let aux = this.cabeza;\r\n        let contador = 1;\r\n        let tmp = aux.siguiente\r\n        while(tmp.dato != dato && contador != this.size){\r\n            aux= aux.siguiente;\r\n            tmp= tmp.siguiente;\r\n            contador++;\r\n        }\r\n        if(tmp.dato == dato){\r\n            //Dato Eliminado\r\n            aux.siguiente = tmp.siguiente;\r\n            tmp.siguiente = null;\r\n            console.log(tmp.dato + \" fue eliminado con exito\");\r\n        }\r\n        if (contador == this.size){\r\n            //Dato no encontrado\r\n            console.log(\"No se encontro el dato a eliminar\");\r\n        }\r\n    }\r\n\r\n    //Metodo Actualizar\r\n    actualizar(datoelim, datoinse){\r\n        let aux = this.cabeza;\r\n        let contador = 1;\r\n        let tmp = aux.siguiente\r\n        while(tmp.dato != datoelim && contador != this.size){\r\n            aux= aux.siguiente;\r\n            tmp= tmp.siguiente;\r\n            contador++;\r\n        }\r\n        if(tmp.dato == datoelim){\r\n            //Dato encontrado\r\n            console.log(tmp.dato + \" fue hayado con exito\");\r\n            tmp.dato = datoinse\r\n            console.log(datoelim + \" fue editado con exito a \" + tmp.dato);\r\n        }\r\n        if (contador == this.size){\r\n            //Dato no encontrado\r\n            console.log(\"No se encontro el dato buscado\");\r\n        }\r\n    }\r\n\r\n    //Metodo Cargar\r\n    cargar(arreglo,accion) {\r\n        arreglo.map(elemento => {\r\n            this.agregar(elemento,accion)\r\n        })\r\n    }\r\n\r\n    //Metodo Guardar\r\n    guardar() {\r\n        let archivojs = [];\r\n        let temporal = this.cabeza;\r\n        archivojs.push(temporal.dato)\r\n        temporal = temporal.siguiente\r\n        while (temporal != this.cabeza && temporal != null){\r\n            archivojs.push(temporal.dato)\r\n            temporal = temporal.siguiente\r\n        }\r\n        \r\n        return archivojs\r\n    }\r\n\r\n   \r\n\r\n    Recorrido(datoBuscar){\r\n        let aux = this.cabeza;\r\n        let contador = 0;\r\n\r\n        let arreglo = []\r\n        let contadoraux = 0;\r\n\r\n        while(contador != this.size){\r\n\r\n            let dato = {id: contadoraux, label: aux.dato.toString(),}\r\n            arreglo[contadoraux] = dato\r\n            \r\n            if(aux.dato == datoBuscar){\r\n                let dato = {id: contadoraux, label: aux.dato.toString(),  color: \"lime\"}\r\n                arreglo[contadoraux] = dato\r\n            }\r\n\r\n\r\n            aux= aux.siguiente;\r\n            contador++;\r\n            contadoraux++;\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n}\r\n\r\n\r\n//module.exports.ListaCS = ListaCS;\r\nexport default ListaCS;","class Nodo {\r\n    constructor(valor) {        \r\n        this.valor = valor;\r\n        this.siguiente = null;\r\n        this.anterior = null;\r\n    }\r\n}\r\n\r\n\r\nclass ListaDoble {\r\n    constructor() {\r\n        //inicializar atributos\r\n        this.primero = null;\r\n        this.ultimo = null;\r\n\r\n    }\r\n\r\n    agregar(elemento, accion){        \r\n        switch(accion){\r\n            case \"Ordenado\":\r\n                this.agregarOrdenado(elemento);\r\n                break;\r\n            case \"Final\":\r\n                this.agregarFinal(elemento);\r\n                break;\r\n            case \"Inicio\":\r\n                this.agregarInicio(elemento);\r\n                break;   \r\n        }\r\n    }\r\n\r\n\r\n    agregarInicio(elemento){\r\n        let nodo = new Nodo(elemento);\r\n        let temporal = this.primero;\r\n        if(this.primero == null){\r\n            this.primero = nodo;\r\n        }else{\r\n            nodo.siguiente =this.primero;\r\n            this.primero.anterior = nodo;\r\n            this.primero = nodo;\r\n        }\r\n\r\n    }\r\n\r\n    agregarOrdenado(elemento){\r\n        let nodo = new Nodo(elemento)\r\n        if(this.primero == null){\r\n            this.primero = nodo;\r\n        }else{\r\n            let temporal = this.primero;\r\n\r\n            while(temporal.siguiente != null ){\r\n                if(temporal.valor <= elemento && temporal.siguiente.valor >= elemento){\r\n                    nodo.siguiente = temporal.siguiente;\r\n                    temporal.siguiente.anterior = nodo;\r\n                    nodo.anterior = temporal;\r\n                    temporal.siguiente = nodo;   \r\n                    break;                 \r\n                }else if(temporal == this.primero && temporal.valor >= elemento){\r\n                    nodo.siguiente = this.primero;\r\n                    this.primero.anterior = nodo;\r\n                    this.primero = nodo;\r\n                    break;\r\n                }                                \r\n                temporal = temporal.siguiente;\r\n\r\n            }if(temporal.siguiente == null && temporal.valor <= elemento){\r\n                temporal.siguiente = nodo;\r\n                nodo.anterior = temporal; \r\n            }\r\n        }\r\n\r\n    }\r\n    agregarFinal(elemento){        \r\n        var temporal = this.primero;\r\n        let nodo = new Nodo(elemento);\r\n        if(this.primero == null){            \r\n            this.primero = nodo;\r\n        }else {\r\n            \r\n            while(temporal.siguiente != null) {\r\n                temporal = temporal.siguiente;                \r\n            }            \r\n            temporal.siguiente = nodo;\r\n            nodo.anterior = temporal;\r\n        }\r\n    }\r\n\r\n\r\n    eliminar(elemento){\r\n        if (this.primero == null) {\r\n            console.log(\"No hay nada en las lista\")\r\n        }\r\n        else {\r\n            let temporal = this.primero;\r\n            while (temporal != null) {\r\n                if (temporal.valor == elemento) {\r\n                    temporal = temporal.siguiente;\r\n                }\r\n                else {\r\n                    if (temporal.siguiente != null) {\r\n                        if (temporal.siguiente.valor == elemento) {\r\n                            let siguienteT = temporal.siguiente;\r\n                            temporal.siguiente = siguienteT.siguiente;\r\n                            temporal.siguiente.anterior = temporal;\r\n                            siguienteT.siguiente = null;\r\n                            return;\r\n\r\n                        }\r\n                    }\r\n                }\r\n                temporal = temporal.siguiente;\r\n            }\r\n        }\r\n    }\r\n\r\n    actualizar(reemplazo,valor){\r\n        if (this.primero == null) {\r\n            console.log(\"No hay nada en las lista\")\r\n        }\r\n        else {\r\n            let temporal = this.primero;\r\n            while (temporal != null) {\r\n                if (temporal.valor == valor) {\r\n                    temporal.valor = reemplazo;\r\n                }\r\n                temporal = temporal.siguiente;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    buscar(valor){\r\n        if (this.primero == null  ) {\r\n            console.log(\"no hay elementos en la lista\");          \r\n        }\r\n        else {\r\n            let temporal = this.primero;\r\n            while(temporal != null){ \r\n                if(temporal.valor == valor){\r\n                    return temporal;  \r\n                }\r\n                temporal = temporal.siguiente;\r\n            }\r\n        }\r\n    }\r\n\r\n    cargar(arreglo) {\r\n        \r\n        arreglo.map(elemento => {\r\n            this.agregar(elemento);\r\n        });\r\n    }\r\n\r\n    guardar() {\r\n        let archivojs= [];\r\n        let temporal = this.primero;\r\n        while (temporal != null){\r\n            archivojs.push(temporal.valor);\r\n            temporal = temporal.siguiente;\r\n            \r\n        }\r\n        return archivojs;\r\n        \r\n    }\r\n\r\n    imprimir(){\r\n        let temporal = this.primero;\r\n        while(temporal != null){\r\n            console.log(temporal.valor + \"Aqui\")\r\n            temporal = temporal.siguiente;\r\n        }\r\n    }\r\n\r\n    Recorrido(datoBuscar){\r\n        let temporal = this.primero;\r\n        let arreglo = [];\r\n        let contador = 0;\r\n        while(temporal != null){ \r\n            let dato = {id: contador, label: temporal.valor.toString(),}\r\n            arreglo[contador] = dato\r\n            \r\n            if(temporal.valor == datoBuscar){\r\n                let dato = {id: contador, label: temporal.valor.toString(),  color: \"lime\"}\r\n                arreglo[contador] = dato\r\n            }\r\n            temporal = temporal.siguiente;\r\n            contador++;\r\n        }\r\n\r\n        return arreglo\r\n\r\n    }\r\n\r\n\r\n}\r\n//module.exports.ListaDoble = ListaDoble;\r\nexport default ListaDoble;\r\n","//Clase Nodo\r\nclass Nodo{\r\n    //Constructor\r\n    constructor(dato){\r\n        this.dato = dato\r\n        this.anterior = null\r\n        this.siguiente = null\r\n        this.izquierdo = null\r\n        this.derecho = null\r\n    }\r\n}\r\n\r\n//String para graficacion\r\nvar salida = \"\"\r\n//Arreglo de uso unico\r\nvar arr = []\r\n//VariableGlobal\r\nvar idRama = 0\r\n\r\n//Clase Rama\r\nclass Rama{\r\n    //Constructor\r\n    constructor(){\r\n        this.contador = 0\r\n        this.hoja = true\r\n        this.raiz = null\r\n        this.id = 0\r\n    }\r\n\r\n    //Metodo Insertar en Rama\r\n    insertar(nodo){\r\n        //Insertar Primer Nodo\r\n        if(this.raiz == null){\r\n            this.raiz = nodo\r\n            this.contador++\r\n        }else{  //Insertar Nodo no Primero\r\n            let tmp = this.raiz\r\n            do{\r\n                if(nodo.dato<=tmp.dato){    //Insercion de dato menor igual\r\n                    this.contador++\r\n                    //Insercion en nodo no vacio\r\n                    if(tmp == this.raiz){\r\n                        this.raiz.anterior = nodo\r\n                        nodo.siguiente = this.raiz\r\n                        this.raiz.izquierdo = nodo.derecho\r\n                        this.raiz = nodo\r\n                        break\r\n                    }else{\r\n                        //Insercion entre nodos\r\n                        nodo.anterior = tmp.anterior\r\n                        nodo.siguiente = tmp\r\n                        tmp.anterior.siguiente = nodo\r\n                        tmp.anterior.derecho = nodo.izquierdo\r\n                        tmp.anterior= nodo\r\n                        tmp.izquierdo = nodo.derecho\r\n                        break\r\n                    }\r\n                //Insercion en nodos vacios\r\n                }else if(tmp.siguiente == null){\r\n                    this.contador++\r\n                    tmp.siguiente = nodo\r\n                    tmp.derecho =   nodo.izquierdo\r\n                    nodo.anterior = tmp\r\n                    nodo.siguiente = null\r\n                    break\r\n                }\r\n                tmp = tmp.siguiente\r\n            }while(tmp != null)\r\n        }\r\n    }\r\n\r\n}\r\n\r\n//Clase Arbol\r\nclass ArbolB{\r\n    //Constructor\r\n    constructor(orden){\r\n        this.raiz = null\r\n        this.orden = orden\r\n    }\r\n\r\n    //Metodo Insercion en arbol\r\n    insertar(dato){\r\n        let nodo = new Nodo(dato)\r\n        //Insercion para arbol vacio\r\n        if(this.raiz == null){\r\n            this.raiz = new Rama()\r\n            this.raiz.insertar(nodo)\r\n            this.raiz.id = idRama\r\n            idRama++\r\n            return\r\n        }else{\r\n            //Insercion para arbol no vacio\r\n            let tmp = this.add(nodo, this.raiz)\r\n            if(tmp instanceof Nodo){\r\n                this.raiz = new Rama()\r\n                this.raiz.insertar(tmp)\r\n                this.raiz.hoja = false\r\n            }\r\n        }\r\n    }\r\n\r\n    //Metodo para agregar y verificar estado de las ramas\r\n    add(nodo, rama){\r\n        //Si es un nodo hijo\r\n        if(rama.hoja){\r\n            rama.insertar(nodo)\r\n            if(rama.contador == this.orden){\r\n                //Division de rama\r\n                return this.divRam(rama)\r\n            }else{\r\n                //Retornar rama no llena\r\n                return rama\r\n            }\r\n        //Si no es un nodo hijo\r\n        }else{\r\n            let tmp = rama.raiz \r\n            do{\r\n                if(nodo.dato == tmp.dato){\r\n                    //No inserta duplicados\r\n                    return rama\r\n                }else if(nodo.dato < tmp.dato){ //Insercion de nodo menor\r\n                    let aux = this.add(nodo, tmp.izquierdo)\r\n                    if( aux instanceof Nodo){\r\n                        rama.insertar(aux)\r\n                        if(rama.contador == this.orden){\r\n                            return this.divRam(rama)\r\n                        }\r\n                    }\r\n                    return rama\r\n                }else if(tmp.siguiente == null){    //Insercion para nodo con un solo valor\r\n                    let aux = this.add(nodo, tmp.derecho)\r\n                    if(aux instanceof Nodo){\r\n                        rama.insertar(aux)\r\n                        if(rama.contador == this.orden){\r\n                            return this.divRam(rama)\r\n                        }\r\n                    }\r\n                    return rama\r\n                }\r\n                tmp = tmp.siguiente\r\n            }while(tmp != null)\r\n        }\r\n        return rama\r\n    }\r\n\r\n    //Metodo de division de rama\r\n    divRam(rama){\r\n        let der = new Rama()\r\n        let izq = new Rama()\r\n        let mitad = null\r\n        let tmp = rama.raiz\r\n        let inicio = 1\r\n        let medio = parseInt(this.orden/2) + 1\r\n        let final = this.orden\r\n        for(let i = 1; i < this.orden + 1;i++, tmp = tmp.siguiente){\r\n            let nodo = new Nodo(tmp.dato)\r\n            nodo.izquierdo = tmp.izquierdo\r\n            nodo.derecho = tmp.derecho\r\n            if(nodo.derecho != null && nodo.izquierdo != null){\r\n                izq.hoja = false\r\n                der.hoja = false\r\n            }\r\n            if(i >= inicio && i < medio){\r\n                izq.insertar(nodo)\r\n            }else if(i == medio){\r\n                mitad = nodo\r\n            }else if(i <= final && i > medio){\r\n                der.insertar(nodo)\r\n            }\r\n        }\r\n        izq.id = idRama+1\r\n        der.id = idRama+2\r\n        mitad.id = idRama\r\n        mitad.izquierdo = izq\r\n        mitad.derecho = der\r\n        idRama = idRama + 3\r\n        return mitad\r\n    }\r\n\r\n    //Metodo de impresion de Arbol\r\n    printArbol(){\r\n        if (this.raiz == null){\r\n            console.log(\"no existe arbol\")\r\n            return \r\n        }\r\n        this.subprint(this.raiz) \r\n    }\r\n\r\n    //Sub metodo de impresion de arbol\r\n    subprint(rama){\r\n        if (rama.raiz == null){\r\n            console.log(\"no hay nodos\")\r\n            return \r\n        }\r\n        let aux = rama.raiz\r\n        if(aux.izquierdo != null){\r\n            this.subprint(aux.izquierdo)\r\n        }\r\n        if(aux.derecho!=null){\r\n            this.subprint(aux.derecho)\r\n        }\r\n        if(aux.anterior == null && aux.siguiente == null){\r\n            console.log(aux.dato)\r\n            return\r\n        }\r\n        while(aux!= null){\r\n            console.log(aux.dato)\r\n            aux = aux.siguiente\r\n            if(aux != null && aux.derecho!=null){\r\n                this.subprint(aux.derecho)\r\n            }\r\n        }\r\n    }\r\n\r\n    guardar(){\r\n        let arreglo = []\r\n        if (this.raiz == null){\r\n            console.log(\"no existe arbol\")\r\n            return \r\n        }\r\n       return this.recorrido(this.raiz,arreglo) \r\n    }\r\n\r\n    //Sub metodo de impresion de arbol\r\n    recorrido(rama,arreglo){\r\n        if (rama.raiz == null){\r\n            console.log(\"no hay nodos\")\r\n            return \r\n        }\r\n        let aux = rama.raiz\r\n        if(aux.izquierdo != null){\r\n            this.recorrido(aux.izquierdo,arreglo)\r\n        }\r\n        if(aux.derecho!=null){\r\n            this.recorrido(aux.derecho,arreglo)\r\n        }\r\n        if(aux.anterior == null && aux.siguiente == null){\r\n            arreglo.push(aux.dato)\r\n            return\r\n        }\r\n        while(aux!= null){\r\n            arreglo.push(aux.dato)\r\n            aux = aux.siguiente\r\n            if(aux != null && aux.derecho!=null){\r\n                this.recorrido(aux.derecho,arreglo)\r\n            }\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n\r\n    //Metodo de busqueda\r\n    buscarArbol(dato){\r\n        if (this.raiz == null){\r\n            console.log(\"no existe arbol\")\r\n            return \r\n        }\r\n        this.buscando(this.raiz, dato) \r\n    }\r\n\r\n    //Sub metodo de busqueda\r\n    buscando(rama, dato){\r\n        if (rama.raiz == null){\r\n            console.log(\"no hay nodos\")\r\n            return \r\n        }\r\n        let aux = rama.raiz\r\n        if(aux.izquierdo != null){\r\n            this.buscando(aux.izquierdo, dato)\r\n        }\r\n        if(aux.derecho!=null){\r\n            this.buscando(aux.derecho, dato)\r\n        }\r\n        if(aux.siguiente == null){\r\n            if(aux.dato == dato){\r\n                console.log(\"Dato encontrado\" + dato)\r\n                return\r\n            }\r\n        }\r\n        while(aux!= null){\r\n            if(aux.dato == dato){\r\n                console.log(\"Dato encontrado\" + dato)\r\n                return\r\n            }\r\n            aux = aux.siguiente\r\n            if(aux != null && aux.derecho!=null){\r\n                this.buscando(aux.derecho, dato)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    //Metodo eliminar\r\n    eliminar(dato){\r\n        if (this.raiz == null){\r\n            console.log(\"no existe arbol\")\r\n            return \r\n        }\r\n        let aux = this.raiz\r\n        let aux2 = aux.raiz\r\n        while (aux2 != null){\r\n            if(aux2.dato == dato && aux2.izquierdo == null && aux2.derecho == null){\r\n                if(aux2.anterior == null && aux2.siguiente != null){\r\n                    let tmp = aux2.siguiente\r\n                    aux.raiz = tmp\r\n                    aux2.siguiente = null\r\n                    tmp.anterior = null\r\n                    console.log(\"Nodo Raiz eliminado\")\r\n                    return\r\n                }else if(aux2.anterior != null && aux2.siguiente != null){\r\n                    let tmp = aux2.siguiente\r\n                    aux2.anterior.siguiente = tmp\r\n                    tmp.anterior = aux2.anterior\r\n                    aux2.anterior = null\r\n                    aux2.siguiente = null\r\n                    console.log(\"Nodo medio eliminado\")\r\n                    return\r\n                }else if(aux2.anterior != null && aux2.siguiente == null){\r\n                    let tmp = aux2.anterior\r\n                    tmp.siguiente = null\r\n                    aux2.anterior = null\r\n                    console.log(\"Nodo eliminado al final\")\r\n                    return\r\n                }else if(aux2.anterior == null && aux2.siguiente == null){\r\n                    if(aux2.izquierdo == null && aux2.derecho == null){\r\n                        this.raiz = null\r\n                        idRama = 0\r\n                        console.log(\"eliminado unico nodo\")\r\n                    }\r\n                }\r\n            }\r\n            aux2 = aux2.siguiente\r\n        }\r\n        this.eliminando(this.raiz, dato) \r\n    }\r\n\r\n    //Sub metodo eliminar\r\n    eliminando(rama, dato){\r\n        if (rama.raiz == null){\r\n            console.log(\"no hay nodos\")\r\n            return \r\n        }\r\n        let aux = rama.raiz\r\n        if(aux.izquierdo != null){\r\n            this.eliminando(aux.izquierdo, dato)\r\n        }\r\n        if(aux.derecho!=null){\r\n            this.eliminando(aux.derecho, dato)\r\n        }\r\n        if(aux.siguiente == null && aux.anterior == null){\r\n            if(aux.dato == dato){\r\n                console.log(\"Dato identificado\" + dato)\r\n                aux.dato = \"papa\"\r\n                this.elimin(this.raiz)\r\n                this.creando()\r\n                return\r\n            }\r\n        }\r\n        while(aux!= null){\r\n            if(aux.anterior != null && aux.derecho != null){\r\n                this.eliminando(aux.derecho, dato)\r\n            }\r\n            if(aux.dato == dato){\r\n                console.log(\"Dato identificado\" + dato)\r\n                aux.dato = \"papa\"\r\n                this.elimin(this.raiz)\r\n                this.creando()\r\n                return\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n    }\r\n\r\n    //Metodo de reestructuracion de arbol\r\n    creando(){\r\n        this.raiz = null\r\n        idRama = 0\r\n        for(let i = 0; i<arr.length;i++){\r\n            let dat = arr[i]\r\n            this.insertar(dat)\r\n        }\r\n        console.log(\"Arbol Creado\")\r\n        arr = []\r\n    }\r\n    \r\n    //Metodo para manejo de array de uso unico\r\n    elimin(rama){\r\n        if (rama.raiz == null){\r\n            console.log(\"no hay nodos\")\r\n            return \r\n        }\r\n        let aux = rama.raiz\r\n        if(aux.izquierdo != null){\r\n            this.elimin(aux.izquierdo)\r\n        }\r\n        if(aux.derecho!=null){\r\n            this.elimin(aux.derecho)\r\n        }\r\n        if(aux.siguiente == null && aux.anterior == null){\r\n            if(aux.dato != \"papa\"){\r\n                arr.push(aux.dato)\r\n                return\r\n            }\r\n        }\r\n        while(aux!= null){\r\n            if(aux.anterior != null && aux.derecho != null){\r\n                this.elimin(aux.derecho)\r\n            }\r\n            if(aux.dato != \"papa\"){\r\n                arr.push(aux.dato)\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n    }\r\n\r\n    //Metodo modificar\r\n    modificar(datelim, datins){\r\n        this.eliminar(datelim)\r\n        this.insertar(datins)\r\n    }\r\n\r\n    //Metodo Cargar\r\n    cargar(arreglo) {\r\n        arreglo.map(elemento => {\r\n            this.insertar(elemento);\r\n        })\r\n    }\r\n\r\n    //Metodo Graficar\r\n      //Metodo Graficar\r\n      graficar(datoBuscar){\r\n          \r\n        salida = \"\"\r\n        if(this.raiz == null){\r\n            console.log(\"No hay nada aun\")\r\n            return\r\n        }\r\n        let rama = this.raiz\r\n        salida+= \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\r\n        this.graficando(rama,datoBuscar)\r\n        salida+= \"}\"\r\n        console.log(salida)\r\n\r\n        return salida\r\n    }\r\n\r\n    //SubMetodo Graficar\r\n    graficando(rama,datoBuscar){\r\n        if (rama.raiz == null){\r\n            console.log(\"no hay nodos\")\r\n            return \r\n        }\r\n        let aux = rama.raiz\r\n        if(aux.izquierdo != null){\r\n            this.graficando(aux.izquierdo,datoBuscar)\r\n        }\r\n        if(aux.derecho!=null){\r\n            this.graficando(aux.derecho,datoBuscar)\r\n        }\r\n        if(aux.siguiente == null){\r\n            if(datoBuscar == aux.dato){\r\n                salida += \"node\"+rama.id+\" [color=\\\"green\\\" label = \\\" iz| \"+aux.dato+\" |de \\\"]; \\n\"\r\n            }else{\r\n                salida += \"node\"+rama.id+\" [label = \\\" iz| \"+aux.dato+\" |de \\\"]; \\n\"\r\n            }\r\n            if(aux.derecho != null){\r\n                salida+= \"node\"+rama.id + \" -> node\" + aux.derecho.id + \"\\n\"\r\n            }\r\n            if(aux.izquierdo != null){\r\n                salida+= \"node\"+rama.id + \" -> node\" + aux.izquierdo.id + \"\\n\"\r\n            }\r\n        }\r\n        if(aux.siguiente != null){\r\n            if(aux.izquierdo==null && aux.derecho == null){\r\n                salida += \"node\"+rama.id+\" [label = \\\" iz| \"\r\n                let encuentra = false\r\n                while(aux!=null){\r\n                    if(datoBuscar == aux.dato){\r\n                        encuentra = true\r\n                    }\r\n                    salida += aux.dato+ \" | \"\r\n                    aux = aux.siguiente\r\n                }\r\n                if(encuentra== true){\r\n                    salida += \"de \\\"color = \\\"green\\\"] ; \\n\"\r\n                }else{\r\n                    salida += \"de \\\"]; \\n\"\r\n                }\r\n            }else if(aux.izquierdo!=null && aux.derecho != null){\r\n                salida += \"node\"+rama.id+\" [label = \\\" iz| \"\r\n                let encuentra = false\r\n                while(aux!=null){\r\n                    if(datoBuscar == aux.dato){\r\n                        encuentra = true\r\n                    }\r\n                    salida += aux.dato+ \" | \"\r\n                    aux = aux.siguiente\r\n                }\r\n                if(encuentra== true){\r\n                    salida += \"de \\\"color = \\\"green\\\"] ; \\n\"\r\n                }else{\r\n                    salida += \"de \\\"]; \\n\"\r\n                }\r\n                aux = rama.raiz\r\n                if(aux.derecho != null){\r\n                    salida+= \"node\"+rama.id + \" -> node\" + rama.raiz.derecho.id + \"\\n\"\r\n                }\r\n                if(aux.izquierdo != null){\r\n                    salida+= \"node\"+rama.id + \" -> node\" + rama.raiz.izquierdo.id + \"\\n\"\r\n                }\r\n                aux = rama.raiz\r\n                aux = aux.siguiente\r\n                while(aux!=null){\r\n                    salida += \"node\"+rama.id + \" -> node\" + aux.derecho.id + \"\\n\"\r\n                    aux = aux.siguiente\r\n                }\r\n            }\r\n            aux = rama.raiz\r\n            aux = aux.siguiente\r\n            while(aux !=null){\r\n                if(aux != null && aux.derecho!=null){\r\n                    this.graficando(aux.derecho,datoBuscar)\r\n                }\r\n                aux = aux.siguiente\r\n            }\r\n        }    \r\n    }\r\n\r\n \r\n\r\n    \r\n}\r\n\r\nexport default ArbolB;","class Nodo {\r\n    constructor(valor) {\r\n        this.valor = valor;\r\n        this.anterior = null;\r\n        this.siguiente = null;\r\n        this.rama_Izq = null;\r\n        this.rama_Der = null;\r\n        this.id = null; // id nuevo \r\n    }\r\n}\r\n\r\nvar permiso = false\r\nvar salida = \"\"\r\n\r\nclass Rama {\r\n    constructor() {\r\n        this.hoja = true;\r\n        this.indice = null;\r\n        this.ramaContinua = null;\r\n        this.contador = 0; /// Calcular Maximos y minimos\r\n        this.ramaPadre = null;\r\n        this.idRama = null;\r\n    }\r\n\r\n    agregarNodo(nodo) {\r\n        if (this.indice == null) {\r\n            this.indice = nodo;\r\n            this.contador++;\r\n        } else {\r\n            let temporal = this.indice;\r\n            do {\r\n                if (nodo.valor <= temporal.valor) {\r\n                    this.contador++;\r\n                    if (temporal == this.indice) {\r\n                        temporal.anterior = nodo;\r\n                        nodo.siguiente = temporal;\r\n                        temporal.rama_Izq = nodo.rama_Der;\r\n                        this.indice = nodo;\r\n                        break;\r\n                    } else {//en caso de que no sea el indice se inserta en medio de los valores respectivos\r\n                        nodo.anterior = temporal.anterior;\r\n                        nodo.siguiente = temporal;\r\n                        temporal.anterior.siguiente = nodo;\r\n                        temporal.anterior = nodo;\r\n\r\n                        temporal.anterior.rama_Der = nodo.rama_Izq;\r\n                        temporal.rama_Izq = nodo.rama_Der;\r\n                        break;\r\n\r\n                    }\r\n                }// insertar al final\r\n                else if (temporal.siguiente == null) {\r\n                    this.contador++;\r\n                    temporal.siguiente = nodo;\r\n                    temporal.rama_Der = nodo.rama_Izq;\r\n                    nodo.anterior = temporal;\r\n                    break;\r\n                }\r\n                temporal = temporal.siguiente;\r\n            } while (temporal != null);\r\n        }\r\n    }\r\n}\r\n\r\nclass ArbolBplus {\r\n    constructor(orden) {\r\n        this.orden = orden;\r\n        this.NodoAux = null;\r\n        this.raiz = null;\r\n        this.cuentaRamas = 0;\r\n\r\n    }\r\n/*-----------------------------------------------\r\n-------------Inicio bloque Agregar --------------\r\n-----------------------------------------------*/\r\n    agregar(valor) {\r\n        let nodo = new Nodo(valor);\r\n        this.cuentaNodos++;\r\n        nodo.id = this.cuentaNodos;\r\n        this._agregar(nodo, this.raiz)\r\n\r\n    }\r\n\r\n\r\n    _agregar(nodo, ramaAux) {\r\n        if (this.raiz == null) {\r\n            this.raiz = new Rama();\r\n            this.cuentaRamas++;\r\n            this.raiz.id = this.cuentaRamas;\r\n            this.raiz.agregarNodo(nodo);\r\n\r\n        } else if (ramaAux.hoja) {\r\n            ramaAux.agregarNodo(nodo);\r\n            if (ramaAux.contador == this.orden) {\r\n                this.dividirRama(ramaAux);\r\n                this.raiz.idRama = this.raiz.indice.idRama;\r\n            }\r\n        } else if (ramaAux.hoja == false) {\r\n            this.buscarInsercion(nodo, ramaAux);\r\n        }\r\n    }\r\n\r\n    buscarInsercion(nodo, rama) {\r\n        let temp = rama.indice;\r\n        for (let i = 1; i <= rama.contador; i++, temp = temp.siguiente) {\r\n            if (nodo.valor < temp.valor) {\r\n                this._agregar(nodo, temp.rama_Izq);\r\n                break;\r\n            } else if (temp.siguiente == null) {\r\n                this._agregar(nodo, temp.rama_Der);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    dividirRama(ramaAux) {\r\n        let valorMedio = parseInt(this.orden / 2) + 1\r\n        this.cuentaRamas ++;\r\n        let rama_derAux = new Rama();\r\n        rama_derAux.id = this.cuentaRamas;\r\n        rama_derAux.idRama = this.cuentaRamas;\r\n        this.cuentaRamas++;\r\n        let rama_izAux = new Rama();\r\n        rama_izAux.id = this.cuentaRamas;  \r\n        rama_izAux.idRama = this.cuentaRamas; \r\n        this.cuentaRamas ++;     \r\n        let medio = null;\r\n        let temp = ramaAux.indice;\r\n        let hoja = false;\r\n        let nuevaRaiz = null;\r\n\r\n        if (ramaAux.ramaPadre == null) {\r\n            nuevaRaiz = new Rama()\r\n            nuevaRaiz.id = ramaAux.id;\r\n        }    \r\n        if(temp.rama_Der != null || temp.rama_Izq != null){\r\n            ramaAux.hoja = false\r\n        }\r\n        if (ramaAux.hoja) {\r\n            hoja = true;          \r\n        }\r\n\r\n        if(ramaAux.ramaPadre != null){\r\n            if(ramaAux.ramaPadre.indice.rama_Izq.hoja == true){\r\n                let tempContinua = ramaAux.ramaPadre.indice;\r\n                while(tempContinua != null){\r\n                    if(tempContinua.siguiente == null){\r\n                        tempContinua.rama_Izq.ramaContinua = rama_izAux;\r\n                        }\r\n                        tempContinua = tempContinua.siguiente;\r\n                    }           \r\n        }\r\n        }\r\n\r\n        for (let i = 1; i <= this.orden; i++, temp = temp.siguiente) {\r\n            let nodo = new Nodo(temp.valor);\r\n            nodo.rama_Izq = temp.rama_Izq;\r\n            nodo.rama_Der = temp.rama_Der;            \r\n/* Si el nodo tiene hijos, aparte de ingresar los datos, \r\nreacomodo sus hijos en los espacios de las divisiones*/\r\n            if (i < valorMedio) {\r\n                if(nodo.rama_Izq != null){\r\n                    nodo.rama_Izq.ramaPadre = rama_izAux;\r\n                }\r\n                if(nodo.rama_Der != null){\r\n                    nodo.rama_Der.ramaPadre = rama_izAux;\r\n                }\r\n                rama_izAux.agregarNodo(nodo);               \r\n\r\n            } else if (i > valorMedio) {\r\n                if(nodo.rama_Izq != null){\r\n                    nodo.rama_Izq.ramaPadre = rama_derAux;\r\n                }\r\n                if(nodo.rama_Der != null){\r\n                    nodo.rama_Der.ramaPadre = rama_derAux;\r\n                }\r\n                rama_derAux.agregarNodo(nodo);\r\n\r\n            } else if (i = valorMedio) {\r\n                if (hoja) {\r\n                    if(nodo.rama_Izq != null){\r\n                        nodo.rama_Izq.ramaPadre = rama_derAux;\r\n                    }\r\n                    if(nodo.rama_Der != null){\r\n                        nodo.rama_Der.ramaPadre = rama_derAux;\r\n                    }\r\n                    rama_derAux.agregarNodo(nodo);\r\n                    medio = new Nodo(temp.valor);\r\n                    medio.rama_Izq = rama_izAux;\r\n                    medio.rama_Der = rama_derAux;\r\n                } else if (hoja == false) {\r\n                    medio = new Nodo(temp.valor);\r\n                    medio.rama_Izq = rama_izAux;\r\n                    medio.rama_Der = rama_derAux;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(rama_derAux.indice.rama_Izq != null || rama_derAux.indice.rama_Der != null){\r\n            rama_derAux.hoja = false;\r\n        }\r\n        if(rama_izAux.indice.rama_Izq != null || rama_izAux.indice.rama_Der != null){\r\n            rama_izAux.hoja = false;\r\n        }\r\n\r\n        if (nuevaRaiz != null) {       \r\n            rama_derAux.ramaPadre = nuevaRaiz;\r\n            rama_izAux.ramaPadre = nuevaRaiz;\r\n            this.cuentaNodos ++;\r\n            medio.id = this.cuentaNodos;                \r\n            nuevaRaiz.agregarNodo(medio);           \r\n            //nuevaRaiz.indice.rama_Izq = rama_izAux;\r\n            //nuevaRaiz.indice.rama_Der = rama_derAux;\r\n            if (hoja) {\r\n                nuevaRaiz.indice.rama_Izq.ramaContinua = nuevaRaiz.indice.rama_Der;\r\n            }\r\n            nuevaRaiz.hoja = false;\r\n            this.raiz = nuevaRaiz;\r\n        } else {\r\n            medio.rama_Izq.ramaPadre = ramaAux.ramaPadre;\r\n            medio.rama_Der.ramaPadre = ramaAux.ramaPadre;\r\n            this.cuentaNodos ++;\r\n            medio.id = this.cuentaNodos;\r\n            ramaAux.ramaPadre.agregarNodo(medio);//ContadorNodoRamaPadre\r\n            if (hoja) {\r\n                medio.rama_Izq.ramaContinua = medio.rama_Der;\r\n            }\r\n            if (ramaAux.ramaPadre.contador == this.orden) {\r\n                this.dividirRama(ramaAux.ramaPadre)\r\n            }\r\n        }\r\n        medio.idRama = this.cuentaRamas -2;\r\n    }    \r\n/*-----------------------------------------------\r\n---------------Fin bloque Agregar ---------------\r\n-----------------------------------------------*/\r\n\r\n    eliminar(valor){    \r\n        let arbolAux  = this.raiz;\r\n        this._eliminar(valor, arbolAux);\r\n    }\r\n\r\n_eliminar(valor, ramaAux){\r\n    if(ramaAux.hoja != true){\r\n        this._eliminar(valor, ramaAux.indice.rama_Izq)\r\n    }else if(ramaAux.hoja == true){\r\n        this.raiz = null;\r\n        while(ramaAux != null){\r\n            let nodotemp = ramaAux.indice;     \r\n            for(let i = 1; i <= ramaAux.contador; i ++,nodotemp = nodotemp.siguiente){\r\n                if(nodotemp.valor == valor){\r\n                    continue\r\n                }else{\r\n                    this.agregar(nodotemp.valor)\r\n                }                     \r\n            }ramaAux = ramaAux.ramaContinua\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nactualizar(valor, valorNuevo){\r\n    this.eliminar(valor)\r\n    this.agregar(valorNuevo)\r\n}\r\n\r\nbuscar(valor){      \r\n    let Encontrado = this._buscar(valor, this.raiz)  \r\n    console.log(Encontrado.valor + \"Aqui esta\")\r\n}\r\n\r\n_buscar(valor, ramaAux){\r\n    let temporal = ramaAux.indice;\r\n    for(let  i = 1; i<=ramaAux.contador; i++, temporal = temporal.siguiente){\r\n        if(temporal.valor > valor){\r\n            if(ramaAux.hoja == false){\r\n               let nodo = this._buscar(valor, temporal.rama_Izq)\r\n               return nodo;\r\n            }\r\n        }else if(temporal.valor == valor){\r\n            if(ramaAux.hoja == false){\r\n               let  nodo1 = this._buscar(valor, temporal.rama_Der)\r\n                if(nodo1 instanceof Nodo){\r\n                    return nodo1\r\n                }\r\n                let nodo2 = this._buscar(valor, temporal.rama_Izq)\r\n                if(nodo2 instanceof Nodo){\r\n                    return nodo2\r\n                }\r\n            }else if(ramaAux.hoja == true){\r\n                return temporal;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\ncargar(arreglo) {\r\n    let arreglo1 = arreglo;\r\n    arreglo1.map(elemento => {\r\n        this.agregar(elemento);\r\n    });\r\n}\r\n\r\n\r\nrecorrer(){\r\n    let arreglo = [];\r\n    this._recorrer(arreglo,this.raiz)\r\n    console.log(arreglo)\r\n}\r\n\r\n_recorrer(arreglo, ramaAux){\r\n    if(ramaAux.hoja == false){\r\n        this._recorrer(arreglo, ramaAux.indice.rama_Izq)\r\n    }else if(ramaAux.hoja == true){\r\n        let contador = 0;\r\n        while(ramaAux != null){\r\n            let nodotemp = ramaAux.indice;     \r\n            for(let i = 1; i <= ramaAux.contador; i ++,nodotemp = nodotemp.siguiente){                    \r\n                arreglo[contador] = nodotemp.valor;\r\n                contador ++;\r\n            }ramaAux = ramaAux.ramaContinua\r\n        }\r\n    }\r\n}\r\n\r\n //Metodo Graficar\r\n graficar(){\r\n    salida = \"\"\r\n    permiso = false\r\n    if(this.raiz == null){\r\n        console.log(\"No hay nada aun\")\r\n        return\r\n    }\r\n    let rama = this.raiz\r\n    salida+= \"digraph G{\\nnode[shape=record]\\nedge[color=\\\"green\\\"]\\n\"\r\n    this.graficando(rama)\r\n    salida+= \"}\"\r\n    console.log(salida)\r\n    return salida\r\n}\r\n\r\n//SubMetodo Graficar\r\ngraficando(rama){\r\n    if (rama.indice == null){\r\n        console.log(\"no hay nodos\")\r\n        return \r\n    }\r\n    let aux = rama.indice\r\n    if(aux.rama_Izq != null){\r\n        this.graficando(aux.rama_Izq)\r\n    }\r\n    if(aux.rama_Der!=null){\r\n        this.graficando(aux.rama_Der)\r\n    }\r\n    if(aux.siguiente == null){\r\n        salida += \"node\"+rama.idRama+\" [label = \\\" iz| \"+aux.valor+\" |de \\\"]; \\n\"\r\n        if(aux.rama_Der != null){\r\n            salida+= \"node\"+rama.idRama + \" -> node\" + aux.rama_Der.idRama + \"\\n\"\r\n        }\r\n        if(aux.rama_Izq != null){\r\n            salida+= \"node\"+rama.idRama + \" -> node\" + aux.rama_Izq.idRama + \"\\n\"\r\n        }\r\n    }\r\n    if(aux.siguiente != null){\r\n        if(aux.rama_Izq==null && aux.rama_Der == null){\r\n            salida += \"node\"+rama.idRama+\" [label = \\\" iz| \"\r\n            while(aux!=null){\r\n                salida += aux.valor+ \" | \"\r\n                aux = aux.siguiente\r\n            }\r\n            salida += \"de \\\"]; \\n\"\r\n        }else if(aux.rama_Izq!=null && aux.rama_Der != null){\r\n            salida += \"node\"+rama.idRama+\" [label = \\\" iz| \"\r\n            while(aux!=null){\r\n                salida += aux.valor+ \" | \"\r\n                aux = aux.siguiente\r\n            }\r\n            salida += \"de \\\"]; \\n\"\r\n            aux = rama.indice\r\n            if(aux.rama_Der != null){\r\n                salida+= \"node\"+rama.idRama + \" -> node\" + rama.indice.rama_Der.idRama + \"\\n\"\r\n            }\r\n            if(aux.rama_Izq != null){\r\n                salida+= \"node\"+rama.idRama + \" -> node\" + rama.indice.rama_Izq.idRama + \"\\n\"\r\n            }\r\n            aux = rama.indice\r\n            aux = aux.siguiente\r\n            while(aux!=null){\r\n                salida += \"node\"+rama.idRama + \" -> node\" + aux.rama_Der.idRama + \"\\n\"\r\n                aux = aux.siguiente\r\n            }\r\n        }\r\n        aux = rama.indice\r\n        aux = aux.siguiente\r\n        while(aux !=null){\r\n            if(aux != null && aux.rama_Der!=null){\r\n                this.graficando(aux.rama_Der)\r\n            }\r\n            aux = aux.siguiente\r\n        }   \r\n    }   \r\n    if(rama.hoja == true && permiso == false){\r\n        while(rama.ramaContinua != null){\r\n            if(rama.ramaContinua != null){\r\n                salida += \"node\"+rama.idRama + \" -> node\" + rama.ramaContinua.idRama + \"\\n\"\r\n            }\r\n            rama = rama.ramaContinua\r\n        }\r\n        permiso = true\r\n    } \r\n    \r\n}\r\n\r\n\r\nguardar(){\r\n    let arreglo = [];\r\n    this._recorrer(arreglo,this.raiz)\r\n   return arreglo\r\n}\r\n\r\n}\r\nexport default ArbolBplus;\r\n//module.exports.ArbolBplus = ArbolBplus;"," import { v4 as uuidv4 } from 'uuid';\r\n\r\nclass Nodo {\r\n    constructor (dato){\r\n        this.hash = null\r\n        this.dato = dato\r\n        this.siguiente = null\r\n        this.id = uuidv4()\r\n    }\r\n} \r\n\r\nclass TablaHashAbierta {\r\n    constructor (tamaño,minimo,maximo,forma) {\r\n        this.tabla = null\r\n        this.tamaño = tamaño\r\n        this.minimo = minimo\r\n        this.maximo = maximo\r\n        this.funcion = forma\r\n        this.datosAgregados = 0\r\n        this.iscargar = false\r\n        this.iniciar()\r\n    \r\n    }\r\n\r\n    iniciar(){\r\n        \r\n        this.datosAgregados = 0;\r\n        let newTable = [this.tamaño]\r\n\r\n        for (let index = 0; index < this.tamaño; index++) {\r\n            newTable[index] = -1\r\n            \r\n        }\r\n\r\n        this.tabla = newTable\r\n    }\r\n\r\n    funcion_Hash(dato, forma){\r\n        let valorretorno;\r\n        if(dato.charCodeAt){\r\n            dato = this.getCharCodes(dato)\r\n        }\r\n        switch(forma){\r\n            \r\n            case \"Simple\":\r\n                valorretorno = this.hashSimple(dato)\r\n                break;\r\n            case \"Division\":\r\n                valorretorno =  this.division(dato)\r\n                break;\r\n            case \"Multiplicacion\":\r\n                valorretorno =  this.multiplicacion(dato)\r\n                break;\r\n            default:\r\n                break;\r\n\r\n        }\r\n\r\n        return valorretorno\r\n    }\r\n\r\n    hashSimple(valor){\r\n        while(valor > 1){\r\n            valor = valor/10\r\n        }\r\n        let hash = valor * this.tabla.length\r\n        return Math.floor(hash)\r\n    }\r\n\r\n    division(valor){\r\n        let hash = valor % this.tabla.length\r\n\r\n        return hash\r\n    }\r\n\r\n    multiplicacion(valor){\r\n        let hash = (this.tabla.length*(valor*0.2520 % 1))\r\n\r\n        return Math.floor(hash)\r\n    }\r\n\r\n    getCharCodes(s){\r\n        let charCodeArr = 0;\r\n        \r\n        for(let i = 0; i < s.length; i++){\r\n            let code = s.charCodeAt(i);\r\n            charCodeArr += code\r\n        }\r\n        \r\n        return charCodeArr;\r\n      }\r\n\r\n\r\n    agregar(dato){\r\n        if(this.iscargar){\r\n\r\n        }else{\r\n            if(typeof  parseInt(dato) === 'number'){\r\n                dato = parseInt(dato)\r\n            }\r\n        }\r\n        let posicionTabla = this.tabla[this.funcion_Hash(dato, this.funcion)]\r\n        let posicion = this.funcion_Hash(dato, this.funcion)\r\n        console.log(posicion)\r\n        if(posicionTabla === -1){\r\n            this.tabla[posicion] =  new Cola()\r\n            this.tabla[posicion].Agregar(dato)\r\n            \r\n            this.datosAgregados++;\r\n        }else{\r\n            this.tabla[posicion].Agregar(dato)\r\n        }\r\n\r\n\r\n        this.rehashing();\r\n        \r\n    }\r\n\r\n    rehashing(){\r\n        if((this.datosAgregados*100/this.tamaño) >= this.maximo){\r\n            let copyarray = this.tabla\r\n\r\n            let tamañoAnterior = this.tamaño\r\n\r\n            this.tamaño = (this.datosAgregados*100/this.minimo);\r\n\r\n            this.iniciar()\r\n            for (let index = 0; index < tamañoAnterior; index++) {\r\n                if(copyarray[index] != -1){\r\n                        let temp = copyarray[index].primero\r\n                        while(temp != null){\r\n                            this.agregar(temp.dato)\r\n                            temp = temp.siguiente\r\n                        }\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n    }\r\n    \r\n\r\n    imprimir(){\r\n        for (let index = 0; index < this.tabla.length; index++) {\r\n            console.log(index)\r\n            if(this.tabla[index] !== -1){\r\n                console.log(this.tabla[index].Imprimir())\r\n            }        \r\n        \r\n        \r\n        }\r\n    }\r\n\r\n    actualizar(datoanterior, datonuevo){\r\n        this.eliminar(datoanterior)\r\n        this.agregar(datonuevo,this.funcion)\r\n    }\r\n\r\n    eliminar(dato){\r\n        for (let index = 0; index < this.tabla.length; index++) {\r\n            if(this.tabla[index] !== -1){\r\n                if(this.tabla[index].eliminar(dato)){\r\n                    if (this.tabla[index].primero == null){\r\n                        this.tabla[index] = -1\r\n                        console.log(\"es null -1\")\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            \r\n        }\r\n    }\r\n\r\n    cargar(arr){\r\n        this.iscargar = true\r\n        arr.map(e => {\r\n            this.agregar(e)\r\n        })\r\n        this.iscargar = false\r\n    }\r\n\r\n    guardar(){\r\n        let recorrido = []\r\n        for (let index = 0; index < this.tabla.length; index++) {\r\n            if(this.tabla[index] !== -1){\r\n                recorrido = recorrido.concat(\r\n                    this.tabla[index].guardar())\r\n            }\r\n        }\r\n\r\n        return recorrido\r\n    }\r\n\r\n    graficar(valorBuscar){\r\n        let recorrido = []\r\n        for (let index = 0; index < this.tabla.length; index++) {\r\n            let nodoArreglo = {\r\n                id:index,\r\n                type: 'input', // input node\r\n                data: { label: index },\r\n                position: { x: 100, y: 25 + index*75 },\r\n                connectable: false, \r\n            }\r\n            recorrido.push(nodoArreglo)\r\n            if(this.tabla[index] !== -1){\r\n                recorrido = recorrido.concat(\r\n                    this.tabla[index].Recorrido(index,valorBuscar))\r\n                \r\n                let nodoege = {\r\n                id: index+'-'+this.tabla[index].primero.id, source: index, target: this.tabla[index].primero.id\r\n                }\r\n\r\n                recorrido.push(nodoege)\r\n            }\r\n            \r\n            \r\n        \r\n        }\r\n\r\n        for (let index = 0; index < this.tamaño-1; index++) {\r\n            let varnew = {\r\n                id: index+'-'+(index+1), source: index, target: index+1\r\n            }\r\n            recorrido.push(varnew)\r\n        }\r\n\r\n        return recorrido\r\n    }\r\n}\r\n\r\n\r\nclass Cola {\r\n    constructor(){\r\n        this.primero = null\r\n        this.ultimo = null\r\n        this.longitud = 0 \r\n    }\r\n\t\r\n\testaVacia() {\r\n        if (this.primero == null){\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    Agregar(dato){\r\n        let nuevoNodo = new Nodo(dato)\r\n\r\n        if(this.estaVacia()){\r\n            this.primero = nuevoNodo\r\n            this.ultimo = nuevoNodo\r\n        }else{\r\n            nuevoNodo.siguiente = this.primero\r\n            this.primero = nuevoNodo\r\n        }\r\n\r\n        this.longitud++\r\n    }\r\n\t\r\n\tImprimir(){\r\n        let text = \"\"\r\n        let nodoActual = this.primero\r\n\r\n        while (nodoActual != null){\r\n            text += nodoActual.dato + \"->\"\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            \r\n        }\r\n        text += \"null\"\r\n\r\n        return text\r\n    }\r\n\r\n\teliminar(dato){\r\n       let nodoActual = this.primero\r\n        let nodoanterior = null\r\n        let valor = false;\r\n\r\n        if(nodoActual != null && nodoActual.dato == dato){\r\n            this.primero = nodoActual.siguiente\r\n            return true\r\n        }\r\n\r\n        while(nodoActual != null && nodoActual.dato != dato){\r\n            nodoanterior = nodoActual\r\n            nodoActual = nodoActual.siguiente\r\n            valor = true\r\n        }\r\n\r\n        if (nodoActual == null){\r\n            return false\r\n        }\r\n        nodoanterior.siguiente = nodoActual.siguiente;\r\n        if(valor){\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\t\r\n\t\r\n    guardar(){\r\n        let arreglo = []\r\n        let nodoActual = this.primero\r\n\r\n        while (nodoActual != null){\r\n            arreglo.push(nodoActual.dato)\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            \r\n        }\r\n\r\n        return arreglo\r\n    }\r\n\t\r\n\tRecorrido(cordenada,datoBuscar){\r\n        let arreglo = []\r\n        let nodoActual = this.primero\r\n        let contador = 0\r\n\r\n        while (nodoActual != null){\r\n            let nodoArreglo = {\r\n                id: nodoActual.id,\r\n                type: 'default',\r\n                targetPosition: 'left',\r\n                sourcePosition: 'right',\r\n                data: { label: nodoActual.dato },\r\n                position: { x: 100 + (contador+1)*200, y: 25 +cordenada *75 },\r\n                connectable: false, \r\n            }\r\n\r\n            if(nodoActual.dato == datoBuscar){\r\n                nodoArreglo = {\r\n                    id: nodoActual.id,\r\n                    type: 'special',\r\n                    targetPosition: 'left',\r\n                    sourcePosition: 'right',\r\n                    data: { text: \"----------\"+nodoActual.dato+ \"--------\" },\r\n                    position: { x: 100 + (contador+1)*200, y: 25 +cordenada *75 },\r\n                    connectable: false, \r\n                }\r\n            }\r\n\r\n            arreglo.push(nodoArreglo)\r\n\r\n            if(nodoActual.siguiente != null){\r\n                let nodoArreglo = {\r\n                    id: nodoActual.id+'-'+nodoActual.siguiente.id, source: nodoActual.id, target: nodoActual.siguiente.id  }\r\n                    arreglo.push(nodoArreglo)\r\n            }\r\n            \r\n            \r\n\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            contador++\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n\r\n    /* guardar(){\r\n        let arreglo = []\r\n        let nodoActual = this.primero\r\n        let contador = 0\r\n\r\n        while (nodoActual != null){\r\n            arreglo.push(nodoActual.dato)          \r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            contador++\r\n        }\r\n\r\n        return arreglo\r\n    } */\r\n}\r\nexport default  TablaHashAbierta;","class Nodo {\r\n    constructor(valor){\r\n        this.valor = valor\r\n        this.hash = null\r\n\r\n    }\r\n}\r\n\r\nclass TablaHashCerrada {\r\n    constructor(tamaño, minimo, maximo,forma,colision){\r\n        \r\n        \r\n        this.tabla = null\r\n        this.tamaño = tamaño\r\n        this.minimo = minimo\r\n        this.maximo = maximo\r\n        this.funcion = forma\r\n        this.colision = colision\r\n        this.datosAgregados = 0\r\n        this.iniciar();\r\n    }\r\n\r\n    iniciar(){\r\n        \r\n        this.datosAgregados = 0\r\n        let newTable = [this.tamaño]\r\n\r\n        for (let index = 0; index < this.tamaño; index++) {\r\n            newTable[index] = -1\r\n            \r\n        }\r\n\r\n        this.tabla = newTable\r\n    }\r\n\r\n    funcion_Hash(dato, forma){\r\n        let valorretorno;\r\n        if(typeof dato === 'string'){\r\n            dato = this.getCharCodes(dato)\r\n        }\r\n        switch(forma){\r\n            \r\n            case \"Simple\":\r\n                valorretorno = this.hashSimple(dato)\r\n                break;\r\n            case \"Division\":\r\n                valorretorno =  this.division(dato)\r\n                break;\r\n            case \"Multiplicacion\":\r\n                valorretorno =  this.multiplicacion(dato)\r\n                break;\r\n            default:\r\n                break;\r\n\r\n        }\r\n\r\n        return valorretorno\r\n    }\r\n\r\n    hashSimple(valor){\r\n        while(valor > 1){\r\n            valor = valor/10\r\n        }\r\n        let hash = valor * this.tabla.length\r\n        return Math.floor(hash)\r\n    }\r\n\r\n    division(valor){\r\n        let hash = valor % this.tabla.length\r\n\r\n        return Math.floor(hash)\r\n    }\r\n\r\n    multiplicacion(valor){\r\n        let hash = (this.tabla.length*(valor*0.61803 % 1))\r\n\r\n        return Math.floor(hash)\r\n    }\r\n\r\n     getCharCodes(s){\r\n        let charCodeArr = 0;\r\n        \r\n        for(let i = 0; i < s.length; i++){\r\n            let code = s.charCodeAt(i);\r\n            charCodeArr += code\r\n        }\r\n        \r\n        return charCodeArr;\r\n      }\r\n\r\n    agregar(dato){\r\n        if(typeof parseInt(dato) === 'number'){\r\n            dato = parseInt(dato)\r\n        }\r\n        let posicion =this.funcion_Hash(dato, this.funcion)\r\n        let i = 1;\r\n        while(this.tabla[posicion] !== -1){\r\n            \r\n            posicion = this.colisiones(dato, i, this.colision, this.funcion_Hash(dato, this.funcion))\r\n            i++;\r\n            \r\n        }\r\n        this.tabla[posicion] = dato;\r\n        this.datosAgregados++;\r\n        this.rehashing();\r\n    }\r\n\r\n     colisiones(dato, i, colision, h1){\r\n        let retorno;\r\n        if(typeof dato === 'string'){\r\n            dato = this.getCharCodes(dato)\r\n        }\r\n        console.log(dato)\r\n        switch(colision){\r\n            case \"Lineal\":\r\n                retorno = this.colisionLineal(dato, i)\r\n                break;\r\n            case \"Cuadratica\":\r\n                retorno = this.colisionCuadratica(dato, i)\r\n                break;\r\n            case \"Doble\":\r\n                retorno= this.colisionDobleHash(dato, i)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        console.log(retorno)\r\n        return retorno\r\n    }\r\n\r\n    colisionLineal(dato,i){\r\n\r\n        let prueba = ((dato+i) % this.tamaño)\r\n        return Math.floor(prueba)\r\n    }\r\n\r\n    colisionCuadratica(dato, i){\r\n        let prueba = (dato +(i*i)) % this.tamaño\r\n        return Math.floor(prueba)\r\n    }\r\n\r\n    colisionDobleHash(dato,i){\r\n        let h1 = dato % this.tamaño\r\n        h1 = Math.floor(h1)\r\n        let  h2 = 1 + (dato %(this.tamaño-1))\r\n        h2 = Math.floor(h2)\r\n        let prueba = ((h1 + (i*h2)) % this.tamaño)\r\n\r\n        return Math.floor(prueba)\r\n    }\r\n\r\n    imprimir(){\r\n        for (let index = 0; index < this.tabla.length; index++) {\r\n            console.log(index, this.tabla[index])\r\n        \r\n        \r\n        }\r\n\r\n        console.log(this.datosAgregados)\r\n    }\r\n\r\n    guardar(){\r\n        let arreglo = []\r\n        for (let index = 0; index < this.tabla.length; index++) {\r\n            if(this.tabla[index] !=  -1){\r\n                arreglo.push(this.tabla[index])\r\n            }\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n\r\n    rehashing(){\r\n        if(((this.datosAgregados*100)/this.tamaño) >= this.maximo){\r\n            let copyarray = this.tabla\r\n\r\n            let tamañoAnterior = this.tamaño\r\n\r\n            this.tamaño = (this.datosAgregados*100/this.minimo);\r\n\r\n            this.iniciar()\r\n\r\n            for (let index = 0; index < tamañoAnterior; index++) {\r\n                if(copyarray[index] != -1){\r\n                        this.agregar(copyarray[index])\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    actualizar(datoAnterior, datoNuevo){\r\n        this.eliminar(datoAnterior)\r\n        this.agregar(datoNuevo)\r\n    }\r\n\r\n    eliminar(dato){\r\n        let contador = 0;\r\n        for (let index = 0; index < this.tabla.length; index++) {\r\n            if(this.tabla[index] == dato){\r\n                this.tabla[index] = -1\r\n                contador++;\r\n            }\r\n\r\n            if(contador == 1){\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    cargar(arr){\r\n        arr.map(e => {\r\n            this.agregar(e)\r\n        })\r\n    }\r\n\r\n    graficar(valorBuscar){\r\n        let recorrido = []\r\n        for (let index = 0; index < this.tabla.length; index++) {\r\n            let nodoArreglo = {\r\n                id: index,\r\n                type: 'special',\r\n                targetPosition: 'left',\r\n                sourcePosition: 'right',\r\n                data: { nodo: this.tabla[index] !== -1 ? this.tabla[index]: \"-----\", text:  index  },\r\n                position: {  x: 100, y: 25 + index*75  },\r\n                connectable: false, \r\n            }\r\n            if(this.tabla[index] === valorBuscar){\r\n                nodoArreglo = {\r\n                    id: index,\r\n                    type: 'default',\r\n                    targetPosition: 'top',\r\n                    sourcePosition: 'bottom',\r\n                    data: { label: (\r\n                        <> <strong>{this.tabla[index]}</strong>\r\n                        </>\r\n                     ) },\r\n                    position: {  x: 100, y: 25 + index*75  },\r\n                    connectable: false, \r\n                }\r\n            }\r\n            recorrido.push(nodoArreglo)\r\n        }\r\n\r\n        for (let index = 0; index < this.tamaño-1; index++) {\r\n            let varnew = {\r\n                id: index+'-'+(index+1), source: index, target: index+1\r\n            }\r\n            recorrido.push(varnew)\r\n        }\r\n\r\n        return recorrido\r\n    }\r\n}\r\n\r\nexport default TablaHashCerrada;\r\n\r\n\r\n\r\n","class matriz{\r\n    constructor(tamaño){\r\n        this.arreglo = null\r\n        this.vector = null\r\n        this.tamaño = tamaño\r\n        this.iniciar()\r\n    }\r\n    \r\n\r\n    iniciar(){\r\n        let array = [this.tamaño[0]]\r\n        \r\n        for (let x = 0; x < this.tamaño[0]; x++) {\r\n            array[x] = [this.tamaño[1]]\r\n        }\r\n\r\n         for (let i = 0; i < this.tamaño[0]; i++) {\r\n            for (let j = 0; j < this.tamaño[1]; j++) {\r\n                array [i][j] = 0;\r\n                \r\n            }\r\n            \r\n        } \r\n\r\n        this.arreglo = array\r\n    }\r\n\r\n    imprimirMatriz(){\r\n\r\n        for (let i = 0; i < this.tamaño[0]; i++) {\r\n            for (let j = 0; j < this.tamaño[1]; j++) {\r\n                console.log(this.arreglo[i][j])\r\n                \r\n            }\r\n            \r\n        }\r\n    \r\n    }\r\n\r\n    graficarMatriz(x,y){\r\n        \r\n        let arreglo = []\r\n        for(let i = 0; i < this.tamaño[0]; i++){\r\n            let nodoArreglo = {\r\n                id: i.toString(),\r\n                type: 'default',\r\n                targetPosition: 'top',\r\n                sourcePosition: 'bottom',\r\n                data: { label: (\r\n                    <> <strong>{i}</strong>\r\n                    </>\r\n                 ) },\r\n                position: {  x: 100 , y: 25 + (i+1)*40  },\r\n                connectable: false, \r\n            }\r\n\r\n            arreglo.push(nodoArreglo)\r\n\r\n        }\r\n\r\n        for(let i = 0; i < this.tamaño[1]; i++){\r\n            let nodoArreglo = {\r\n                id: i.toString()+20,\r\n                type: 'default',\r\n                targetPosition: 'top',\r\n                sourcePosition: 'bottom',\r\n                data: { label: (\r\n                    <> <strong>{i}</strong>\r\n                    </>\r\n                 ) },\r\n                position: {  x: 100  + (i+1)*150, y: 25 },\r\n                connectable: false, \r\n            }\r\n\r\n            arreglo.push(nodoArreglo)\r\n\r\n        }\r\n\r\n        for (let i = 0; i < this.tamaño[0]; i++) {\r\n            for (let j = 0; j < this.tamaño[1]; j++) {\r\n                let nodoArreglo = {\r\n                    id: i.toString()+j.toString(),\r\n                    type: 'default',\r\n                    targetPosition: 'top',\r\n                    sourcePosition: 'bottom',\r\n                    data: { label: (\r\n                        <> <strong>{this.arreglo[i][j]}</strong>\r\n                        </>\r\n                     ) },\r\n                    position: {  x: 100 + (j+1)*150, y: 25 + (i+1)*40  },\r\n                    connectable: false, \r\n                }\r\n\r\n                if(i == x && j == y){\r\n                    nodoArreglo = {\r\n                        id: i.toString()+j.toString(),\r\n                        type: 'special',\r\n                        targetPosition: 'top',\r\n                        sourcePosition: 'bottom',\r\n                        data: {text: \"----------\"+this.arreglo[i][j]+ \"--------\" \r\n                          },\r\n                        position: {  x: 100 + (j+1)*150, y: 25 + (i+1)*40 },\r\n                        connectable: false, \r\n                    }\r\n                }\r\n\r\n                arreglo.push(nodoArreglo)\r\n            }\r\n            \r\n        }\r\n\r\n        return arreglo\r\n    }\r\n\r\n    eliminar(i,j,nombre){\r\n        let busqueda;\r\n        if(nombre == \"Row Major\"){\r\n            busqueda = this.busquedaRowMajor( parseInt(i), parseInt(j))\r\n        }else if(nombre == \"Col Major\"){\r\n            busqueda = this.busquedaColMajor(parseInt(i), parseInt(j))\r\n        }\r\n        \r\n        this.vector[busqueda] = 0\r\n        this.arreglo[parseInt(i)][parseInt(j)] = 0\r\n    }\r\n\r\n        actualizar(i,j,nombre,dato){\r\n        \r\n        let busqueda;\r\n        if(nombre == \"Row Major\"){\r\n            busqueda = this.busquedaRowMajor( parseInt(i), parseInt(j))\r\n        }else if(nombre == \"Col Major\"){\r\n            busqueda = this.busquedaColMajor(parseInt(i), parseInt(j))\r\n        }\r\n        \r\n        this.vector[busqueda] = dato\r\n        this.arreglo[parseInt(i)][parseInt(j)] = dato\r\n    }\r\n\r\n    graficarVector(i,j, nombre){\r\n        let busqueda;\r\n            if(nombre == \"Row Major\"){\r\n                busqueda = this.busquedaRowMajor( parseInt(i), parseInt(j))\r\n            }else if(nombre == \"Col Major\"){\r\n                busqueda = this.busquedaColMajor(parseInt(i), parseInt(j))\r\n            } \r\n\r\n        \r\n        console.log(busqueda)\r\n        \r\n        let arreglo = []\r\n        for (let x = 0; x < this.vector.length; x++) {\r\n            let nodoArreglo = {\r\n                id: x.toString(),\r\n                type: 'default',\r\n                targetPosition: 'top',\r\n                sourcePosition: 'bottom',\r\n                data: { label: (\r\n                    <> <strong>{this.vector[x]}</strong>\r\n                    </>\r\n                 ) },\r\n                position: {  x: 100 + (x)*150, y:150 },\r\n                connectable: false, \r\n            }\r\n\r\n            if(busqueda == x){\r\n                nodoArreglo = {\r\n                    id: x.toString(),\r\n                    type: 'special',\r\n                    targetPosition: 'top',\r\n                    sourcePosition: 'bottom',\r\n                    data: {text: \"----------\"+this.vector[x]+ \"--------\" \r\n                      },\r\n                    position: {  x: 100 + (x)*150, y:150 },\r\n                    connectable: false, \r\n                }\r\n            }\r\n\r\n            arreglo.push(nodoArreglo)\r\n        }\r\n        return arreglo\r\n    }\r\n\r\n    cargar(arr,nombre){\r\n        arr.map(e => {\r\n            this.agregar(e)\r\n        })\r\n\r\n        /* if(nombre === \"Row Major\"){\r\n            this.rowMajor();\r\n        }else if(nombre === \"Col Major\"){\r\n            this.colMajor();\r\n        } */\r\n    }\r\n\r\n    guardar(){\r\n        let arregloguardar = []\r\n\r\n        for (let i = 0; i < this.vector.length; i++) {\r\n            if(this.vector[i] != 0){\r\n                arregloguardar.push(this.vector[i])\r\n            }\r\n        }\r\n\r\n        return arregloguardar\r\n    }\r\n\r\n    agregar(datos){\r\n     this.arreglo[datos.indices[0]][datos.indices[1]] = datos.valor\r\n    }\r\n\r\n    rowMajor(){\r\n        let vectorlinealizado = []\r\n        for (let i = 0; i < this.tamaño[0]; i++) {\r\n            for (let j = 0; j < this.tamaño[1]; j++) {\r\n                vectorlinealizado.push(this.arreglo[i][j])\r\n            }\r\n            \r\n        }\r\n        this.vector = vectorlinealizado\r\n        return vectorlinealizado\r\n    }\r\n\r\n    colMajor(){\r\n        let vectorlinealizado = []\r\n        for (let i = 0; i < this.tamaño[1]; i++) {\r\n            for (let j = 0; j < this.tamaño[0]; j++) {\r\n                vectorlinealizado.push(this.arreglo[j][i])\r\n            }\r\n            \r\n        }\r\n        this.vector = vectorlinealizado\r\n        return vectorlinealizado\r\n    }\r\n\r\n    busquedaRowMajor(i,j){\r\n        let posLinealizado = (i*this.tamaño[1])+j\r\n\r\n        return posLinealizado\r\n\r\n    }\r\n\r\n    busquedaColMajor(i,j){\r\n        let posLinealizado = (j*this.tamaño[0])+i\r\n        return posLinealizado\r\n    }\r\n}\r\n\r\nlet mat = new matriz([4,5])\r\nlet vector = [\r\n    {\r\n      \"indices\": [\r\n        2,\r\n        3\r\n      ],\r\n      \"valor\": \"Martin\"\r\n    },\r\n    {\r\n      \"indices\": [\r\n        2,\r\n        0\r\n      ],\r\n      \"valor\": \"Dawn\"\r\n    },\r\n    {\r\n      \"indices\": [\r\n        1,\r\n        0\r\n      ],\r\n      \"valor\": \"David\"\r\n    },\r\n    {\r\n      \"indices\": [\r\n        2,\r\n        0\r\n      ],\r\n      \"valor\": \"Michael\"\r\n    },\r\n    {\r\n      \"indices\": [\r\n        1,\r\n        4\r\n      ],\r\n      \"valor\": \"Calvin\"\r\n    },\r\n    {\r\n      \"indices\": [\r\n        2,\r\n        4\r\n      ],\r\n      \"valor\": \"Norma\"\r\n    },\r\n    {\r\n      \"indices\": [\r\n        0,\r\n        0\r\n      ],\r\n      \"valor\": \"George\"\r\n    },\r\n    {\r\n      \"indices\": [\r\n        2,\r\n        2\r\n      ],\r\n      \"valor\": \"Diane\"\r\n    },\r\n    {\r\n      \"indices\": [\r\n        3,\r\n        2\r\n      ],\r\n      \"valor\": \"Francisco\"\r\n    }\r\n  ]\r\n/* mat.cargar(vector)\r\nmat.imprimirMatriz()\r\nconsole.log(\"linealizado col\", mat.colMajor())\r\nconsole.log(\"col\", mat.busquedaColMajor(1,4)) */\r\n\r\n\r\nexport default matriz","import { v4 as uuidv4 } from 'uuid';\r\n//Clase Nodo Matriz\r\nclass NodoMatriz{\r\n    //Constructor\r\n    constructor(dato, i, j){\r\n        this.dato = dato\r\n        this.id = uuidv4()\r\n        this.este = null\r\n        this.sur = null\r\n        this.norte = null\r\n        this.oeste = null\r\n        this.siguiente = null\r\n        this.anterior = null\r\n        this.i = i\r\n        this.j = j\r\n        this.identificador = 0\r\n    }\r\n}\r\n\r\n//Contador cabeceras\r\nvar cabnodo = 0\r\n\r\n//Lista Doble para Cabeceras\r\nclass ListaDoble{\r\n    //Constructor\r\n    constructor(){\r\n        this.cabeza = null\r\n        this.cola = null\r\n    }\r\n\r\n    //Ordenamiento de Cabeceras\r\n    ordenar(nodo){\r\n        let aux = this.cabeza\r\n        while(aux != null){\r\n\r\n            if(aux.dato.charCodeAt){\r\n                if(this.obtenerASCCI(aux.dato) < this.obtenerASCCI(nodo.dato)){\r\n                    aux = aux.siguiente\r\n                } else{\r\n                    if(aux == this.cabeza){\r\n                        nodo.siguiente = aux\r\n                        aux.anterior = nodo\r\n                        this.cabeza = nodo\r\n                        return\r\n                    } else{\r\n                        nodo.anterior = aux.anterior\r\n                        aux.anterior.siguiente = nodo\r\n                        nodo.siguiente = aux\r\n                        aux.anterior = nodo\r\n                        return\r\n                    }\r\n                }\r\n            }else{\r\n                if(aux.dato < nodo.dato){\r\n                    aux = aux.siguiente\r\n                } else{\r\n                    if(aux == this.cabeza){\r\n                        nodo.siguiente = aux\r\n                        aux.anterior = nodo\r\n                        this.cabeza = nodo\r\n                        return\r\n                    } else{\r\n                        nodo.anterior = aux.anterior\r\n                        aux.anterior.siguiente = nodo\r\n                        nodo.siguiente = aux\r\n                        aux.anterior = nodo\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.cola.siguiente = nodo\r\n        nodo.anterior = this.cola\r\n        this.cola = nodo\r\n    }\r\n\r\n    obtenerASCCI(s){\r\n        let charCodeArr = 0;\r\n        \r\n        for(let i = 0; i < s.length; i++){\r\n            let code = s.charCodeAt(i);\r\n            charCodeArr += code\r\n        }\r\n        \r\n        return charCodeArr;\r\n      }\r\n\r\n    //Insercion en cabeceras\r\n    insertar(dato){\r\n        cabnodo = 0\r\n        let nodo = new NodoMatriz(dato, null, null)\r\n        if(this.cabeza == null){\r\n            this.cabeza = this.cola = nodo\r\n            return\r\n        }\r\n        this.ordenar(nodo)\r\n        if(this.cabeza !=null){\r\n            let aux = this.cabeza\r\n            while(aux!=null){\r\n                aux.identificador = cabnodo\r\n                cabnodo++\r\n                aux = aux.siguiente\r\n            }\r\n        }\r\n    }\r\n\r\n    //Eliminacion para la lista doble\r\n    eliminar(dato){\r\n        let aux = this.cabeza\r\n        while(aux != null){\r\n            if(dato == aux.dato && aux == this.cabeza){\r\n                let tmp = this.cabeza.siguiente\r\n                tmp.anterior = null\r\n                this.cabeza.siguiente = null\r\n                this.cabeza = tmp          \r\n                return\r\n            }else if(dato == aux.dato && aux.anterior != null && aux.siguiente != null){\r\n                let tmp = aux.siguiente\r\n                tmp.anterior = aux.anterior\r\n                aux.anterior.siguiente = tmp\r\n                aux.siguiente = null\r\n                aux.anterior = null\r\n                return\r\n            }else if(dato == aux.dato && aux == this.cola){\r\n                let tmp = this.cola.anterior\r\n                tmp.siguiente = null\r\n                this.cola.anterior = null\r\n                this.cola = tmp\r\n                return\r\n            }else if(dato == aux.dato && this.cola == this.cabeza){\r\n                this.cola = null\r\n                this.cabeza = null\r\n                return\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n    }\r\n\r\n    //Busqueda en cabeceras\r\n    busqueda(dato){\r\n        let tmp = this.cabeza\r\n        while(tmp != null){\r\n            if(tmp.dato == dato){\r\n                return tmp\r\n            }\r\n            tmp = tmp.siguiente\r\n        }\r\n        return null\r\n    }\r\n\r\n}\r\n\r\n//Clase Matriz Dispersa\r\nclass Matriz{\r\n    //Constructor\r\n    constructor(){\r\n        this.CHorizontal = new ListaDoble()\r\n        this.CVertical = new ListaDoble()\r\n    }\r\n\r\n    //Insercion en matriz\r\n    insertar(dato, i, j){\r\n        let Ni = this.CHorizontal.busqueda(i)\r\n        let Nj = this.CVertical.busqueda(j)\r\n        if(Ni == null && Nj == null){\r\n            this.C1(dato, i, j)\r\n        } else if(Ni == null && Nj != null){\r\n            this.C2(dato, i, j)\r\n        } else if(Ni != null && Nj == null){\r\n            this.C3(dato, i, j)\r\n        }else{\r\n            this.C4(dato, i, j)\r\n        }\r\n    }\r\n\r\n    //Primer Caso posible de insercion\r\n    C1(dato,i,j){\r\n        this.CHorizontal.insertar(i)\r\n        this.CVertical.insertar(j)\r\n        let Ni = this.CHorizontal.busqueda(i)\r\n        let Nj = this.CVertical.busqueda(j)\r\n        let n = new NodoMatriz(dato, i, j)\r\n        Ni.sur = n\r\n        n.norte = Ni\r\n        Nj.este = n\r\n        n.oeste = Nj\r\n    }\r\n\r\n    //Segundo caso de insercion posible\r\n    C2(dato, i, j){\r\n        this.CHorizontal.insertar(i)\r\n        let Ni = this.CHorizontal.busqueda(i)\r\n        let Nj = this.CVertical.busqueda(j)\r\n        let cAgrego = false\r\n        let n = new NodoMatriz(dato, i, j)\r\n        let aux = Nj.este\r\n        let contadorC = 0\r\n        while(aux != null){\r\n            contadorC = aux.i\r\n            if(contadorC<i){\r\n                aux = aux.este\r\n            } else {\r\n                n.este = aux\r\n                n.oeste = aux.oeste\r\n                n.oeste.este = n\r\n                aux.oeste = n\r\n                cAgrego = true\r\n                break\r\n            }\r\n        }\r\n        if(cAgrego == false){\r\n            aux = Nj.este\r\n            while(aux.este!=null){\r\n                aux = aux.este\r\n            }\r\n            n.oeste = aux\r\n            aux.este = n\r\n        }\r\n        Ni.sur = n\r\n        n.norte = Ni\r\n    }\r\n\r\n    //Tercer caso de insercion posible\r\n    C3(dato, i, j){\r\n        this.CVertical.insertar(j)\r\n        let Ni = this.CHorizontal.busqueda(i)\r\n        let Nj = this.CVertical.busqueda(j)\r\n        let cAgrego = false\r\n        let n = new NodoMatriz(dato, i, j)\r\n        let aux = Ni.sur\r\n        let contadorC = 0\r\n        while(aux!=null && !cAgrego){\r\n            contadorC = aux.j\r\n            if(contadorC<j){\r\n                aux = aux.sur\r\n            } else{\r\n                n.sur = aux\r\n                n.norte = aux.norte\r\n                aux.norte.sur = n\r\n                aux.norte = n\r\n                cAgrego = true\r\n            }\r\n        }\r\n        if(!cAgrego){\r\n            aux = Ni.sur\r\n            while(aux.sur!=null){\r\n                aux = aux.sur\r\n            }\r\n            aux.sur = n\r\n            n.norte = aux\r\n        }\r\n        Nj.este = n\r\n        n.oeste = Nj\r\n    }\r\n\r\n    //Cuarto caso de insercion posible\r\n    C4(dato, i, j){\r\n        let Ni = this.CHorizontal.busqueda(i)\r\n        let Nj = this.CVertical.busqueda(j)\r\n        let cAgrego = false\r\n        let n = new NodoMatriz(dato,i,j)\r\n        let aux = Nj.este\r\n        let contadorC = 0\r\n        while(aux!=null){\r\n            contadorC = aux.i\r\n            if(contadorC < i){\r\n                aux = aux.este\r\n            }else if(contadorC == i){\r\n                let contadorC2 = aux.j\r\n                if(contadorC2 == j){\r\n                    alert(\"Ya existe valor en el Nodo\"+\"(\"+ aux.i+\",\"+aux.j+\")\")\r\n                    return\r\n                }\r\n            }else{\r\n                n.este = aux\r\n                n.oeste = aux.oeste\r\n                aux.oeste.este = n\r\n                aux.oeste = n\r\n                cAgrego = true\r\n                break\r\n            }\r\n        }\r\n        if(cAgrego == false){\r\n            aux = Nj.este\r\n            while(aux.este != null){\r\n                aux = aux.este\r\n            }\r\n            n.oeste = aux\r\n            aux.este = n\r\n        }\r\n        cAgrego = false\r\n        aux = Ni.sur\r\n        contadorC = 0\r\n        while(aux!=null && !cAgrego){\r\n            contadorC = aux.j\r\n            if(contadorC<j){\r\n                aux = aux.sur\r\n            } else{\r\n                n.sur = aux\r\n                n.norte = aux.norte\r\n                aux.norte.sur = n\r\n                aux.norte = n\r\n                cAgrego = true\r\n            }\r\n        }\r\n        if(!cAgrego){\r\n            aux = Ni.sur\r\n            while(aux.sur != null){\r\n                aux = aux.sur\r\n            }\r\n            aux.sur = n\r\n            n.norte = aux\r\n        }\r\n    }\r\n\r\n    //Impresion por cabeza Vertical\r\n    imprimirCVertical(){\r\n        let cab = this.CVertical.cabeza\r\n        let aux\r\n        while(cab != null){\r\n            aux = cab.este\r\n            while(aux!=null){\r\n                console.log(\"Dato: \"+ aux.dato + \" I: \"+aux.i + \" J: \" + aux.j)\r\n                aux = aux.este\r\n            }\r\n            cab = cab.siguiente\r\n        }\r\n    }\r\n\r\n\r\n    cargar(arreglo){\r\n        arreglo.map(e => {\r\n            this.insertar(e.valor,e.indices[0],e.indices[1])\r\n        })\r\n    }\r\n    //Metodo busqueda\r\n    buscar(dato){\r\n        let cab = this.CVertical.cabeza\r\n        let aux\r\n        while(cab != null){\r\n            aux = cab.este\r\n            while(aux!=null){\r\n                if(aux.dato == dato){\r\n                    console.log(\"El dato es: \"+aux.dato+\" en \"+aux.i + \" , \"+aux.j)\r\n                    return\r\n                }\r\n                aux = aux.este\r\n            }\r\n            cab = cab.siguiente\r\n        }\r\n    }\r\n\r\n    //Metodo modificar\r\n    modificar(datobus, datomod){\r\n        let cab = this.CVertical.cabeza\r\n        let aux\r\n        while(cab != null){\r\n            aux = cab.este\r\n            while(aux!=null){\r\n                if(aux.dato == datobus){\r\n                    aux.dato = datomod\r\n                    console.log(\"El dato\"+datobus+\" cambio a: \"+aux.dato+\" en \"+aux.i + \" , \"+aux.j)\r\n                    return\r\n                }\r\n                aux = aux.este\r\n            }\r\n            cab = cab.siguiente\r\n        }\r\n    }\r\n\r\n    //Metodo Eliminar\r\n    eliminar(datoel){\r\n        let cab = this.CVertical.cabeza\r\n        let aux\r\n        while(cab != null){\r\n            aux = cab.este\r\n            while(aux!=null){\r\n                if(aux.dato == datoel){\r\n                    let arr = aux.norte\r\n                    let ab = aux.sur\r\n                    let iz = aux.oeste\r\n                    let der = aux.este\r\n                    let Ni = this.CHorizontal.busqueda(aux.i)\r\n                    let Nj = this.CVertical.busqueda(aux.j)\r\n                    if(der == null && ab == null){\r\n                        if(iz.i == null && arr.i == null){\r\n                            this.CHorizontal.eliminar(Ni.dato)\r\n                            this.CVertical.eliminar(Nj.dato)\r\n                            return\r\n                        }else if(iz.i == null && arr.i != null){\r\n                            aux.norte.sur=null\r\n                            aux.norte = null\r\n                            aux.oeste = null\r\n                            this.CVertical.eliminar(Nj.dato)\r\n                            return\r\n                        }else if(iz.i != null && arr.i == null){\r\n                            aux.oeste.este = null\r\n                            aux.oeste = null\r\n                            aux.norte = null\r\n                            this.CHorizontal.eliminar(Ni.dato)\r\n                            return\r\n                        }else if(iz.i != null && arr.i != null){\r\n                            aux.oeste.este = null\r\n                            aux.oeste = null\r\n                            aux.norte.sur = null\r\n                            aux.norte = null\r\n                            return\r\n                        }\r\n                    }else if(der != null && ab == null ){\r\n                        if(iz.i == null && arr.i == null){\r\n                            der.oeste = aux.oeste\r\n                            aux.oeste.este = der\r\n                            aux.oeste = null\r\n                            aux.este = null\r\n                            this.CHorizontal.eliminar(Ni.dato)\r\n                            return\r\n                        }else if(iz.i == null && arr.i != null){\r\n                            der.oeste = aux.oeste\r\n                            aux.oeste.este = der\r\n                            aux.oeste = null\r\n                            aux.este = null\r\n                            aux.norte.sur=null\r\n                            aux.norte = null\r\n                            return\r\n                        }else if(iz.i != null && arr.i == null){\r\n                            der.oeste = aux.oeste\r\n                            aux.oeste.este = der\r\n                            aux.oeste = null\r\n                            aux.este = null\r\n                            aux.norte = null\r\n                            this.CHorizontal.eliminar(Ni.dato)\r\n                            return\r\n                        }else if(iz.i != null && arr.i != null){\r\n                            aux.oeste.este = der\r\n                            der.oeste = aux.oeste\r\n                            aux.oeste = null\r\n                            aux.este = null\r\n                            aux.norte.sur = null\r\n                            aux.norte = null\r\n                            return\r\n                        }\r\n                    }else if(der == null && ab != null ){\r\n                        if(iz.i == null && arr.i == null){\r\n                            ab.norte = aux.norte\r\n                            aux.norte.sur = ab\r\n                            aux.norte = null\r\n                            aux.sur =  null\r\n                            aux. oeste = null\r\n                            this.CVertical.eliminar(Nj.dato)\r\n                            return\r\n                        }else if(iz.i == null && arr.i != null){\r\n                            ab.norte = aux.norte\r\n                            arr.sur = ab\r\n                            aux.norte = null\r\n                            aux.sur = null\r\n                            aux.oeste = null\r\n                            this.CVertical.eliminar(Nj.dato)\r\n                            return\r\n                        }else if(iz.i != null && arr.i == null){\r\n                            aux.oeste.este = null\r\n                            aux.oeste = null\r\n                            ab.norte = aux.norte\r\n                            arr.sur = aux.sur\r\n                            aux.norte = null\r\n                            aux.sur = null\r\n                            return\r\n                        }else if(iz.i != null && arr.i != null){\r\n                            aux.oeste.este = null\r\n                            aux.oeste = null\r\n                            ab.norte = aux.norte\r\n                            arr.sur = aux.sur\r\n                            aux.norte = null\r\n                            aux.sur = null\r\n                            return\r\n                        }\r\n                    }else if(der != null && ab != null ){\r\n                        der.oeste = aux.oeste\r\n                        iz.este = aux.este\r\n                        arr.sur = aux.sur\r\n                        ab.norte = aux.norte\r\n                        aux.oeste = null\r\n                        aux.este = null\r\n                        aux.sur = null\r\n                        aux.norte = null\r\n                        return\r\n                    }                                       \r\n                }\r\n                aux = aux.este\r\n            }\r\n            cab = cab.siguiente\r\n        }\r\n        console.log(\"Al parecer no encontro un dato\")\r\n    }\r\n\r\n    graficar(valorBusqueda){\r\n        let arreglo = []\r\n\r\n        arreglo = arreglo.concat(this.graficarCabeceraHorizontal())\r\n        arreglo = arreglo.concat(this.graficarCabeceraVertical(valorBusqueda))\r\n\r\n        return arreglo\r\n    }\r\n\r\n    graficarCabeceraHorizontal(){\r\n        let arreglo = []\r\n        let aux;\r\n        let tmp = this.CHorizontal.cabeza\r\n        let x = 1;\r\n        while(tmp != null){\r\n            let nodoArreglo = {\r\n                id: tmp.id,\r\n                type: 'default',\r\n                targetPosition: 'left',\r\n                sourcePosition: 'right',\r\n                data: { label: (\r\n                    <> <strong>{tmp.dato}</strong>\r\n                    </>\r\n                 ) },\r\n                position: {  x: 100 + (x)*200, y:25 },\r\n                connectable: false, \r\n            }\r\n\r\n            aux = tmp.sur\r\n            let y = 1;\r\n            while(aux!=null){\r\n                  /* \r\n                if(aux.dato){\r\n                    let nodoInterior = {\r\n                        id: aux.id,\r\n                        type: 'default',\r\n                        targetPosition: 'left',\r\n                        sourcePosition: 'right',\r\n                        data: { label: aux.dato },\r\n                        position: {  x: 100+ (x)*200, y:25+ (aux.j+1)*75 },\r\n                        connectable: false, \r\n                    }\r\n                    \r\n                    arreglo.push(nodoInterior)\r\n                } */\r\n                y++;\r\n                if(aux.sur != null){\r\n                    let nodoedge = {id: aux.id+'-'+aux.sur.id, source: aux.id, target: aux.sur.id, style: { stroke: 'red' },\r\n                    type: 'step'  }\r\n                    arreglo.push(nodoedge)\r\n                }\r\n                aux = aux.sur\r\n            }\r\n            let nodoedgePI = {id: tmp.id+'-'+tmp.sur.id, source: tmp.id, target: tmp.sur.id ,style: { stroke: 'red' },\r\n            type: 'step' }\r\n            arreglo.push(nodoedgePI)\r\n\r\n            x++;\r\n            arreglo.push(nodoArreglo)\r\n\r\n            if(tmp.siguiente != null){\r\n                let nodoedge = {id: tmp.id+'-'+tmp.siguiente.id, source: tmp.id, target: tmp.siguiente.id  }\r\n                arreglo.push(nodoedge)\r\n            }\r\n            tmp = tmp.siguiente\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n\r\n    graficarCabeceraVertical(valorBusqueda){\r\n        let arreglo = []\r\n\r\n        let tmp = this.CVertical.cabeza\r\n        let aux ;\r\n        let x = 1;\r\n        while(tmp != null){\r\n            let nodoArreglo = {\r\n                id: tmp.id,\r\n                type: 'default',\r\n                targetPosition: 'top',\r\n                sourcePosition: 'bottom',\r\n                data: { label: (\r\n                    <> <strong>{tmp.dato}</strong>\r\n                    </>\r\n                 ) },\r\n                position: {  x: 100, y:25+ x*75 },\r\n                connectable: false, \r\n            }\r\n\r\n            aux = tmp.este\r\n            let y = 1;\r\n            while(aux!=null){\r\n                  \r\n                    let nodoInterior = {\r\n                        id: aux.id,\r\n                        type: 'default',\r\n                        targetPosition: 'left',\r\n                        sourcePosition: 'right',\r\n                        data: { label: aux.dato },\r\n                        position: {  x: 100+ (this.CHorizontal.busqueda(aux.i).identificador+1)*200, y:25+ x*75 },\r\n                        connectable: false, \r\n                    }\r\n\r\n                    if(valorBusqueda == aux.dato){\r\n                        nodoInterior = {\r\n                            id: aux.id,\r\n                            type: 'special',\r\n                            targetPosition: 'left',\r\n                            sourcePosition: 'right',\r\n                            data: { text: \"----------\"+aux.dato+ \"--------\" },\r\n                            position: {  x: 100+ (this.CHorizontal.busqueda(aux.i).identificador+1)*200, y:25+ x*75 },\r\n                            connectable: false, \r\n                        }\r\n                    }\r\n                    \r\n                    arreglo.push(nodoInterior)\r\n                \r\n                y++;\r\n                if(aux.este != null){\r\n                    let nodoedge = {id: aux.id+'-'+aux.este.id, source: aux.id, target: aux.este.id ,style: { stroke: 'red' } }\r\n                    arreglo.push(nodoedge)\r\n                }\r\n                aux = aux.este\r\n            }\r\n            let nodoedgePI = {id: tmp.id+'-'+tmp.este.id, source: tmp.id, target: tmp.este.id  ,style: { stroke: 'red' }}\r\n            arreglo.push(nodoedgePI)\r\n            x++;\r\n            arreglo.push(nodoArreglo)\r\n            if(tmp.siguiente != null){\r\n                let nodoedge = {id: tmp.id+'-'+tmp.siguiente.id, source: tmp.id, target: tmp.siguiente.id  }\r\n                arreglo.push(nodoedge)\r\n            }\r\n            tmp = tmp.siguiente\r\n        }\r\n\r\n\r\n        return arreglo\r\n    }\r\n\r\n    guardar(){\r\n        let arregloGuardar = []\r\n\r\n        let tempo = this.CVertical.cabeza\r\n        let aux ;\r\n\r\n        while(tempo != null){\r\n            aux = tempo.este\r\n            while(aux!=null){\r\n                    let indices = []\r\n                    indices.push(aux.i)\r\n                    indices.push(aux.j)\r\n\r\n                    let valorGuardar = {indices: indices, valor: aux.dato}\r\n                    \r\n                    arregloGuardar.push(valorGuardar)\r\n                    aux = aux.este\r\n            }\r\n            tempo = tempo.siguiente\r\n        }\r\n\r\n\r\n        return arregloGuardar\r\n\r\n    }\r\n}\r\n\r\nexport default Matriz;","import { LocalConvenienceStoreOutlined } from \"@material-ui/icons\"\r\nimport { v4 as uuidv4 } from 'uuid';\r\n//Contador para identificadores unicos de los nodos\r\nvar idNodos = 0\r\nvar contadorGrap = 0;\r\n//Clase Lista Doble\r\nclass ListaDoble{\r\n    //Constructor\r\n    constructor(){\r\n        this.cabeza = null\r\n        this.cola = null\r\n        this.size = 0\r\n    }\r\n\r\n    //Insercion de lista\r\n    insertar(dato){\r\n        if(this.cabeza == null){\r\n            let nodo = new NodoListaDoble(dato)\r\n            this.cabeza = nodo\r\n            this.cola = nodo\r\n            this.size++\r\n        }else{\r\n            let nodo = new NodoListaDoble(dato)\r\n            let aux = this.cabeza\r\n            while(aux.siguiente != null){\r\n                aux = aux.siguiente\r\n            }\r\n            aux.siguiente = nodo\r\n            nodo.anterior = aux\r\n            this.cola = nodo\r\n            this.size++\r\n        }\r\n    }\r\n\r\n    //Eliminacion de lista\r\n    eliminar(dato){\r\n        let aux = this.cabeza\r\n        while(aux != null){\r\n            if(dato == aux.dato && aux == this.cabeza && this.cabeza.siguiente!=null){\r\n                let tmp = this.cabeza.siguiente\r\n                tmp.anterior = null\r\n                this.cabeza.siguiente = null\r\n                this.cabeza = tmp          \r\n                this.size--      \r\n                return\r\n            }else if(dato == aux.dato && aux.anterior != null && aux.siguiente != null){\r\n                let tmp = aux.siguiente\r\n                tmp.anterior = aux.anterior\r\n                aux.anterior.siguiente = tmp\r\n                aux.siguiente = null\r\n                aux.anterior = null\r\n                this.size--\r\n                return\r\n            }else if(dato == aux.dato && aux == this.cola && this.cola.anterior != null){\r\n                let tmp = this.cola.anterior\r\n                tmp.siguiente = null\r\n                this.cola.anterior = null\r\n                this.cola = tmp\r\n                this.size--\r\n                return\r\n            }else if(dato == aux.dato && this.cola == this.cabeza){\r\n                this.cola = null\r\n                this.cabeza = null\r\n                this.size--\r\n                return\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n    }\r\n\r\n    contiente(buscando, elemento){\r\n        let buscar = buscando.cabeza\r\n        while(buscar!=null){\r\n            if(buscar.dato.dato == elemento.dato){\r\n                return true\r\n            }\r\n            buscar = buscar.siguiente\r\n        }\r\n        return false\r\n    }\r\n\r\n    //Regresar Minimo\r\n    regresarMinimo(){\r\n        let aux = this.cabeza\r\n        let regresar = null\r\n        while(aux!=null){\r\n            if(regresar == null){\r\n                regresar = aux.dato\r\n            }else if(aux.dato<regresar){\r\n                regresar = aux.dato\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n        return regresar\r\n    }\r\n}\r\n\r\n//Lista de nodos para recorridos\r\nvar n = null\r\n//Clase Nodo para Lista Doble\r\nclass NodoListaDoble{\r\n    //Constructor\r\n    constructor(dato){\r\n        this.siguiente = null\r\n        this.anterior = null\r\n        this.dato = dato\r\n        this.id = 0\r\n    }\r\n}\r\n\r\n//Clase Nodo Grafo\r\nclass Nodo{\r\n    //Constructor\r\n    constructor(dato){\r\n        this.dato = dato\r\n        this.id = 0\r\n        this.ident = uuidv4()\r\n        this.distTotal = 0\r\n        this.camino = new ListaDoble()\r\n        this.enlaces = new ListaDoble()\r\n        this.adyacentes = new ListaDoble()\r\n    }\r\n}\r\n\r\n//Clase enlaces\r\nclass Enlaces{\r\n    //Constructor\r\n    constructor(inicio, distancia, destino){\r\n        this.inicio = inicio\r\n        this.destino = destino\r\n        this.distancia = distancia\r\n    }\r\n}\r\n\r\n//Clase Lista de Adyacencia Principal\r\nclass ListaAdyacencia{\r\n    constructor(almacenamiento){\r\n        this.ListaAdyacencia = new ListaDoble()\r\n        this.caminoFinal = []\r\n        this.distanciaFinal = 0\r\n        this.inicio = null\r\n        this.final = null\r\n        this.profundidad = null\r\n        this.busquedaRecorrido = null\r\n        this.anchura = null\r\n        this.costoUnfi = null\r\n        this.recminimo = null\r\n        this.almacenamiento = almacenamiento\r\n    }\r\n\r\n    //Metodo de obtencion de vertices no dirigos\r\n    getVerticeNoDirigido(dato){\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while(aux!= null){\r\n            if (aux.dato.dato == dato){\r\n                return aux.dato\r\n            }\r\n            aux= aux.siguiente\r\n        }\r\n        if(this.ListaAdyacencia.size == 0){\r\n            return dato\r\n        }\r\n        return null\r\n    }\r\n\r\n    //Metodo de insercion para Grafo no dirigido\r\n    insertarNoDirigido(dato, inicio, final, distancia){\r\n        if (this.getVerticeNoDirigido(dato)==null){\r\n            let n = new Nodo(dato)\r\n            n.id = idNodos\r\n            this.ListaAdyacencia.insertar(n)\r\n            idNodos++\r\n            this.EnlazarNoDirigido(inicio, final, distancia)\r\n        }else if(this.getVerticeNoDirigido(dato) == dato){\r\n            let n = new Nodo(dato)\r\n            n.id = idNodos\r\n            this.ListaAdyacencia.insertar(n)\r\n            idNodos++\r\n            this.enlazarprimeroNoDirigido(inicio, final, distancia,final)\r\n        }else{\r\n            this.EnlazarNoDirigido(inicio, final, distancia)\r\n            console.log(\"Al parecer ya lo creo o es el primero\")\r\n        }\r\n    }    \r\n\r\n    //Metodo de primer enlace para Grafo no Dirigido\r\n    enlazarprimeroNoDirigido(n1, n2, distancia, dato){\r\n        let nodo2 = new Nodo(dato)\r\n        nodo2.id = idNodos\r\n        idNodos++\r\n        this.ListaAdyacencia.insertar(nodo2)\r\n        let origen = null\r\n        let destino = null\r\n        origen = this.getVerticeNoDirigido(n1)\r\n        destino = this.getVerticeNoDirigido(n2)    \r\n        if(origen == null || destino == null){\r\n            console.log(\"No se encontro un nodo para el enlace we en primero\")\r\n            return\r\n        }\r\n        origen.adyacentes.insertar(destino)\r\n        destino.adyacentes.insertar(origen)\r\n        let c = new Enlaces(origen, distancia, destino)\r\n        origen.enlaces.insertar(c)\r\n        let d = new Enlaces(destino, distancia, origen)\r\n        destino.enlaces.insertar(d)\r\n    }\r\n\r\n    //Enlaces para grafos no dirigidos\r\n    EnlazarNoDirigido(n1, n2, distancia){\r\n        let origen = null\r\n        let destino = null\r\n        let dat1 = null\r\n        let dat2 = null\r\n        origen = this.getVerticeNoDirigido(n1)\r\n        destino = this.getVerticeNoDirigido(n2)\r\n        if(origen==null){\r\n            let nodo2 = new Nodo(n1)\r\n            nodo2.id = idNodos\r\n            idNodos++\r\n            this.ListaAdyacencia.insertar(nodo2)\r\n            origen = this.getVerticeNoDirigido(n1)\r\n        }\r\n        if(destino == null){\r\n            let nodo2 = new Nodo(n2)\r\n            nodo2.id = idNodos\r\n            idNodos++\r\n            this.ListaAdyacencia.insertar(nodo2)\r\n            destino = this.getVerticeNoDirigido(n2)\r\n        }\r\n        let aux = origen.adyacentes.cabeza\r\n        while(aux!= null){\r\n            if (aux.dato.dato ==  destino.dato){\r\n                dat1 = destino.dato\r\n                break\r\n            }\r\n            aux= aux.siguiente\r\n        }\r\n        if(dat1 == null){\r\n            origen.adyacentes.insertar(destino)\r\n        }\r\n        if(origen.adyacentes.size == 0){\r\n            origen.adyacentes.insertar(destino)\r\n        }\r\n        let aux2 = destino.adyacentes.cabeza\r\n        while(aux2!= null){\r\n            if (aux2.dato.dato ==  origen.dato){\r\n                dat2 = origen.dato\r\n                break\r\n            }\r\n            aux2 = aux2.siguiente\r\n        }\r\n        if(dat2 == null){\r\n            destino.adyacentes.insertar(origen)\r\n        }\r\n        if(destino.adyacentes.size == 0){\r\n            destino.adyacentes.insertar(origen)\r\n        }\r\n        let c = new Enlaces(origen, distancia, destino)\r\n        origen.enlaces.insertar(c)\r\n        let d = new Enlaces(destino, distancia, origen)\r\n        destino.enlaces.insertar(d)\r\n    }\r\n\r\n    //Metodo de obtencion de vertices para grafos dirigidos\r\n    getVertice(dato){\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while(aux!= null){\r\n            if (aux.dato.dato == dato){\r\n                return aux.dato\r\n            }\r\n            aux= aux.siguiente\r\n        }\r\n        if(this.ListaAdyacencia.size == 0){\r\n            return dato\r\n        }\r\n        return null\r\n    }\r\n\r\n    //Insercion de Grafos Dirigidos\r\n    insertar(dato, inicio, final, distancia){\r\n        if (this.getVertice(dato)==null){\r\n            let n = new Nodo(dato)\r\n            n.id = idNodos\r\n            this.ListaAdyacencia.insertar(n)\r\n            idNodos++\r\n            this.Enlazar(inicio, final, distancia)\r\n        }else if(this.getVertice(dato) == dato){\r\n            let n = new Nodo(dato)\r\n            n.id = idNodos\r\n            this.ListaAdyacencia.insertar(n)\r\n            idNodos++\r\n            this.enlazarprimero(inicio, final, distancia,final)\r\n        }else{\r\n            this.Enlazar(inicio, final, distancia)\r\n            console.log(\"Al parecer ya lo creo o es el primero\")\r\n        }\r\n    }    \r\n\r\n    //Primer enlaces para Grafo Dirigido\r\n    enlazarprimero(n1, n2, distancia, dato){\r\n        let nodo2 = new Nodo(dato)\r\n        nodo2.id = idNodos\r\n        idNodos++\r\n        this.ListaAdyacencia.insertar(nodo2)\r\n        let origen = null\r\n        let destino = null\r\n        origen = this.getVertice(n1)\r\n        destino = this.getVertice(n2)\r\n        if(origen == null || destino == null){\r\n            console.log(\"No se encontro un nodo para el enlace we en primero\")\r\n            return\r\n        }\r\n        origen.adyacentes.insertar(destino)\r\n        destino.adyacentes.insertar(origen)\r\n        let c = new Enlaces(origen, distancia, destino)\r\n        origen.enlaces.insertar(c)\r\n    }\r\n\r\n    //Enlaces para grafos dirigidos\r\n    Enlazar(n1, n2, distancia){\r\n        let origen = null\r\n        let destino = null\r\n        let dat1 = null\r\n        let dat2 = null\r\n        origen = this.getVertice(n1)\r\n        destino = this.getVertice(n2)\r\n        if(origen==null){\r\n            let nodo2 = new Nodo(n1)\r\n            nodo2.id = idNodos\r\n            idNodos++\r\n            this.ListaAdyacencia.insertar(nodo2)\r\n            origen = this.getVerticeNoDirigido(n1)\r\n        }\r\n        if(destino == null){\r\n            let nodo2 = new Nodo(n2)\r\n            nodo2.id = idNodos\r\n            idNodos++\r\n            this.ListaAdyacencia.insertar(nodo2)\r\n            destino = this.getVerticeNoDirigido(n2)\r\n        }\r\n        let aux = origen.adyacentes.cabeza\r\n        while(aux!= null){\r\n            if (aux.dato.dato ==  destino.dato){\r\n                dat1 = destino.dato\r\n                break\r\n            }\r\n            aux= aux.siguiente\r\n        }\r\n        if(dat1 == null){\r\n            origen.adyacentes.insertar(destino)\r\n        }\r\n        if(origen.adyacentes.size == 0){\r\n            origen.adyacentes.insertar(destino)\r\n        }\r\n        let aux2 = destino.adyacentes.cabeza\r\n        while(aux2!= null){\r\n            if (aux2.dato.dato ==  origen.dato){\r\n                dat2 = origen.dato\r\n                break\r\n            }\r\n            aux2 = aux2.siguiente\r\n        }\r\n        if(dat2 == null){\r\n            destino.adyacentes.insertar(origen)\r\n        }\r\n        if(destino.adyacentes.size == 0){\r\n            destino.adyacentes.insertar(origen)\r\n        }\r\n        let c = new Enlaces(origen, distancia, destino)\r\n        origen.enlaces.insertar(c)\r\n    }\r\n\r\n    //Metodo para validacion de datos ya existentes en una lista\r\n    contiente(buscando, elemento){\r\n        let buscar = buscando.cabeza\r\n        while(buscar!=null){\r\n            if(buscar.dato.dato == elemento.dato){\r\n                return true\r\n            }\r\n            buscar = buscar.siguiente\r\n        }\r\n        return false\r\n    }\r\n\r\n    //Recorrido por anchura\r\n    BFS(){\r\n        this.profundidad = null\r\n        this.costoUnfi = null\r\n        this.busquedaRecorrido  = null\r\n        this.busquedaRecorrido = null\r\n        this.caminoFinal = null\r\n        n = new ListaDoble()\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while (aux != null){\r\n            if(this.contiente(n, aux.dato) == false){\r\n                n.insertar(aux.dato)\r\n            }\r\n            let tmp = aux.dato.adyacentes.cabeza\r\n            while (tmp != null){\r\n                if(this.contiente(n, tmp.dato) == false){\r\n                    n.insertar(tmp.dato)\r\n                }\r\n                tmp = tmp.siguiente\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n        let imp = n.cabeza\r\n        let egde = null\r\n        let agregado = new ListaDoble()\r\n        let arregloEdge = []\r\n        while (imp.siguiente!=null){\r\n            let ady = imp.dato.adyacentes.cabeza\r\n            while(ady!=null){\r\n                let siguiente = imp.siguiente\r\n                while(siguiente!= null){\r\n                    if(siguiente.dato.dato== ady.dato.dato){\r\n                        if(agregado.contiente(agregado, siguiente.dato) == false){\r\n                            egde = {from: imp.dato.id, to: siguiente.dato.id}\r\n                            arregloEdge.push(egde)\r\n                            agregado.insertar(siguiente.dato)\r\n                        }\r\n                    }\r\n                    siguiente = siguiente.siguiente\r\n                }\r\n                ady = ady.siguiente\r\n            }\r\n            imp = imp.siguiente\r\n        }\r\n        this.anchura = arregloEdge\r\n        console.log(arregloEdge)\r\n        return arregloEdge\r\n    }        \r\n\r\n    //Recorrido por Profundidad\r\n    DFS(){\r\n        \r\n        this.anchura = null\r\n        this.busquedaRecorrido = null\r\n        this.costoUnfi  = null\r\n        this.caminoFinal = null\r\n        n = new ListaDoble()\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        let arregloEdge = []\r\n        arregloEdge = this.subDFS(aux.dato,arregloEdge)\r\n        this.profundidad = arregloEdge\r\n        return arregloEdge\r\n    }\r\n\r\n    //Sub metodo para Recorrido por Produndidad\r\n    subDFS(nodo, arregloEdge){\r\n        let edge = null\r\n        if(this.contiente(n, nodo) == false){\r\n            n.insertar(nodo)\r\n        }\r\n        let aux2 = nodo.enlaces.cabeza\r\n        while(aux2!=null){\r\n            if(aux2.dato.inicio.dato == nodo.dato){\r\n                if(aux2.dato.destino.camino.size==0){\r\n                    edge = {from: aux2.dato.inicio.id, to: aux2.dato.destino.id, label: aux2.dato.distancia}\r\n                    arregloEdge.push(edge)\r\n                    aux2.dato.destino.camino.insertar(aux2.dato.inicio.dato)\r\n                    this.subDFS(aux2.dato.destino, arregloEdge)\r\n                }\r\n                aux2 = aux2.siguiente\r\n            }\r\n        }\r\n        return arregloEdge\r\n    }\r\n\r\n    //Metodo arranque para costo minimo\r\n    busquedaEspecifica(fin){\r\n        this.profundidad = null\r\n        this.anchura = null\r\n        this.costoUnfi = null\r\n        this.caminoFinal = []\r\n        let arregloEdge = []\r\n        this.final = fin\r\n        console.log(\"Queremos terminar en: \" + this.final)\r\n        let iniRec = this.ListaAdyacencia.cabeza\r\n        if(this.final == iniRec.dato.dato && this.caminoFinal.length == 0){\r\n            let egde = {from: \"null\", to: iniRec.dato.id }\r\n            arregloEdge.push(egde)\r\n            iniRec = null\r\n        }\r\n        while(iniRec!=null){\r\n            let enl = iniRec.dato.enlaces.cabeza\r\n                while(enl!= null){\r\n                    let adyman = iniRec.dato.adyacentes.cabeza\r\n                    while(adyman!=null){\r\n                        if(adyman.dato.dato == enl.dato.destino.dato){\r\n                            adyman.dato.distTotal = enl.dato.distancia\r\n                            adyman.dato.camino.insertar(iniRec.dato)\r\n                            this.subbusqueda(adyman.dato)\r\n                            adyman.dato.camino.eliminar(iniRec.dato)                        \r\n                        }\r\n                        adyman = adyman.siguiente\r\n                    }\r\n                    enl = enl.siguiente\r\n                }\r\n                if(this.caminoFinal.length!=0){\r\n                    break\r\n                }\r\n            iniRec = iniRec.siguiente\r\n        }\r\n        let borrar = this.ListaAdyacencia.cabeza\r\n        while(borrar!= null){\r\n            borrar.dato.camino = new ListaDoble()\r\n            borrar = borrar.siguiente\r\n        }\r\n        console.log(\"Al parecer funciono, la distancia final total es: \"+this.distanciaFinal)\r\n        if(this.caminoFinal.length!=0){\r\n            for(let i = 0;i<this.caminoFinal.length-1;i++){\r\n                let egde = {from: this.caminoFinal[i].id, to: this.caminoFinal[i+1].id }\r\n                arregloEdge.push(egde)\r\n                console.log(\"El camino usado fue: \" + this.caminoFinal[i].dato + \" con id \" + this.caminoFinal[i].id)\r\n            }    \r\n        }\r\n        if(arregloEdge.length == 0){\r\n            alert(\"Error1. Valor no existente. \")\r\n        }\r\n        this.busquedaRecorrido = arregloEdge\r\n        return arregloEdge\r\n    }\r\n\r\n    //Metodo Recursivo para busqueda de camino a final\r\n    subbusqueda(nodo){\r\n        if(nodo.dato == this.final){\r\n            if(nodo.distTotal<this.distanciaFinal&&nodo.distTotal!=0){\r\n                this.caminoFinal = []\r\n                this.distanciaFinal = nodo.distTotal\r\n                nodo.camino.insertar(nodo)\r\n                let cargacamino = nodo.camino.cabeza\r\n                while (cargacamino != null){\r\n                    this.caminoFinal.push(cargacamino.dato)\r\n                    cargacamino = cargacamino.siguiente\r\n                }\r\n                nodo.camino.eliminar(nodo)\r\n                console.log(\"Hay una nueva carga de datos finales\")\r\n            }else if(this.distanciaFinal == 0){\r\n                this.distanciaFinal = nodo.distTotal\r\n                nodo.camino.insertar(nodo)\r\n                let cargacamino = nodo.camino.cabeza\r\n                while (cargacamino != null){\r\n                    this.caminoFinal.push(cargacamino.dato)\r\n                    cargacamino = cargacamino.siguiente\r\n                }\r\n                nodo.camino.eliminar(nodo)\r\n                console.log(\"Hay una nueva carga de datos finales\")\r\n            }\r\n        }else{\r\n            let nuevosenlaces = nodo.enlaces.cabeza\r\n            while(nuevosenlaces!= null){\r\n                if(nodo.camino!=null){\r\n                    let verificacioncaminodestino = nodo.camino.cabeza\r\n                    let permiso = false\r\n                    while(verificacioncaminodestino!=null){\r\n                        if(verificacioncaminodestino.dato.dato == nuevosenlaces.dato.destino.dato){\r\n                            permiso = true\r\n                            break\r\n                        }\r\n                        verificacioncaminodestino = verificacioncaminodestino.siguiente\r\n                    }\r\n                    if(permiso == false){\r\n                        let adymandar = nodo.adyacentes.cabeza\r\n                        while(adymandar!= null){\r\n                            if(adymandar.dato.dato == nuevosenlaces.dato.destino.dato){\r\n                                adymandar.dato.distTotal = nuevosenlaces.dato.distancia + nodo.distTotal\r\n                                nodo.camino.insertar(nodo)\r\n                                adymandar.dato.camino = nodo.camino\r\n                                this.subbusqueda(adymandar.dato)\r\n                                nodo.camino.eliminar(nodo)\r\n                                adymandar.dato.camino.eliminar(nodo)\r\n                                break\r\n                            }\r\n                            adymandar = adymandar.siguiente\r\n                        }\r\n                    }\r\n                }else{\r\n                    let adymandar = nodo.adyacentes.cabeza\r\n                    while(adymandar!= null){\r\n                        if(adymandar.dato.dato == nuevosenlaces.dato.dato){\r\n                            adymandar.dato.distTotal = nuevosenlaces.dato.distancia + nodo.distTotal\r\n                            nodo.camino.insertar(nodo)\r\n                            adymandar.dato.camino = nodo.camino\r\n                            this.subbusqueda(adymandar.dato)\r\n                            nodo.camino.eliminar(nodo)\r\n                            adymandar.dato.camino.eliminar(nodo)\r\n                        break\r\n                        }\r\n                        adymandar= adymandar.siguiente\r\n                    }\r\n                }\r\n                nuevosenlaces = nuevosenlaces.siguiente\r\n            }\r\n        }        \r\n    }\r\n\r\n    //Metodo de Rebubrimiento Minimo\r\n    recubrimientoMinimo(ini){\r\n        let borrar = this.ListaAdyacencia.cabeza\r\n        while(borrar!= null){\r\n            borrar.dato.camino = new ListaDoble()\r\n            borrar = borrar.siguiente\r\n        }\r\n        this.caminoFinal = []\r\n        this.inicio = ini\r\n        let costos = new ListaDoble()\r\n        let permiso = false\r\n        let enlacesmandar = []\r\n        console.log(\"Empezamos en: \"+this.inicio)\r\n        let iniRec = this.ListaAdyacencia.cabeza\r\n        while(iniRec!= null){\r\n            if(iniRec.dato.dato == this.inicio){\r\n                let enl = iniRec.dato.enlaces.cabeza\r\n                while(enl!= null){\r\n                    costos.insertar(enl.dato.distancia)\r\n                    enlacesmandar.push(enl.dato)\r\n                    enl = enl.siguiente\r\n                }\r\n                let minimodis = costos.regresarMinimo()\r\n                enl = iniRec.dato.enlaces.cabeza\r\n                while(enl!= null){\r\n                    if(iniRec.dato.dato == enl.dato.inicio.dato){\r\n                        if(enl.dato.distancia == minimodis){    \r\n                            let enlaces2 = []\r\n                            for(let i = 0;i<enlacesmandar.length;i++){\r\n                                if(enlacesmandar[i] != \".\"){\r\n                                    enlaces2.push(enlacesmandar[i])\r\n                                }\r\n                            }\r\n                            if(enlaces2.length!=0){\r\n                                enlacesmandar = enlaces2\r\n                            }\r\n                            for(let i = 0;i<this.caminoFinal.length;i++){\r\n                                if(this.caminoFinal[i].from == enlacesmandar[0].inicio.id && this.caminoFinal[i].to == enlacesmandar[0].destino.id && this.caminoFinal[i].label == enlacesmandar[0].distancia){\r\n                                    permiso = true\r\n                                }\r\n                            }\r\n                            enl.dato.destino.camino.insertar(iniRec.dato)\r\n                            let egde = {from: enl.dato.inicio.id, to: enl.dato.destino.id, label: enl.dato.distancia }\r\n                            if(permiso == false){\r\n                                this.caminoFinal.push(egde)\r\n                            }\r\n                            this.seguirRecorriendo(enl.dato.destino)\r\n                            costos.eliminar(enl.dato.distancia)\r\n                            minimodis = costos.regresarMinimo()\r\n                            if(enlacesmandar.length != 0){\r\n                                enlacesmandar[0]=\".\"\r\n                            }\r\n                            this.restoCaminos(costos,minimodis,enlacesmandar,iniRec.dato)\r\n                        \r\n                        }    \r\n                    }\r\n                    enl = enl.siguiente\r\n                }\r\n            }\r\n            iniRec = iniRec.siguiente\r\n        }\r\n        if(this.caminoFinal.length == 0){\r\n            alert(\"Error1. Valor no existente. \")\r\n        }\r\n        return this.caminoFinal\r\n    }\r\n\r\n    //submetodo Recubrimiento minimo\r\n    seguirRecorriendo(nodo){\r\n        let costos = new ListaDoble()\r\n        let enl = nodo.enlaces.cabeza\r\n        let enlacesmandar = []\r\n        while(enl!= null){\r\n            if(nodo.dato == enl.dato.inicio.dato){\r\n                if(enl.dato.inicio.camino.contiente(enl.dato.inicio.camino, enl.dato.destino) == false){\r\n                    costos.insertar(enl.dato.distancia)        \r\n                    enlacesmandar.push(enl.dato)\r\n                }\r\n            }\r\n            enl = enl.siguiente\r\n        }\r\n        let minimodis = costos.regresarMinimo()\r\n        let permiso = false\r\n        enl = nodo.enlaces.cabeza\r\n        while(enl!= null){            \r\n            if(enl.dato.distancia == minimodis){\r\n                if(enl.dato.destino.camino.size == 0){\r\n                    for(let i = 0;i<this.caminoFinal.length;i++){\r\n                        if(this.caminoFinal[i].from == enlacesmandar[0].inicio.id && this.caminoFinal[i].to == enlacesmandar[0].destino.id && this.caminoFinal[i].label == enlacesmandar[0].distancia){\r\n                            permiso = true\r\n                        }\r\n                    }\r\n                    enl.dato.destino.camino.insertar(nodo)\r\n                    let egde = {from: enl.dato.inicio.id, to: enl.dato.destino.id, label: enl.dato.distancia}\r\n                    if(permiso == false){\r\n                        this.caminoFinal.push(egde)\r\n                    }\r\n                    this.seguirRecorriendo(enl.dato.destino)\r\n                    costos.eliminar(minimodis)\r\n                    minimodis = costos.regresarMinimo()\r\n                    if(enlacesmandar.length != 0){\r\n                        enlacesmandar[0]=\".\"\r\n                    }\r\n                    this.restoCaminos(costos, minimodis,enlacesmandar,nodo)    \r\n                }else{\r\n                    costos.eliminar(minimodis)\r\n                    minimodis = costos.regresarMinimo()\r\n                    if(enlacesmandar.length != 0){\r\n                        enlacesmandar[0]=\".\"\r\n                    }\r\n                    this.restoCaminos(costos, minimodis,enlacesmandar,nodo)                    \r\n                }\r\n            }\r\n            enl = enl.siguiente\r\n        }\r\n    }\r\n\r\n    //SubSubMetodoRecorrido\r\n    restoCaminos(lisCostos,minimodis, lisEnlaces,nodo){\r\n        let enlacesmandar = []\r\n        for(let i = 0;i<lisEnlaces.length;i++){\r\n            if(lisEnlaces[i] != \".\"){\r\n                enlacesmandar.push(lisEnlaces[i])\r\n            }\r\n        }\r\n        let permiso = false\r\n        let enl = null\r\n        if(enlacesmandar.length == 0){\r\n            return\r\n        }else{\r\n            enl = enlacesmandar[0]\r\n            if(nodo.dato == enl.inicio.dato){\r\n                if(enl.distancia == minimodis){\r\n                    if(enl.destino.camino.size == 0){\r\n                        for(let i = 0;i<this.caminoFinal.length;i++){\r\n                            if(this.caminoFinal[i].from == enlacesmandar[0].inicio.id && this.caminoFinal[i].to == enlacesmandar[0].destino.id && this.caminoFinal[i].label == enlacesmandar[0].distancia){\r\n                                permiso = true\r\n                            }\r\n                        }\r\n                        enl.destino.camino.insertar(nodo)\r\n                        let egde = {from: enl.inicio.id, to: enl.destino.id, label: enl.distancia}\r\n                        if(permiso == false){\r\n                            this.caminoFinal.push(egde)\r\n                        }\r\n                        this.seguirRecorriendo(enl.destino)\r\n                        lisCostos.eliminar(minimodis)\r\n                        minimodis = lisCostos.regresarMinimo()\r\n                        if(enlacesmandar.length!=0){\r\n                            enlacesmandar[0] = \".\"\r\n                            this.restoCaminos(lisCostos,minimodis,enlacesmandar,nodo)\r\n                        }\r\n                    }else{\r\n                        lisCostos.eliminar(minimodis)\r\n                        minimodis = lisCostos.regresarMinimo()\r\n                        if(enlacesmandar.length!=0){\r\n                            enlacesmandar[0] = \".\"\r\n                            this.restoCaminos(lisCostos,minimodis,enlacesmandar,nodo)\r\n                        }\r\n                    }\r\n                }    \r\n            }\r\n        }\r\n    }\r\n\r\n    //Metodo arranque para costo minimo\r\n    costoMinimo(ini, fin){\r\n        this.profundidad = null\r\n        this.anchura = null\r\n        this.busquedaRecorrido = null\r\n        let arregloEdge = []\r\n        this.inicio = ini\r\n        this.final = fin\r\n        console.log(\"Empezamos en: \"+this.inicio)\r\n        console.log(\"Queremos terminar en: \" + this.final)\r\n        let iniRec = this.ListaAdyacencia.cabeza\r\n        while(iniRec!=null){\r\n            if(iniRec.dato.dato == this.inicio){\r\n                let enl = iniRec.dato.enlaces.cabeza\r\n                while(enl!= null){\r\n                    let adyman = iniRec.dato.adyacentes.cabeza\r\n                    while(adyman!=null){\r\n                        if(adyman.dato.dato == enl.dato.destino.dato){\r\n                            adyman.dato.distTotal = enl.dato.distancia\r\n                            adyman.dato.camino.insertar(iniRec.dato)\r\n                            this.formarcaminooptimo(adyman.dato)\r\n                            adyman.dato.camino.eliminar(iniRec.dato)                        \r\n                        }\r\n                        adyman = adyman.siguiente\r\n                    }\r\n                    enl = enl.siguiente\r\n                }\r\n            }\r\n            iniRec = iniRec.siguiente\r\n        }\r\n        let borrar = this.ListaAdyacencia.cabeza\r\n        while(borrar!= null){\r\n            borrar.dato.camino = new ListaDoble()\r\n            borrar = borrar.siguiente\r\n        }\r\n        console.log(\"Al parecer funciono, la distancia final total es: \"+this.distanciaFinal)\r\n        for(let i = 0;i<this.caminoFinal.length-1;i++){\r\n            let egde = {from: this.caminoFinal[i].id, to: this.caminoFinal[i+1].id }\r\n            arregloEdge.push(egde)\r\n            console.log(\"El camino usado fue: \" + this.caminoFinal[i].dato + \" con id \" + this.caminoFinal[i].id)\r\n        }\r\n        if(arregloEdge.length==0){\r\n            alert(\"Error1. Valor no existente.\")\r\n        }\r\n        this.costoUnfi = arregloEdge\r\n        return arregloEdge\r\n    }\r\n\r\n    //Metodo Recursivo para busqueda de camino a final\r\n    formarcaminooptimo(nodo){\r\n        if(nodo.dato == this.final){\r\n            if(nodo.distTotal<this.distanciaFinal&&nodo.distTotal!=0){\r\n                this.caminoFinal = []\r\n                this.distanciaFinal = nodo.distTotal\r\n                nodo.camino.insertar(nodo)\r\n                let cargacamino = nodo.camino.cabeza\r\n                while (cargacamino != null){\r\n                    this.caminoFinal.push(cargacamino.dato)\r\n                    cargacamino = cargacamino.siguiente\r\n                }\r\n                nodo.camino.eliminar(nodo)\r\n                console.log(\"Hay una nueva carga de datos finales\")\r\n            }else if(this.distanciaFinal == 0){\r\n                this.distanciaFinal = nodo.distTotal\r\n                nodo.camino.insertar(nodo)\r\n                let cargacamino = nodo.camino.cabeza\r\n                while (cargacamino != null){\r\n                    this.caminoFinal.push(cargacamino.dato)\r\n                    cargacamino = cargacamino.siguiente\r\n                }\r\n                nodo.camino.eliminar(nodo)\r\n                console.log(\"Hay una nueva carga de datos finales\")\r\n            }\r\n        }else{\r\n            let nuevosenlaces = nodo.enlaces.cabeza\r\n            while(nuevosenlaces!= null){\r\n                if(nodo.camino!=null){\r\n                    let verificacioncaminodestino = nodo.camino.cabeza\r\n                    let permiso = false\r\n                    while(verificacioncaminodestino!=null){\r\n                        if(verificacioncaminodestino.dato.dato == nuevosenlaces.dato.destino.dato){\r\n                            permiso = true\r\n                            break\r\n                        }\r\n                        verificacioncaminodestino = verificacioncaminodestino.siguiente\r\n                    }\r\n                    if(permiso == false){\r\n                        let adymandar = nodo.adyacentes.cabeza\r\n                        while(adymandar!= null){\r\n                            if(adymandar.dato.dato == nuevosenlaces.dato.destino.dato){\r\n                                adymandar.dato.distTotal = nuevosenlaces.dato.distancia + nodo.distTotal\r\n                                nodo.camino.insertar(nodo)\r\n                                adymandar.dato.camino = nodo.camino\r\n                                this.formarcaminooptimo(adymandar.dato)\r\n                                nodo.camino.eliminar(nodo)\r\n                                adymandar.dato.camino.eliminar(nodo)\r\n                                break\r\n                            }\r\n                            adymandar = adymandar.siguiente\r\n                        }\r\n                    }\r\n                }else{\r\n                    let adymandar = nodo.adyacentes.cabeza\r\n                    while(adymandar!= null){\r\n                        if(adymandar.dato.dato == nuevosenlaces.dato.dato){\r\n                            adymandar.dato.distTotal = nuevosenlaces.dato.distancia + nodo.distTotal\r\n                            nodo.camino.insertar(nodo)\r\n                            adymandar.dato.camino = nodo.camino\r\n                            this.formarcaminooptimo(adymandar.dato)\r\n                            nodo.camino.eliminar(nodo)\r\n                            adymandar.dato.camino.eliminar(nodo)\r\n                        break\r\n                        }\r\n                        adymandar= adymandar.siguiente\r\n                    }\r\n                }\r\n                nuevosenlaces = nuevosenlaces.siguiente\r\n            }\r\n        }        \r\n    }\r\n\r\n    //Metodo Buscar\r\n    buscar(dato){\r\n        let bool = false\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while (aux != null){\r\n            if(aux.dato.dato == dato){\r\n                bool = true\r\n                console.log(\"El dato encontrado fue \"+dato)\r\n                break\r\n            }\r\n            aux=aux.siguiente\r\n        }\r\n        if(bool == false){\r\n            console.log(\"No encontro nada\")    \r\n        }\r\n    }\r\n\r\n    //Metodo Modificar\r\n    modificar(datobus, datocam){\r\n        let bool = false\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while(aux!=null){\r\n            if(aux.dato.dato == datobus){\r\n                bool = true\r\n                aux.dato.dato = datocam\r\n                console.log(\"El dato modificado fue \" + datobus + \" a \" + aux.dato.dato)\r\n                break\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n        if(bool == false){\r\n            console.log(\"No encontro nada\")    \r\n        }\r\n    }\r\n\r\n    //Metodo Eliminar\r\n    eliminar(datelim){\r\n        let bool = false\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while (aux != null){\r\n            if(aux.dato.dato == datelim){\r\n                bool = true\r\n                this.ListaAdyacencia.eliminar(aux.dato)\r\n                console.log(\"El dato eliminado fue \"+datelim)\r\n            }\r\n            let enl = aux.dato.enlaces.cabeza\r\n            while(enl!=null){\r\n                if(enl.dato.inicio.dato == datelim || enl.dato.destino.dato == datelim){\r\n                    aux.dato.enlaces.eliminar(enl.dato)\r\n                }\r\n                enl = enl.siguiente\r\n            }\r\n            let ady = aux.dato.adyacentes.cabeza\r\n            while(ady!=null){\r\n                if(ady.dato.dato == datelim){\r\n                    aux.dato.adyacentes.eliminar(ady.dato)\r\n                }\r\n                ady = ady.siguiente\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n        if(bool == false){\r\n            console.log(\"No encontro nada\")    \r\n        }\r\n    }\r\n\r\n    //Metodo Cargar\r\n    cargar(arreglo,nombre) {\r\n        arreglo.map(elemento=> {\r\n            let vertice = elemento.vertice\r\n            if(nombre === \"Grafo Dirigido\"){\r\n                if(elemento.aristas.length != 0){    \r\n                    elemento.aristas.map(e =>{\r\n                        this.insertar(vertice,vertice, e.arista, e.distancia)\r\n                    })\r\n                }\r\n            }else{\r\n                if(elemento.aristas.length != 0){    \r\n                    elemento.aristas.map(e =>{\r\n                        this.insertarNoDirigido(vertice,vertice, e.arista, e.distancia)\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    //Metodo Guardar\r\n   /*  guardar() {\r\n        let archivojs = [];\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while (aux != null){\r\n            archivojs.push(\"vertice\")\r\n            archivojs.push(aux.dato.dato)\r\n            let tmp = aux.dato.enlaces.cabeza\r\n            while(tmp!=null){\r\n                archivojs.push(\"arista\")\r\n                archivojs.push(tmp.dato.destino.dato)\r\n                archivojs.push(\"distancia\")\r\n                archivojs.push(tmp.dato.distancia)            \r\n                tmp=tmp.siguiente\r\n            }       \r\n            aux=aux.siguiente\r\n        }\r\n        let json = JSON.stringify(archivojs)\r\n        let nombre = \"RecorridoAnchuraProfundidad\"\r\n        fs.writeFile(nombre, json)  \r\n    } */\r\n\r\n\r\n    guardar(){\r\n        let arreglo = []\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while(aux!=null){\r\n            let tmp = aux.dato.enlaces.cabeza\r\n            let arista = []\r\n            let dato\r\n            while(tmp!= null){\r\n                dato = {vertice: tmp.dato.inicio.dato, aristas:arista}\r\n                arista.push({arista:tmp.dato.destino.dato , distancia: tmp.dato.distancia.toString()})\r\n                tmp = tmp.siguiente\r\n            }\r\n            if(aux.dato.enlaces.cabeza == null){\r\n                dato = {vertice: aux.dato.dato, aristas:arista}\r\n            }\r\n            arreglo.push(dato)\r\n            aux = aux.siguiente\r\n        }\r\n        return arreglo\r\n    }\r\n    //Graficar Matriz\r\n    graficarMatriz(){\r\n        let array = [this.ListaAdyacencia.size]\r\n        for (let x = 0; x < this.ListaAdyacencia.size; x++) {\r\n            array[x] = [this.ListaAdyacencia.size]\r\n        }\r\n       /*  for (let i = 0; i < array.length; i++) {\r\n            for (let j = 0; j < array[i].length; j++) {\r\n                array [i][j] = 0;\r\n                \r\n            }\r\n            \r\n        }  */\r\n\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while(aux!= null){\r\n            let tmp = aux.dato.enlaces.cabeza\r\n            while(tmp!=null){\r\n                array[tmp.dato.inicio.id][tmp.dato.destino.id] = tmp.dato.distancia\r\n                tmp = tmp.siguiente\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n        console.table(array)\r\n        return array\r\n    }\r\n    \r\n    //Carga de array para graficacion de nodos\r\n    graficarNodos(valorBusqueda){\r\n        let arreglo = []\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while(aux!=null){\r\n            let dato = {id: aux.dato.id, label:aux.dato.dato.toString(),}\r\n            if(aux.dato.dato == valorBusqueda){\r\n                dato = {id: aux.dato.id, label:aux.dato.dato.toString(), color: \"lime\"}\r\n            }\r\n\r\n            if(this.busquedaRecorrido != null){\r\n                for (let x = 0; x < this.busquedaRecorrido.length; x++) {\r\n                    if(this.busquedaRecorrido[x].from ===aux.dato.id){\r\n                        dato = {id: aux.dato.id, label:aux.dato.dato.toString(), color: \"lime\"}   \r\n                    }else if(this.busquedaRecorrido[x].to === aux.dato.id){\r\n                        dato = {id: aux.dato.id, label:aux.dato.dato.toString(), color: \"lime\"}\r\n                    }\r\n                    \r\n                }\r\n            }\r\n\r\n            arreglo.push(dato)\r\n            aux = aux.siguiente\r\n        }\r\n        return arreglo\r\n    }\r\n\r\n    //Carga de array para graficacion de enlaces\r\n    graficarEnlaces(){\r\n        let arregloedge = []\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while(aux!=null){\r\n            let tmp = aux.dato.enlaces.cabeza\r\n            while(tmp!= null){\r\n                let egde = {from: tmp.dato.inicio.id, to: tmp.dato.destino.id , label: tmp.dato.distancia.toString()}\r\n                if(this.anchura != null){\r\n                    for (let x = 0; x < this.anchura.length; x++) {\r\n                        if(this.anchura[x].from === tmp.dato.inicio.id && this.anchura[x].to === tmp.dato.destino.id || this.anchura[x].from === tmp.dato.destino.id && this.anchura[x].to === tmp.dato.inicio.id) {\r\n                            egde = {from: tmp.dato.inicio.id, to: tmp.dato.destino.id , label: tmp.dato.distancia.toString(),  color: \"rgb(20,24,200)\"}   \r\n                        }\r\n                        \r\n                    }     \r\n                     \r\n                }else if(this.profundidad != null){\r\n                    for (let x = 0; x < this.profundidad.length; x++) {\r\n                        if(this.profundidad[x].from === tmp.dato.inicio.id && this.profundidad[x].to === tmp.dato.destino.id || this.profundidad[x].from === tmp.dato.destino.id && this.profundidad[x].to === tmp.dato.inicio.id){\r\n                            egde = {from: tmp.dato.inicio.id, to: tmp.dato.destino.id , label: tmp.dato.distancia.toString(),  color: \"rgb(20,24,200)\"}   \r\n                        }\r\n                        \r\n                    }\r\n                }else if(this.busquedaRecorrido != null){\r\n                    for (let x = 0; x < this.busquedaRecorrido.length; x++) {\r\n                        if(this.busquedaRecorrido[x].from === tmp.dato.inicio.id && this.busquedaRecorrido[x].to === tmp.dato.destino.id || this.busquedaRecorrido[x].from === tmp.dato.destino.id && this.busquedaRecorrido[x].to === tmp.dato.inicio.id){\r\n                            egde = {from: tmp.dato.inicio.id, to: tmp.dato.destino.id , label: tmp.dato.distancia.toString(),  color: \"lime\"}   \r\n                        }\r\n                        \r\n                    }\r\n                }else if(this.costoUnfi != null){\r\n                    for (let x = 0; x < this.costoUnfi.length; x++) {\r\n                        if(this.costoUnfi[x].from === tmp.dato.inicio.id && this.costoUnfi[x].to === tmp.dato.destino.id || this.costoUnfi[x].from === tmp.dato.destino.id && this.costoUnfi[x].to === tmp.dato.inicio.id){\r\n                            egde = {from: tmp.dato.inicio.id, to: tmp.dato.destino.id , label: tmp.dato.distancia.toString(),  color: \"orange\"}   \r\n                        }\r\n                        \r\n                    }\r\n                }\r\n                else if(this.caminoFinal != null){\r\n                    for (let x = 0; x < this.caminoFinal.length; x++) {\r\n                        if(this.caminoFinal[x].from === tmp.dato.inicio.id && this.caminoFinal[x].to === tmp.dato.destino.id || this.caminoFinal[x].from === tmp.dato.destino.id && this.caminoFinal[x].to === tmp.dato.inicio.id){\r\n                            egde = {from: tmp.dato.inicio.id, to: tmp.dato.destino.id , label: tmp.dato.distancia.toString(),  color: \"orange\"}   \r\n                        }\r\n                        \r\n                    }\r\n                }\r\n                arregloedge.push(egde)\r\n                tmp = tmp.siguiente\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n        \r\n       /*  console.log(this.caminoFinal)\r\n        console.log(arregloedge)\r\n        let arregloGen = []\r\n        if(this.recminimo != null){\r\n            for (let x = 0; x < this.recminimo.length; x++) {\r\n                arregloedge.push(this.recminimo[x])\r\n            }\r\n        }\r\n        console.log(arregloedge) */\r\n        return arregloedge\r\n    }\r\n\r\n    graficarML(){\r\n        if(this.almacenamiento === \"Matriz\"){\r\n            return this.graficarM();\r\n        }else{\r\n            return this.graficarLista();\r\n        }\r\n    }\r\n\r\n    graficarM(){\r\n        this.arregloM = this.graficarMatriz()\r\n        let arreglo = []\r\n        for(let i = 0; i < this.arregloM.length; i++){\r\n            let nodoArreglo = {\r\n                id: i.toString(),\r\n                type: 'default',\r\n                targetPosition: 'top',\r\n                sourcePosition: 'bottom',\r\n                data: { label: (\r\n                    <> <strong>{i}</strong>\r\n                    </>\r\n                 ) },\r\n                position: {  x: 100 , y: 25 + (i+1)*40  },\r\n                connectable: false, \r\n            }\r\n\r\n            arreglo.push(nodoArreglo)\r\n\r\n        }\r\n\r\n        for(let i = 0; i < this.arregloM.length; i++){\r\n            let nodoArreglo = {\r\n                id: i.toString()+20,\r\n                type: 'default',\r\n                targetPosition: 'top',\r\n                sourcePosition: 'bottom',\r\n                data: { label: (\r\n                    <> <strong>{i}</strong>\r\n                    </>\r\n                 ) },\r\n                position: {  x: 100  + (i+1)*150, y: 25 },\r\n                connectable: false, \r\n            }\r\n\r\n            arreglo.push(nodoArreglo)\r\n\r\n        }\r\n        for (let i = 0; i < this.arregloM.length; i++) {\r\n            for (let j = 0; j < this.arregloM.length; j++) {\r\n                let nodoArreglo = {\r\n                    id: i.toString()+j.toString(),\r\n                    type: 'default',\r\n                    targetPosition: 'top',\r\n                    sourcePosition: 'bottom',\r\n                    data: { label: (\r\n                        <> <strong>{this.arregloM[i][j] != null ? this.arregloM[i][j]: 0}</strong>\r\n                        </>\r\n                     ) },\r\n                    position: {  x: 100 + (j+1)*150, y: 25 + (i+1)*40  },\r\n                    connectable: false, \r\n                }\r\n\r\n                arreglo.push(nodoArreglo)\r\n            }\r\n            \r\n        }\r\n\r\n        return arreglo\r\n    }\r\n\r\n    graficarLista(){\r\n        let principal = []\r\n        let secundario = []\r\n        let arreglo  = []\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        let contadorfuera = 0;\r\n        while(aux != null){\r\n            let tmp = aux.dato.enlaces.cabeza\r\n            let contador = 0\r\n            let nodoArregloFuera = {\r\n                id: aux.dato.ident,\r\n                type: 'input', // input node\r\n                data: { label: \"Vertice: \"+aux.dato.dato },\r\n                position: { x: 100, y: 25 + contadorfuera*75 },\r\n                connectable: false, \r\n            }\r\n            arreglo.push(nodoArregloFuera)\r\n            while(tmp != null){\r\n                let nodoArreglo = {\r\n                    id: tmp.dato.inicio.ident,\r\n                    type: 'default',\r\n                    targetPosition: 'left',\r\n                    sourcePosition: 'right',\r\n                    data: { label: \"Arista: \"+tmp.dato.destino.dato.toString()+\" \" +\"Distancia: \" + tmp.dato.distancia.toString() },\r\n                    position: { x: 100 + (contador+1)*200, y: 25 +contadorfuera *75 },\r\n                    connectable: false, \r\n                }\r\n                arreglo.push(nodoArreglo)\r\n                if(tmp.siguiente != null){\r\n                    let nodoArreglo = {\r\n                        id:  tmp.dato.inicio.ident+'-'+tmp.dato.destino.ident, source:  tmp.dato.inicio.ident, target: tmp.dato.destino.ident  }\r\n                        arreglo.push(nodoArreglo)\r\n                }\r\n                \r\n                contador++;\r\n                tmp = tmp.siguiente\r\n            }\r\n            \r\n            if(tmp != null){\r\n                let nodoArreglo = {\r\n                    id:  aux.dato.ident+'-'+tmp.dato.inicio.ident, source:  aux.dato.ident, target: tmp.dato.inicio.ident  }\r\n                    arreglo.push(nodoArreglo)\r\n            }\r\n            if(aux.siguiente != null){\r\n                let nodoArreglo = {\r\n                    id:   aux.dato.ident+'-'+aux.siguiente.dato.ident, source:aux.dato.ident, target: aux.siguiente.dato.ident  }\r\n                    arreglo.push(nodoArreglo)\r\n            }\r\n            contadorfuera++;\r\n            aux = aux.siguiente;\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n}\r\n\r\nexport default ListaAdyacencia;\r\n","//Contador para identificadores unicos de los nodos\r\nvar idNodos = 0\r\n//Caminos para recubrimiento minimo\r\nvar recminimos = null\r\n\r\n//Clase para la lista de adyacencia como lista doble\r\nclass ListaDoble{\r\n    //Constructor\r\n    constructor(){\r\n        this.cabeza = null\r\n        this.cola = null\r\n        this.size = 0\r\n    }\r\n\r\n    //Metodo para validacion de datos ya existentes en una lista\r\n    contiente(buscando, elemento){\r\n        let buscar = buscando.cabeza\r\n        while(buscar!=null){\r\n            if(buscar.dato.dato == elemento.dato){\r\n                return true\r\n            }\r\n            buscar = buscar.siguiente\r\n        }\r\n        return false\r\n    }\r\n\r\n    //Regresar Minimo\r\n    regresarMinimo(){\r\n        let aux = this.cabeza\r\n        let regresar = null\r\n        while(aux!=null){\r\n            if(regresar == null){\r\n                regresar = aux.dato\r\n            }else if(aux.dato<regresar){\r\n                regresar = aux.dato\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n        return regresar\r\n    }\r\n\r\n    //Insercion para la lista doble\r\n    insertar(dato){\r\n        if(this.cabeza == null){\r\n            let nodo = new NodoListaDoble(dato)\r\n            this.cabeza = nodo\r\n            this.cola = nodo\r\n            this.size++\r\n        }else{\r\n            let nodo = new NodoListaDoble(dato)\r\n            let aux = this.cabeza\r\n            while(aux.siguiente != null){\r\n                aux = aux.siguiente\r\n            }\r\n            aux.siguiente = nodo\r\n            nodo.anterior = aux\r\n            this.cola = nodo\r\n            this.size++\r\n        }\r\n    }\r\n\r\n    //Eliminacion para la lista doble\r\n    eliminar(dato){\r\n        let aux = this.cabeza\r\n        while(aux != null){\r\n            if(dato == aux.dato && aux == this.cabeza && this.cabeza.siguiente!=null){\r\n                let tmp = this.cabeza.siguiente\r\n                tmp.anterior = null\r\n                this.cabeza.siguiente = null\r\n                this.cabeza = tmp          \r\n                this.size--      \r\n                return\r\n            }else if(dato == aux.dato && aux.anterior != null && aux.siguiente != null){\r\n                let tmp = aux.siguiente\r\n                tmp.anterior = aux.anterior\r\n                aux.anterior.siguiente = tmp\r\n                aux.siguiente = null\r\n                aux.anterior = null\r\n                this.size--\r\n                return\r\n            }else if(dato == aux.dato && aux == this.cola && this.cola.anterior!=null){\r\n                let tmp = this.cola.anterior\r\n                tmp.siguiente = null\r\n                this.cola.anterior = null\r\n                this.cola = tmp\r\n                this.size--\r\n                return\r\n            }else if(dato == aux.dato && this.cola == this.cabeza){\r\n                this.cola = null\r\n                this.cabeza = null\r\n                this.size--\r\n                return\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n    }\r\n}\r\n\r\n//Clase Nodos para Lista Doble\r\nclass NodoListaDoble{\r\n    //Constructor\r\n    constructor(dato){\r\n        this.siguiente = null\r\n        this.anterior = null\r\n        this.dato = dato\r\n        this.id = 0\r\n    }\r\n}\r\n\r\n//Clase Nodo para Grafo\r\nclass Nodo{\r\n    //Constructor\r\n    constructor(dato){\r\n        this.dato = dato\r\n        this.id = 0\r\n        this.distTotal = 0\r\n        this.camino = new ListaDoble()\r\n        this.enlaces = new ListaDoble()\r\n        this.adyacentes = new ListaDoble()\r\n    }\r\n}\r\n\r\n//Clas Enlaces para Grafos\r\nclass Enlaces{\r\n    //Constructor\r\n    constructor(inicio, distancia, destino){\r\n        this.inicio = inicio\r\n        this.destino = destino\r\n        this.distancia = distancia\r\n    }\r\n}\r\n\r\n//Clase Lista Principal de Adyacencia\r\nclass ListaAdyacencia{\r\n    //Constructor\r\n    constructor(){\r\n        this.ListaAdyacencia = new ListaDoble()\r\n        this.caminoFinal = []\r\n        this.distanciaFinal = 0\r\n        this.inicio = null\r\n        this.final = null\r\n    }\r\n\r\n    //Obtencion de Nodos o Vertices para validacion booleana\r\n    getVerticeNoDirigido(dato){\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while(aux!= null){\r\n            if (aux.dato.dato == dato){\r\n                return aux.dato\r\n            }\r\n            aux= aux.siguiente\r\n        }\r\n        if(this.ListaAdyacencia.size == 0){\r\n            return dato\r\n        }\r\n        return null\r\n    }\r\n\r\n    //Insercion en grafo no dirigido\r\n    insertarNoDirigido(dato, inicio, final, distancia){\r\n        if (this.getVerticeNoDirigido(dato)==null){\r\n            let n = new Nodo(dato)\r\n            n.id = idNodos\r\n            this.ListaAdyacencia.insertar(n)\r\n            idNodos++\r\n            this.EnlazarNoDirigido(inicio, final, distancia)\r\n        }else if(this.getVerticeNoDirigido(dato) == dato){\r\n            let n = new Nodo(dato)\r\n            n.id = idNodos\r\n            this.ListaAdyacencia.insertar(n)\r\n            idNodos++\r\n            this.enlazarprimeroNoDirigido(inicio, final, distancia,final)\r\n        }else{\r\n            this.EnlazarNoDirigido(inicio, final, distancia)\r\n            console.log(\"Al parecer ya lo creo o es el primero\")\r\n        }\r\n    }    \r\n\r\n    //Enlace primero en grafo no dirigido\r\n    enlazarprimeroNoDirigido(n1, n2, distancia, dato){\r\n        let nodo2 = new Nodo(dato)\r\n        nodo2.id = idNodos\r\n        idNodos++\r\n        this.ListaAdyacencia.insertar(nodo2)\r\n        let origen = null\r\n        let destino = null\r\n        origen = this.getVerticeNoDirigido(n1)\r\n        destino = this.getVerticeNoDirigido(n2)    \r\n        if(origen == null || destino == null){\r\n            console.log(\"No se encontro un nodo para el enlace we en primero\")\r\n            return\r\n        }\r\n        origen.adyacentes.insertar(destino)\r\n        destino.adyacentes.insertar(origen)\r\n        let c = new Enlaces(origen, distancia, destino)\r\n        origen.enlaces.insertar(c)\r\n        let d = new Enlaces(destino, distancia, origen)\r\n        destino.enlaces.insertar(d)\r\n    }\r\n\r\n    //Enlaces para grafos no dirigidos\r\n    EnlazarNoDirigido(n1, n2, distancia){\r\n        let origen = null\r\n        let destino = null\r\n        let dat1 = null\r\n        let dat2 = null\r\n        origen = this.getVerticeNoDirigido(n1)\r\n        destino = this.getVerticeNoDirigido(n2)\r\n        if(origen==null){\r\n            let nodo2 = new Nodo(n1)\r\n            nodo2.id = idNodos\r\n            idNodos++\r\n            this.ListaAdyacencia.insertar(nodo2)\r\n            origen = this.getVerticeNoDirigido(n1)\r\n        }\r\n        if(destino == null){\r\n            let nodo2 = new Nodo(n2)\r\n            nodo2.id = idNodos\r\n            idNodos++\r\n            this.ListaAdyacencia.insertar(nodo2)\r\n            destino = this.getVerticeNoDirigido(n2)\r\n        }\r\n        let aux = origen.adyacentes.cabeza\r\n        while(aux!= null){\r\n            if (aux.dato.dato ==  destino.dato){\r\n                dat1 = destino.dato\r\n                break\r\n            }\r\n            aux= aux.siguiente\r\n        }\r\n        if(dat1 == null){\r\n            origen.adyacentes.insertar(destino)\r\n        }\r\n        if(origen.adyacentes.size == 0){\r\n            origen.adyacentes.insertar(destino)\r\n        }\r\n        let aux2 = destino.adyacentes.cabeza\r\n        while(aux2!= null){\r\n            if (aux2.dato.dato ==  origen.dato){\r\n                dat2 = origen.dato\r\n                break\r\n            }\r\n            aux2 = aux2.siguiente\r\n        }\r\n        if(dat2 == null){\r\n            destino.adyacentes.insertar(origen)\r\n        }\r\n        if(destino.adyacentes.size == 0){\r\n            destino.adyacentes.insertar(origen)\r\n        }\r\n        let c = new Enlaces(origen, distancia, destino)\r\n        origen.enlaces.insertar(c)\r\n        let d = new Enlaces(destino, distancia, origen)\r\n        destino.enlaces.insertar(d)\r\n    }\r\n\r\n    //Obtencion de vertices para grafos dirigidos\r\n    getVertice(dato){\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while(aux!= null){\r\n            if (aux.dato.dato == dato){\r\n                return aux.dato\r\n            }\r\n            aux= aux.siguiente\r\n        }\r\n        if(this.ListaAdyacencia.size == 0){\r\n            return dato\r\n        }\r\n        return null\r\n    }\r\n\r\n    //Insercion de grafos dirigdos\r\n    insertar(dato, inicio, final, distancia){\r\n        if (this.getVertice(dato)==null){\r\n            let n = new Nodo(dato)\r\n            n.id = idNodos\r\n            this.ListaAdyacencia.insertar(n)\r\n            idNodos++\r\n            this.Enlazar(inicio, final, distancia)\r\n        }else if(this.getVertice(dato) == dato){\r\n            let n = new Nodo(dato)\r\n            n.id = idNodos\r\n            this.ListaAdyacencia.insertar(n)\r\n            idNodos++\r\n            this.enlazarprimero(inicio, final, distancia,final)\r\n        }else{\r\n            this.Enlazar(inicio, final, distancia)\r\n            console.log(\"Al parecer ya lo creo o es el primero\")\r\n        }\r\n    }    \r\n\r\n    //Primer enlace para grafos dirigidos\r\n    enlazarprimero(n1, n2, distancia, dato){\r\n        let nodo2 = new Nodo(dato)\r\n        nodo2.id = idNodos\r\n        idNodos++\r\n        this.ListaAdyacencia.insertar(nodo2)\r\n        let origen = null\r\n        let destino = null\r\n        origen = this.getVertice(n1)\r\n        destino = this.getVertice(n2)\r\n        if(origen == null || destino == null){\r\n            console.log(\"No se encontro un nodo para el enlace we en primero\")\r\n            return\r\n        }\r\n        origen.adyacentes.insertar(destino)\r\n        destino.adyacentes.insertar(origen)\r\n        let c = new Enlaces(origen, distancia, destino)\r\n        origen.enlaces.insertar(c)\r\n    }\r\n\r\n    //Enlaces para gradfos dirigidos\r\n    Enlazar(n1, n2, distancia){\r\n        let origen = null\r\n        let destino = null\r\n        let dat1 = null\r\n        let dat2 = null\r\n        origen = this.getVertice(n1)\r\n        destino = this.getVertice(n2)\r\n        if(origen==null){\r\n            let nodo2 = new Nodo(n1)\r\n            nodo2.id = idNodos\r\n            idNodos++\r\n            this.ListaAdyacencia.insertar(nodo2)\r\n            origen = this.getVerticeNoDirigido(n1)\r\n        }\r\n        if(destino == null){\r\n            let nodo2 = new Nodo(n2)\r\n            nodo2.id = idNodos\r\n            idNodos++\r\n            this.ListaAdyacencia.insertar(nodo2)\r\n            destino = this.getVerticeNoDirigido(n2)\r\n        }\r\n        let aux = origen.adyacentes.cabeza\r\n        while(aux!= null){\r\n            if (aux.dato.dato ==  destino.dato){\r\n                dat1 = destino.dato\r\n                break\r\n            }\r\n            aux= aux.siguiente\r\n        }\r\n        if(dat1 == null){\r\n            origen.adyacentes.insertar(destino)\r\n        }\r\n        if(origen.adyacentes.size == 0){\r\n            origen.adyacentes.insertar(destino)\r\n        }\r\n        let aux2 = destino.adyacentes.cabeza\r\n        while(aux2!= null){\r\n            if (aux2.dato.dato ==  origen.dato){\r\n                dat2 = origen.dato\r\n                break\r\n            }\r\n            aux2 = aux2.siguiente\r\n        }\r\n        if(dat2 == null){\r\n            destino.adyacentes.insertar(origen)\r\n        }\r\n        if(destino.adyacentes.size == 0){\r\n            destino.adyacentes.insertar(origen)\r\n        }\r\n        let c = new Enlaces(origen, distancia, destino)\r\n        origen.enlaces.insertar(c)\r\n    }\r\n\r\n    //Metodo arranque para costo minimo\r\n    busquedaEspecifica(fin){\r\n        this.caminoFinal = []\r\n        let arregloEdge = []\r\n        this.final = fin\r\n        console.log(\"Queremos terminar en: \" + this.final)\r\n        let iniRec = this.ListaAdyacencia.cabeza\r\n        if(this.final == iniRec.dato.dato && this.caminoFinal.length == 0){\r\n            let egde = {from: \"null\", to: iniRec.dato.id }\r\n            arregloEdge.push(egde)\r\n            iniRec = null\r\n        }\r\n        while(iniRec!=null){\r\n            let enl = iniRec.dato.enlaces.cabeza\r\n                while(enl!= null){\r\n                    let adyman = iniRec.dato.adyacentes.cabeza\r\n                    while(adyman!=null){\r\n                        if(adyman.dato.dato == enl.dato.destino.dato){\r\n                            adyman.dato.distTotal = enl.dato.distancia\r\n                            adyman.dato.camino.insertar(iniRec.dato)\r\n                            this.subbusqueda(adyman.dato)\r\n                            adyman.dato.camino.eliminar(iniRec.dato)                        \r\n                        }\r\n                        adyman = adyman.siguiente\r\n                    }\r\n                    enl = enl.siguiente\r\n                }\r\n                if(this.caminoFinal.length!=0){\r\n                    break\r\n                }\r\n            iniRec = iniRec.siguiente\r\n        }\r\n        let borrar = this.ListaAdyacencia.cabeza\r\n        while(borrar!= null){\r\n            borrar.dato.camino = new ListaDoble()\r\n            borrar = borrar.siguiente\r\n        }\r\n        console.log(\"Al parecer funciono, la distancia final total es: \"+this.distanciaFinal)\r\n        if(this.caminoFinal.length!=0){\r\n            for(let i = 0;i<this.caminoFinal.length-1;i++){\r\n                let egde = {from: this.caminoFinal[i].id, to: this.caminoFinal[i+1].id }\r\n                arregloEdge.push(egde)\r\n                console.log(\"El camino usado fue: \" + this.caminoFinal[i].dato + \" con id \" + this.caminoFinal[i].id)\r\n            }    \r\n        }\r\n        if(arregloEdge.length == 0){\r\n            alert(\"Error1. Valor no existente. \")\r\n        }\r\n        return arregloEdge\r\n    }\r\n\r\n    //Metodo Recursivo para busqueda de camino a final\r\n    subbusqueda(nodo){\r\n        if(nodo.dato == this.final){\r\n            if(nodo.distTotal<this.distanciaFinal&&nodo.distTotal!=0){\r\n                this.caminoFinal = []\r\n                this.distanciaFinal = nodo.distTotal\r\n                nodo.camino.insertar(nodo)\r\n                let cargacamino = nodo.camino.cabeza\r\n                while (cargacamino != null){\r\n                    this.caminoFinal.push(cargacamino.dato)\r\n                    cargacamino = cargacamino.siguiente\r\n                }\r\n                nodo.camino.eliminar(nodo)\r\n                console.log(\"Hay una nueva carga de datos finales\")\r\n            }else if(this.distanciaFinal == 0){\r\n                this.distanciaFinal = nodo.distTotal\r\n                nodo.camino.insertar(nodo)\r\n                let cargacamino = nodo.camino.cabeza\r\n                while (cargacamino != null){\r\n                    this.caminoFinal.push(cargacamino.dato)\r\n                    cargacamino = cargacamino.siguiente\r\n                }\r\n                nodo.camino.eliminar(nodo)\r\n                console.log(\"Hay una nueva carga de datos finales\")\r\n            }\r\n        }else{\r\n            let nuevosenlaces = nodo.enlaces.cabeza\r\n            while(nuevosenlaces!= null){\r\n                if(nodo.camino!=null){\r\n                    let verificacioncaminodestino = nodo.camino.cabeza\r\n                    let permiso = false\r\n                    while(verificacioncaminodestino!=null){\r\n                        if(verificacioncaminodestino.dato.dato == nuevosenlaces.dato.destino.dato){\r\n                            permiso = true\r\n                            break\r\n                        }\r\n                        verificacioncaminodestino = verificacioncaminodestino.siguiente\r\n                    }\r\n                    if(permiso == false){\r\n                        let adymandar = nodo.adyacentes.cabeza\r\n                        while(adymandar!= null){\r\n                            if(adymandar.dato.dato == nuevosenlaces.dato.destino.dato){\r\n                                adymandar.dato.distTotal = nuevosenlaces.dato.distancia + nodo.distTotal\r\n                                nodo.camino.insertar(nodo)\r\n                                adymandar.dato.camino = nodo.camino\r\n                                this.subbusqueda(adymandar.dato)\r\n                                nodo.camino.eliminar(nodo)\r\n                                adymandar.dato.camino.eliminar(nodo)\r\n                                break\r\n                            }\r\n                            adymandar = adymandar.siguiente\r\n                        }\r\n                    }\r\n                }else{\r\n                    let adymandar = nodo.adyacentes.cabeza\r\n                    while(adymandar!= null){\r\n                        if(adymandar.dato.dato == nuevosenlaces.dato.dato){\r\n                            adymandar.dato.distTotal = nuevosenlaces.dato.distancia + nodo.distTotal\r\n                            nodo.camino.insertar(nodo)\r\n                            adymandar.dato.camino = nodo.camino\r\n                            this.subbusqueda(adymandar.dato)\r\n                            nodo.camino.eliminar(nodo)\r\n                            adymandar.dato.camino.eliminar(nodo)\r\n                        break\r\n                        }\r\n                        adymandar= adymandar.siguiente\r\n                    }\r\n                }\r\n                nuevosenlaces = nuevosenlaces.siguiente\r\n            }\r\n        }        \r\n    }\r\n\r\n    //Metodo de busqueda\r\n    buscar(dato){\r\n        let bool = false\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while (aux != null){\r\n            if(aux.dato.dato == dato){\r\n                bool = true\r\n                console.log(\"El dato encontrado fue \"+dato)\r\n                break\r\n            }\r\n            aux=aux.siguiente\r\n        }\r\n        if(bool == false){\r\n            console.log(\"No encontro nada\")    \r\n        }\r\n    }\r\n\r\n    //Metodo modificar\r\n    modificar(datobus, datocam){\r\n        let bool = false\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while(aux!=null){\r\n            if(aux.dato.dato == datobus){\r\n                bool = true\r\n                aux.dato.dato = datocam\r\n                console.log(\"El dato modificado fue \" + datobus + \" a \" + aux.dato.dato)\r\n                break\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n        if(bool == false){\r\n            console.log(\"No encontro nada\")    \r\n        }\r\n    }\r\n\r\n    //Metodo Eliminar\r\n    eliminar(datelim){\r\n        let bool = false\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while (aux != null){\r\n            if(aux.dato.dato == datelim){\r\n                bool = true\r\n                this.ListaAdyacencia.eliminar(aux.dato)\r\n                console.log(\"El dato eliminado fue \"+datelim)\r\n            }\r\n            let enl = aux.dato.enlaces.cabeza\r\n            while(enl!=null){\r\n                if(enl.dato.inicio.dato == datelim || enl.dato.destino.dato == datelim){\r\n                    aux.dato.enlaces.eliminar(enl.dato)\r\n                }\r\n                enl = enl.siguiente\r\n            }\r\n            let ady = aux.dato.adyacentes.cabeza\r\n            while(ady!=null){\r\n                if(ady.dato.dato == datelim){\r\n                    aux.dato.adyacentes.eliminar(ady.dato)\r\n                }\r\n                ady = ady.siguiente\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n        if(bool == false){\r\n            console.log(\"No encontro nada\")    \r\n        }\r\n    }\r\n\r\n    //Metodo de Rebubrimiento Minimo\r\n    recubrimientoMinimo(ini){\r\n        let borrar = this.ListaAdyacencia.cabeza\r\n        while(borrar!= null){\r\n            borrar.dato.camino = new ListaDoble()\r\n            borrar = borrar.siguiente\r\n        }\r\n        this.caminoFinal = []\r\n        this.inicio = ini\r\n        let costos = new ListaDoble()\r\n        console.log(\"Empezamos en: \"+this.inicio)\r\n        let iniRec = this.ListaAdyacencia.cabeza\r\n        while(iniRec!= null){\r\n            if(iniRec.dato.dato == this.inicio){\r\n                let enl = iniRec.dato.enlaces.cabeza\r\n                while(enl!= null){\r\n                    costos.insertar(enl.dato.distancia)\r\n                    enl = enl.siguiente\r\n                }\r\n                let minimodis = costos.regresarMinimo()\r\n                enl = iniRec.dato.enlaces.cabeza\r\n                while(enl!= null){\r\n                    if(iniRec.dato.dato == enl.dato.inicio.dato){\r\n                        if(enl.dato.distancia == minimodis){    \r\n                            enl.dato.destino.camino.insertar(iniRec.dato)\r\n                            let egde = {from: enl.dato.inicio.id, to: enl.dato.destino.id, label: enl.dato.distancia }\r\n                            this.caminoFinal.push(egde)\r\n                            this.seguirRecorriendo(enl.dato.destino)\r\n                            costos.eliminar(enl.dato.distancia)\r\n                            minimodis = costos.regresarMinimo()\r\n                            let enlacesmandar = iniRec.dato.enlaces\r\n                            enlacesmandar.eliminar(enl.dato)\r\n                            this.restoCaminos(costos,minimodis,enlacesmandar,iniRec.dato)\r\n                        }    \r\n                    }\r\n                    enl = enl.siguiente\r\n                }\r\n            }\r\n            iniRec = iniRec.siguiente\r\n        }\r\n        if(this.caminoFinal.length == 0){\r\n            alert(\"Error1. Valor no existente. \")\r\n        }\r\n        return this.caminoFinal\r\n    }\r\n\r\n    //submetodo Recubrimiento minimo\r\n    seguirRecorriendo(nodo){\r\n        let costos = new ListaDoble()\r\n        let enl = nodo.enlaces.cabeza\r\n        while(enl!= null){\r\n            if(nodo.dato == enl.dato.inicio.dato){\r\n                if(enl.dato.inicio.camino.contiente(enl.dato.inicio.camino, enl.dato.destino) == false){\r\n                    costos.insertar(enl.dato.distancia)        \r\n                }\r\n            }\r\n            enl = enl.siguiente\r\n        }\r\n        let minimodis = costos.regresarMinimo()\r\n        enl = nodo.enlaces.cabeza\r\n        while(enl!= null){            \r\n            if(enl.dato.distancia == minimodis){\r\n                if(enl.dato.destino.camino.size == 0){\r\n                    enl.dato.destino.camino.insertar(nodo)\r\n                    let egde = {from: enl.dato.inicio.id, to: enl.dato.destino.id, label: enl.dato.distancia }\r\n                    this.caminoFinal.push(egde)\r\n                    this.seguirRecorriendo(enl.dato.destino)\r\n                    costos.eliminar(minimodis)\r\n                    minimodis = costos.regresarMinimo()\r\n                    let enlacesmandar = nodo.enlaces\r\n                    enlacesmandar.eliminar(enl.dato)\r\n                    this.restoCaminos(costos, minimodis,enlacesmandar,nodo)    \r\n                }else{\r\n                    costos.eliminar(minimodis)\r\n                    minimodis = costos.regresarMinimo()\r\n                    let enlacesmandar = nodo.enlaces\r\n                    enlacesmandar.eliminar(enl.dato)\r\n                    this.restoCaminos(costos, minimodis,enlacesmandar,nodo)\r\n                }\r\n            }\r\n            enl = enl.siguiente\r\n        }\r\n    }\r\n\r\n    //SubSubMetodoRecorrido\r\n    restoCaminos(lisCostos,minimodis, lisEnlaces,nodo){\r\n        let enl = lisEnlaces.cabeza\r\n        while(enl!= null){\r\n            if(nodo.dato == enl.dato.inicio.dato){\r\n                if(enl.dato.distancia == minimodis){\r\n                    if(enl.dato.destino.camino.size == 0){\r\n                        enl.dato.destino.camino.insertar(enl.dato.inicio)\r\n                        let egde = {from: enl.dato.inicio.id, to: enl.dato.destino.id, label: enl.dato.distancia }\r\n                        this.caminoFinal.push(egde)\r\n                        this.seguirRecorriendo(enl.dato.destino)\r\n                        lisCostos.eliminar(minimodis)\r\n                        minimodis = lisCostos.regresarMinimo()\r\n                        let enlacesmandar = lisEnlaces\r\n                        enlacesmandar.eliminar(enl.dato)\r\n                        if(enlacesmandar.size!=0){\r\n                            this.restoCaminos(lisCostos,minimodis,enlacesmandar,nodo)\r\n                        }\r\n                    }else{\r\n                        lisCostos.eliminar(minimodis)\r\n                        minimodis = lisCostos.regresarMinimo()\r\n                        let enlacesmandar = lisEnlaces\r\n                        enlacesmandar.eliminar(enl.dato)\r\n                        if(enlacesmandar.size!=0){\r\n                            this.restoCaminos(lisCostos,minimodis,enlacesmandar,nodo)\r\n                        }\r\n                    }\r\n                }    \r\n            }\r\n            enl = enl.siguiente\r\n        }\r\n    }\r\n\r\n    //Metodo arranque para costo minimo\r\n    costoMinimo(ini, fin){\r\n        let arregloEdge = []\r\n        this.inicio = ini\r\n        this.final = fin\r\n        console.log(\"Empezamos en: \"+this.inicio)\r\n        console.log(\"Queremos terminar en: \" + this.final)\r\n        let iniRec = this.ListaAdyacencia.cabeza\r\n        while(iniRec!=null){\r\n            if(iniRec.dato.dato == this.inicio){\r\n                let enl = iniRec.dato.enlaces.cabeza\r\n                while(enl!= null){\r\n                    let adyman = iniRec.dato.adyacentes.cabeza\r\n                    while(adyman!=null){\r\n                        if(adyman.dato.dato == enl.dato.destino.dato){\r\n                            adyman.dato.distTotal = enl.dato.distancia\r\n                            adyman.dato.camino.insertar(iniRec.dato)\r\n                            this.formarcaminooptimo(adyman.dato)\r\n                            adyman.dato.camino.eliminar(iniRec.dato)                        \r\n                        }\r\n                        adyman = adyman.siguiente\r\n                    }\r\n                    enl = enl.siguiente\r\n                }\r\n            }\r\n            iniRec = iniRec.siguiente\r\n        }\r\n        let borrar = this.ListaAdyacencia.cabeza\r\n        while(borrar!= null){\r\n            borrar.dato.camino = new ListaDoble()\r\n            borrar = borrar.siguiente\r\n        }\r\n        console.log(\"Al parecer funciono, la distancia final total es: \"+this.distanciaFinal)\r\n        for(let i = 0;i<this.caminoFinal.length-1;i++){\r\n            let egde = {from: this.caminoFinal[i].id, to: this.caminoFinal[i+1].id }\r\n            arregloEdge.push(egde)\r\n            console.log(\"El camino usado fue: \" + this.caminoFinal[i].dato + \" con id \" + this.caminoFinal[i].id)\r\n        }\r\n        if(arregloEdge.length==0){\r\n            alert(\"Error1. Valor no existente.\")\r\n        }\r\n        return arregloEdge\r\n    }\r\n\r\n    //Metodo Recursivo para busqueda de camino a final\r\n    formarcaminooptimo(nodo){\r\n        if(nodo.dato == this.final){\r\n            if(nodo.distTotal<this.distanciaFinal&&nodo.distTotal!=0){\r\n                this.caminoFinal = []\r\n                this.distanciaFinal = nodo.distTotal\r\n                nodo.camino.insertar(nodo)\r\n                let cargacamino = nodo.camino.cabeza\r\n                while (cargacamino != null){\r\n                    this.caminoFinal.push(cargacamino.dato)\r\n                    cargacamino = cargacamino.siguiente\r\n                }\r\n                nodo.camino.eliminar(nodo)\r\n                console.log(\"Hay una nueva carga de datos finales\")\r\n            }else if(this.distanciaFinal == 0){\r\n                this.distanciaFinal = nodo.distTotal\r\n                nodo.camino.insertar(nodo)\r\n                let cargacamino = nodo.camino.cabeza\r\n                while (cargacamino != null){\r\n                    this.caminoFinal.push(cargacamino.dato)\r\n                    cargacamino = cargacamino.siguiente\r\n                }\r\n                nodo.camino.eliminar(nodo)\r\n                console.log(\"Hay una nueva carga de datos finales\")\r\n            }\r\n        }else{\r\n            let nuevosenlaces = nodo.enlaces.cabeza\r\n            while(nuevosenlaces!= null){\r\n                if(nodo.camino!=null){\r\n                    let verificacioncaminodestino = nodo.camino.cabeza\r\n                    let permiso = false\r\n                    while(verificacioncaminodestino!=null){\r\n                        if(verificacioncaminodestino.dato.dato == nuevosenlaces.dato.destino.dato){\r\n                            permiso = true\r\n                            break\r\n                        }\r\n                        verificacioncaminodestino = verificacioncaminodestino.siguiente\r\n                    }\r\n                    if(permiso == false){\r\n                        let adymandar = nodo.adyacentes.cabeza\r\n                        while(adymandar!= null){\r\n                            if(adymandar.dato.dato == nuevosenlaces.dato.destino.dato){\r\n                                adymandar.dato.distTotal = nuevosenlaces.dato.distancia + nodo.distTotal\r\n                                nodo.camino.insertar(nodo)\r\n                                adymandar.dato.camino = nodo.camino\r\n                                this.formarcaminooptimo(adymandar.dato)\r\n                                nodo.camino.eliminar(nodo)\r\n                                adymandar.dato.camino.eliminar(nodo)\r\n                                break\r\n                            }\r\n                            adymandar = adymandar.siguiente\r\n                        }\r\n                    }\r\n                }else{\r\n                    let adymandar = nodo.adyacentes.cabeza\r\n                    while(adymandar!= null){\r\n                        if(adymandar.dato.dato == nuevosenlaces.dato.dato){\r\n                            adymandar.dato.distTotal = nuevosenlaces.dato.distancia + nodo.distTotal\r\n                            nodo.camino.insertar(nodo)\r\n                            adymandar.dato.camino = nodo.camino\r\n                            this.formarcaminooptimo(adymandar.dato)\r\n                            nodo.camino.eliminar(nodo)\r\n                            adymandar.dato.camino.eliminar(nodo)\r\n                        break\r\n                        }\r\n                        adymandar= adymandar.siguiente\r\n                    }\r\n                }\r\n                nuevosenlaces = nuevosenlaces.siguiente\r\n            }\r\n        }        \r\n    }\r\n\r\n    //Metodo Carga\r\n    cargar(arreglo,nombre) {\r\n        arreglo.map(elemento=> {\r\n            let vertice = elemento.vertice\r\n            if(nombre === \"Grafo Dirigido\"){\r\n                if(elemento.aristas.length != 0){    \r\n                    elemento.aristas.map(e =>{\r\n                        this.insertar(vertice,vertice, e.arista, e.distancia)\r\n                    })\r\n                }\r\n            }else{\r\n                if(elemento.aristas.length != 0){    \r\n                    elemento.aristas.map(e =>{\r\n                        this.insertarNoDirigido(vertice,vertice, e.arista, e.distancia)\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    //Metodo Guardar\r\n    guardar(){\r\n        let arreglo = []\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while(aux!=null){\r\n            let tmp = aux.dato.enlaces.cabeza\r\n            while(tmp!= null){\r\n                let arista = []\r\n                arista.push({arista:tmp.dato.destino.dato , distancia: tmp.dato.distancia.toString()})\r\n                let dato = {vertice: tmp.dato.inicio.dato, aristas:arista}\r\n                arreglo.push(dato)\r\n                tmp = tmp.siguiente\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n        \r\n        return arreglo\r\n    }\r\n    //Carga de array para graficacion de nodos\r\n    graficarNodos(){\r\n        let arreglo = []\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while(aux!=null){\r\n            let dato = {id: aux.dato.id, label:aux.dato.dato.toString(),}\r\n            arreglo.push(dato)\r\n            aux = aux.siguiente\r\n        }\r\n        return arreglo\r\n    }\r\n\r\n    //Carga de array para graficacion de enlaces\r\n    graficarEnlaces(){\r\n        let arregloEdge = []\r\n        let aux = this.ListaAdyacencia.cabeza\r\n        while(aux!=null){\r\n            let tmp = aux.dato.enlaces.cabeza\r\n            while(tmp!= null){\r\n                let egde = {from: tmp.dato.inicio.id, to: tmp.dato.destino.id , label: tmp.dato.distancia.toString()}\r\n                arregloEdge.push(egde)\r\n                tmp = tmp.siguiente\r\n            }\r\n            aux = aux.siguiente\r\n        }\r\n        return arregloEdge\r\n    } \r\n}\r\n\r\nexport default ListaAdyacencia;","class Hamming{\r\n    constructor(){\r\n        this.tabla = [];\r\n        this.dato = null;\r\n        this.ecriptado = null;\r\n    }\r\n\r\n    cargar(datos){\r\n        this.tabla = []\r\n        this.dato = datos\r\n        let tamanio = datos.length;\r\n        let contadorPotencia = 1 ;\r\n        let potencia = 1;\r\n/*se resta la potencia y el contador de numeros de potencia para encontrar\r\nun tamaño adecuado de arreglo para realizar la tabla*/\r\n        while((potencia-contadorPotencia)<= tamanio){\r\n            potencia *=2;\r\n            contadorPotencia ++;\r\n        }\r\n        let tamArreglo = (contadorPotencia-1) + tamanio;\r\n/*Inicializamos dos encabezados por defecto, uno que sera el resultado final\r\ny otro que sera la referencia de que dato y que potencia estamos usando */\r\n        let cabezaDatos = [];\r\n        let cabeza = [];\r\n        let refPotencia = 1;\r\n        let contadorCadena = 0;\r\n        for(let i = 0; i<= tamArreglo; i++){\r\n            if(i == 0){\r\n                cabezaDatos[0] = \"Palabra\";\r\n            }else if(i == refPotencia){\r\n                cabezaDatos[i] = \"\"\r\n                refPotencia *=2;\r\n            }else{\r\n                cabezaDatos[i] = datos.charAt(contadorCadena);\r\n                contadorCadena++;\r\n            }\r\n        }\r\n        refPotencia = 1;\r\n        let p =\"p\";\r\n        let d = \"d\";\r\n        let contPotencia = 1;\r\n        let contArreglo = 1;\r\n        \r\n\r\n        for(let i = 0; i<= tamArreglo; i++){\r\n            if(i == 0){\r\n                cabeza[0] = \"Datos\";\r\n            }else if(i == refPotencia){\r\n                cabeza[i] = \"p\" + contPotencia;\r\n                contPotencia *=2;\r\n                refPotencia *=2;\r\n            }else{\r\n                cabeza[i] = \"d\" + contArreglo;\r\n                contArreglo ++;                \r\n            }\r\n\r\n        }\r\n// Se agregan los encabezados a la tabla;\r\n        this.tabla.push(cabezaDatos);\r\n        this.tabla.push(cabeza);\r\n        \r\n        this.ObtenerHamming(contadorPotencia-1,tamArreglo)\r\n        console.table(this.tabla)\r\n        \r\n        \r\n    }\r\n\r\n     ObtenerHamming(Potencia,tamArreglo){\r\n        let potenciaIndice = 1;// Sirve para denominar los simbolos P de cada arreglo\r\n        for(let i =0;  i<Potencia; i++){\r\n            let arregloNuevo = [];            \r\n            let refPotencia =1;// Sirve como referencia de las posiciones de cada potencia en la tabla\r\n            let contadorPares = 0;\r\n            \r\n            for(let j =0; j<= tamArreglo; j++){\r\n                if(j == 0){\r\n                    arregloNuevo[0] = \"p\" + potenciaIndice;\r\n                }else if(j == potenciaIndice){                    \r\n                    let contadorUnos = 0 // cuenta el numero de unos                    \r\n                    let contadorInsercion = j /* donde se colocan los valores\r\n                    dependiendo de que fila de la tabla se lea*/\r\n                    while(contadorInsercion<= tamArreglo){\r\n                        let contadorRelleno = 0\r\n                        while(contadorRelleno < potenciaIndice){\r\n                            if(contadorInsercion <= tamArreglo){\r\n                                arregloNuevo[contadorInsercion]= this.tabla[0][contadorInsercion];\r\n                                \r\n                                if(this.tabla[0][contadorInsercion] == \"1\"){\r\n                                    contadorUnos++;                                \r\n                                }                                                            \r\n                            }\r\n                            contadorRelleno++;\r\n                            contadorInsercion++;                            \r\n                        }\r\n                        contadorInsercion += potenciaIndice;\r\n                    }\r\n                    if(contadorUnos%2 == 0){\r\n                        arregloNuevo[j]= this.tabla[0][j] =\"0\";                         \r\n                    }else{\r\n                        arregloNuevo[j]= this.tabla[0][j] =\"1\";\r\n                        \r\n                    }                  \r\n                }    \r\n                \r\n\r\n            }\r\n            refPotencia *= 2;\r\n            potenciaIndice *=2\r\n            this.tabla.push(arregloNuevo);\r\n        }\r\n\r\n        let resultado = \"\";\r\n\r\n        for (let x = 1; x < this.tabla[0].length; x++) {\r\n            resultado += this.tabla[0][x]\r\n            \r\n        }\r\n\r\n        this.ecriptado = resultado\r\n\r\n    }\r\n    \r\n    graficarencabezados(){\r\n        let arregloencabeazados = []\r\n\r\n\r\n        arregloencabeazados = this.tabla[0]\r\n\r\n        return arregloencabeazados\r\n    }\r\n\r\n    graficardatos(){\r\n        let arregloDatos = []\r\n\r\n        for (let x = 1; x < this.tabla.length; x++) {\r\n            \r\n            arregloDatos.push(this.tabla[x])\r\n            \r\n        }\r\n        return arregloDatos\r\n    }\r\n\r\n    guardar(){\r\n        let resultado = \"\";\r\n\r\n        for (let x = 1; x < this.tabla[0].length; x++) {\r\n            resultado += this.tabla[0][x]\r\n            \r\n        }\r\n\r\n        return resultado\r\n    }\r\n    \r\n    }\r\n\r\n    export default Hamming;","class Nodo{\r\n    constructor(){\r\n        this.valor = null;\r\n        this.codigo = null;\r\n        this.frecuencia = 0;\r\n        this.izquierda = null;\r\n        this.derecha = null;\r\n        this.siguiente = null;\r\n\r\n    }\r\n}\r\n\r\nclass Lista{\r\n    constructor(){\r\n        this.primero = null;   \r\n        this.contador = 0;    \r\n    }  \r\n\r\n\r\n    agregarFinalValor(nodo) {\r\n        //crear un nodo para agregar a la lista\r\n        nodo.frecuencia ++;        \r\n        if (this.primero == null) {\r\n            this.primero = nodo;\r\n        }\r\n        else {\r\n            // Busca el final del arreglo e ingresa el nodo ahi\r\n            let temporal = this.primero;\r\n            let repetido = false;\r\n            while (temporal.siguiente != null) {\r\n                if(temporal.valor == nodo.valor){\r\n                    temporal.frecuencia ++;\r\n                    repetido = true;\r\n                    break;\r\n                }\r\n                temporal = temporal.siguiente;\r\n            }  \r\n            if(repetido == false && temporal.valor == nodo.valor){\r\n                temporal.frecuencia ++;                \r\n            }else if(repetido == false){\r\n                temporal.siguiente = nodo;\r\n            }          \r\n            \r\n        }\r\n    }\r\n\r\n    agregarOrdenadoFrecuencia(nodo){\r\n        \r\n        if(this.primero == null){\r\n            this.primero = nodo;\r\n        }else{\r\n            let temporal = this.primero;\r\n            \r\n            while(temporal.siguiente != null ){\r\n                if(temporal.frecuencia <= nodo.frecuencia && temporal.siguiente.frecuencia >= nodo.frecuencia){\r\n                    nodo.siguiente = temporal.siguiente;\r\n                    temporal.siguiente = nodo;   \r\n                    break;                 \r\n                }    \r\n                if(temporal == this.primero && temporal.frecuencia >= nodo.frecuencia){\r\n                    nodo.siguiente = this.primero;\r\n                    this.primero = nodo;\r\n                    break;\r\n                    \r\n                }                           \r\n                temporal = temporal.siguiente;\r\n\r\n            }if(temporal.siguiente == null && temporal.frecuencia <= nodo.frecuencia){\r\n                temporal.siguiente = nodo; \r\n            \r\n            }else if(temporal.siguiente == null && temporal.frecuencia >= nodo.frecuencia && temporal == this.primero){\r\n                nodo.siguiente = this.primero;\r\n                this.primero = nodo;\r\n            }  \r\n        }\r\n    }\r\n\r\n    imprimir(){\r\n        \r\n        let temporal = this.primero;\r\n        while(temporal != null){\r\n            console.log(temporal.valor +temporal.frecuencia)\r\n            temporal = temporal.siguiente;\r\n        }\r\n    }\r\n\r\n    imprimirCodigos(){\r\n        \r\n        let temporal = this.primero;\r\n        while(temporal != null){\r\n            console.log(temporal.valor + \"Codigo\" + temporal.codigo)\r\n            temporal = temporal.siguiente;\r\n        }\r\n    }\r\n\r\n    recorrerCodigos(){\r\n        let temporal = this.primero;\r\n        let arreglo = []\r\n        while(temporal != null){\r\n            let dato = []\r\n            dato.push(temporal.valor)\r\n            dato.push(temporal.codigo)\r\n            arreglo.push(dato)\r\n            temporal = temporal.siguiente;\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n\r\n    \r\n    \r\n    buscarValor(valor) {\r\n        if (this.primero == null  ) {\r\n            console.log(\"no hay elementos en la lista\");           \r\n\r\n        }\r\n        else {\r\n            let temporal = this.primero;\r\n            while(temporal != null){ \r\n                if(temporal.valor == valor){\r\n                    return temporal.codigo;  \r\n                }\r\n                temporal = temporal.siguiente;\r\n            }\r\n        }\r\n    }\r\n\r\n    eliminarFrecuencia(frecuencia) {\r\n        if (this.primero == null) {\r\n            console.log(\"No hay nada en las lista\")\r\n        }\r\n        else {\r\n            let temporal = this.primero;\r\n            while (temporal != null) {\r\n                if (temporal.frecuencia == frecuencia) {\r\n                    temporal = temporal.siguiente;\r\n                }\r\n                else {\r\n                    if (temporal.siguiente != null) {\r\n                        if (temporal.siguiente.frecuencia == frecuencia ) {\r\n                            let siguienteT = temporal.siguiente;\r\n                            temporal.siguiente = siguienteT.siguiente;\r\n                            siguienteT.siguiente = null;\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                temporal = temporal.siguiente;\r\n            }\r\n        }\r\n    }\r\n    \r\n    eliminarInicio(){\r\n        let inicio = this.primero;\r\n        this.primero = this.primero.siguiente\r\n        return inicio;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nclass AlgoritmoHuffman{\r\n    constructor(){\r\n        this.texto = null;\r\n        this.lista = new Lista();\r\n        this.listaOrdenada = new Lista();// la raiz \r\n        this.listaCodigos = new Lista();\r\n        this.textoCodificado = null;\r\n        \r\n        this.dato = null;\r\n        this.ecriptado = null;\r\n    }\r\n\r\n    cargar(texto){\r\n        let info = texto\r\n        this.texto = texto;\r\n        this.dato = texto;\r\n        this.lista = new Lista();\r\n        this.listaOrdenada = new Lista();// la raiz \r\n        this.listaCodigos = new Lista();\r\n        for(let i = 0; i < info.length; i++){\r\n            let nodo = new Nodo()\r\n            nodo.valor = info.charAt(i)\r\n            this.lista.agregarFinalValor(nodo)            \r\n        }\r\n        //this.lista.imprimir();    \r\n        this.reasignarValores();  \r\n        this.generaCodificado();\r\n        console.log(this.textoCodificado)\r\n    }\r\n\r\n\r\n    generaCodificado(){\r\n        let textoCodi = \"\";\r\n        let info = this.texto;\r\n        for(let i = 0; i< info.length; i++){\r\n            let codigo = this.listaCodigos.buscarValor(info.charAt(i));\r\n            textoCodi += codigo\r\n        }\r\n        this.textoCodificado = textoCodi;\r\n        this.ecriptado = this.textoCodificado;\r\n    }\r\n\r\n    reasignarValores(){\r\n        this.ordenar();\r\n        this.crearArbol();\r\n        this.listaOrdenada.imprimir();\r\n        this.crearCodigos()       \r\n    }\r\n\r\n    ordenar() {\r\n            // Crea una nueva lista Ordenando las frecuencias de menor a mayor\r\n            let temporal = this.lista.primero;\r\n            while(temporal != null){ \r\n                let nodo = new Nodo()\r\n                nodo.valor = temporal.valor;\r\n                nodo.frecuencia = temporal.frecuencia;\r\n                this.listaOrdenada.agregarOrdenadoFrecuencia(nodo)\r\n                temporal = temporal.siguiente;\r\n            }        \r\n        }\r\n\r\n    crearArbol(){\r\n        // fusionar nodos hasta que la lista sea un solo arbol\r\n        let temporal = this.listaOrdenada.primero\r\n        while(this.listaOrdenada.primero.siguiente != null){\r\n            let nodoiz = this.listaOrdenada.eliminarInicio();\r\n            let nododer = this.listaOrdenada.eliminarInicio();\r\n            // El nodo padre es el nodo a reinsertar en la lista con sus hojas izq y der\r\n            let nodoPadre = new Nodo();\r\n            nodoPadre.frecuencia = (nodoiz.frecuencia + nododer.frecuencia)\r\n\r\n            let hijoIzq = new Nodo();\r\n            hijoIzq.valor = nodoiz.valor;\r\n            hijoIzq.frecuencia = nodoiz.frecuencia;\r\n            hijoIzq.derecha = nodoiz.derecha;\r\n            hijoIzq.izquierda = nodoiz.izquierda;\r\n\r\n            let hijoDer = new Nodo();\r\n            hijoDer.valor = nododer.valor;\r\n            hijoDer.frecuencia = nododer.frecuencia;\r\n            hijoDer.derecha = nododer.derecha;\r\n            hijoDer.izquierda = nododer.izquierda; \r\n\r\n            nodoPadre.derecha = hijoDer;\r\n            nodoPadre.izquierda = hijoIzq;\r\n\r\n            this.listaOrdenada.agregarOrdenadoFrecuencia(nodoPadre);\r\n        }\r\n    }    \r\n\r\n    crearCodigos(){\r\n        let codigo = \"\"\r\n        this.RecorrerYCrear(this.listaOrdenada.primero, codigo)\r\n        this.listaCodigos.imprimirCodigos();\r\n\r\n    }\r\n    RecorrerYCrear(rama, codigo){\r\n        \r\n        if(rama.valor != null){\r\n            let nodo = new Nodo();\r\n            nodo.valor = rama.valor\r\n            nodo.codigo = codigo;\r\n            this.listaCodigos.agregarFinalValor(nodo);\r\n        }\r\n        if(rama.izquierda != null){\r\n            this.RecorrerYCrear(rama.izquierda, codigo + \"0\");\r\n        }\r\n        if(rama.derecha != null){\r\n            this.RecorrerYCrear(rama.derecha,codigo + \"1\");\r\n\r\n        }\r\n        \r\n    }\r\n \r\n\r\n    graficarencabezados(){\r\n        let arregloencabeazados = []\r\n        arregloencabeazados.push(\"Letra\")\r\n        arregloencabeazados.push(\"Codigo\")\r\n        return arregloencabeazados\r\n    }\r\n\r\n    graficardatos(){\r\n        let arregloDatos = this.listaCodigos.recorrerCodigos()\r\n        return arregloDatos\r\n    }\r\n\r\n    guardar(){\r\n        return this.ecriptado;\r\n    }\r\n\r\n\r\n} \r\n\r\nexport default AlgoritmoHuffman;","class LZW {\r\n    constructor() {\r\n        this.contador = 0;\r\n        this.diccionario = new Map();\r\n        this.salida = [];\r\n        \r\n        this.dato = null;\r\n        this.ecriptado = null;\r\n    }\r\n\r\n    cargar(mensaje) {\r\n        this.contador = 0;\r\n        this.dato = mensaje\r\n        this.diccionario = new Map();\r\n        this.salida = [];\r\n        this.iniciarDiccionario(mensaje)\r\n        // w vacia\r\n        let w = \"\";\r\n        /*cada caracter k en el mensaje se lee en el for y se compara \r\n        si existe el valor k en el diccionario*/\r\n        for (let k of mensaje) {\r\n            let enDiccionario = false;\r\n            let wk = w + k;\r\n            for (let letra of this.diccionario.keys()) {\r\n                if (wk == letra) {\r\n                    enDiccionario = true;\r\n                    break;\r\n                }                \r\n            }\r\n            if (enDiccionario == true) {\r\n                w = wk;\r\n            /*en caso de que no exista se agrega al diccionario ademas de\r\n            colocar la llave del valor w en la salida*/\r\n            } else {\r\n\r\n                this.diccionario.set(wk, this.contador++)\r\n                this.salida.push(this.diccionario.get(w))\r\n                w = k;\r\n            }\r\n\r\n        }\r\n        this.salida.push(this.diccionario.get(w));\r\n\r\n        this.ecriptado = this.resultado();\r\n    }\r\n\r\n\r\n    resultado(){\r\n        let result = \"\"\r\n\r\n        for (let x = 0; x < this.salida.length; x++) {\r\n            result += this.salida[x]\r\n            \r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n\r\n    guardar(){\r\n        return this.ecriptado\r\n    }\r\n\r\n\r\n// inicializar el diccionario con los valores\r\n    iniciarDiccionario(mensaje) {\r\n        for (let i = 0; i < mensaje.length; i++) {\r\n            let repetido = false;\r\n            for (let letra of this.diccionario.keys()) {\r\n                if (mensaje.charAt(i) == letra) {\r\n                    repetido = true;\r\n                }\r\n            }\r\n            if (repetido == false) {\r\n                this.diccionario.set(mensaje.charAt(i), this.contador);\r\n                this.contador++;\r\n            }\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n    graficarencabezados(){\r\n        let arregloencabeazados = []\r\n        arregloencabeazados.push(\"Llave\")\r\n        arregloencabeazados.push(\"valor\")\r\n        return arregloencabeazados\r\n    }\r\n    graficardatos(){\r\n        let arregloLlave = [];\r\n        let arregloValor = [];\r\n\r\n        let arreglogeneral = [];\r\n\r\n        for(let llave of this.diccionario.keys()){\r\n            arregloLlave.push(llave)\r\n        }\r\n        for(let valor of this.diccionario.values()){\r\n            arregloValor.push(valor)\r\n        }\r\n\r\n        for (let x = 0; x < arregloLlave.length; x++) {\r\n            let dato = []\r\n            dato.push(arregloLlave[x])\r\n            dato.push(arregloValor[x])\r\n\r\n            arreglogeneral.push(dato)\r\n        }\r\n\r\n        return arreglogeneral\r\n    }\r\n}\r\n\r\nexport default  LZW;","class Feistel{\r\n    constructor(){\r\n        this.entrada = null;\r\n        this.salida = null;\r\n        this.tablaIzquierda = [];\r\n        this.tablaDerecha = [];   \r\n\r\n        this.dato = null;\r\n        this.ecriptado = null;\r\n    }\r\n\r\n    cargar(datos, llave, numeroPasadas){\r\n        this.tablaIzquierda = [];\r\n        this.tablaDerecha = [];  \r\n        this.dato = datos\r\n        let left = \"\";\r\n        let right = \"\";\r\n        for(let i = 0; i < datos.length; i++){\r\n            if(i< (datos.length/2)){\r\n                left += datos.charAt(i)                \r\n            }else if(i>= (datos.length/2)){\r\n                right += datos.charAt(i)\r\n            }\r\n        } \r\n        this.tablaIzquierda.push(left);\r\n        this.tablaDerecha.push(right); \r\n        this.ciclosCodificar(left, right,llave, numeroPasadas);\r\n        this.imprimirTablas();\r\n        this.ecriptado = this.tablaIzquierda[this.tablaIzquierda.length-1] + this.tablaDerecha[this.tablaDerecha.length-1]\r\n\r\n    }\r\n\r\n    ciclosCodificar(left, right, llave, ciclos){\r\n        if(llave.length != left.length){\r\n            let aux = \"\";\r\n            \r\n            let diff = (left.length - llave.length);\r\n            for(let i =0; i< diff; i++){\r\n                aux += \"0\";\r\n            }\r\n            llave = aux + llave;\r\n        }\r\n        for(let i = 0; i < ciclos; i++){\r\n            let xor_uno = \"\";\r\n            let xor_dos = \"\"; \r\n            \r\n            for(let j = 0; j< left.length; j++){  \r\n                             \r\n                if(right.charAt(j) != llave.charAt(j)){\r\n                    xor_uno += \"1\"\r\n                }else{\r\n                    xor_uno += \"0\"\r\n                }\r\n            }\r\n\r\n            for(let j = 0; j< left.length; j++){                \r\n                if(xor_uno.charAt(j) != left.charAt(j)){\r\n                    xor_dos += \"1\"\r\n                }else{\r\n                    xor_dos += \"0\"\r\n                }\r\n            }    \r\n\r\n           /*  this.tablaIzquierda.push(right) \r\n            */ this.tablaDerecha.push(llave);\r\n            this.tablaDerecha.push(xor_uno);  \r\n            this.tablaDerecha.push(left);   \r\n\r\n            let auxkey = \"\";\r\n            let auxder = right;\r\n            \r\n\r\n            let auxChar = llave.charAt(0);\r\n            llave = llave.slice(1,llave.length);\r\n            llave = llave += auxChar; \r\n\r\n            left = right;\r\n            right = xor_dos;\r\n            this.tablaIzquierda.push(left);\r\n            this.tablaDerecha.push(right);\r\n            }        \r\n    }\r\n\r\n    imprimirTablas(){\r\n        for(let dato of this.tablaDerecha){\r\n            console.log(\"                \"+ dato);\r\n            \r\n        }\r\n        for(let dato of this.tablaIzquierda){\r\n            console.log(dato);\r\n        }\r\n    }\r\n\r\n    graficarencabezados(){\r\n        let arregloencabeazados = []\r\n        arregloencabeazados.push(\"Izquierda\")\r\n        arregloencabeazados.push(\"Derecha\")\r\n        return arregloencabeazados\r\n    }\r\n\r\n    graficardatos(){\r\n        let arreglo = []\r\n        let contador = 0;\r\n        let contadorTabla = 0;\r\n        for (let x = 0; x < this.tablaDerecha.length; x++) {\r\n            let dato = []\r\n            if(contador == 0){\r\n                dato.push(this.tablaIzquierda[contadorTabla])\r\n                contadorTabla++;\r\n            }else{\r\n                dato.push(\"\")\r\n            }\r\n            dato.push(this.tablaDerecha[x])\r\n            arreglo.push(dato)\r\n            contador++;\r\n            if(contador === 4){\r\n                contador = 0;\r\n            }\r\n\r\n        }\r\n        console.log(this.tablaIzquierda)\r\n        console.log(arreglo)\r\n        return arreglo\r\n    }\r\n\r\n    guardar(){\r\n        return this.ecriptado;\r\n    }\r\n\r\n}\r\n\r\nexport default Feistel;","\r\nimport { Button, Header, Icon, Modal,Menu,Input,Select } from 'semantic-ui-react'\r\nimport './modal.css'\r\nimport React, { Component } from 'react'\r\nimport Cola from '../estructuras/EstructurasLineales/Cola'\r\nimport ColaPrioridad from '../estructuras/EstructurasLineales/ColaPrioridad'\r\nimport ABB from '../estructuras/Estructuras_Arboreas/ABB'\r\nimport ArbolAVL from '../estructuras/Estructuras_Arboreas/AVL'\r\n\r\nimport Pila from '../estructuras/EstructurasLineales/Pila'\r\nimport ListaCirD from '../estructuras/EstructurasLineales/ListaCirD'\r\nimport ListaCS from '../estructuras/EstructurasLineales/ListaCirS'\r\n\r\n\r\nimport ListaSimple from '../estructuras/EstructurasLineales/ListaSimple'\r\nimport ListaDoble from '../estructuras/EstructurasLineales/ListaDoble'\r\n\r\nimport MerkleTree from '../estructuras/Estructuras_Arboreas/merkleTree'\r\nimport ArbolB from '../estructuras/Estructuras_Arboreas/ArbolB'\r\n\r\nimport ArbolBplus from '../estructuras/Estructuras_Arboreas/ArbolBplus'\r\n\r\n\r\nimport TablaHashAbierta from '../estructuras/EstructurasNoLineales/TablaHashAbierta'\r\nimport TablaHashCerrada from '../estructuras/EstructurasNoLineales/TablaHashCerrada'\r\nimport Matriz from '../estructuras/EstructurasCompuestas/MatrizDis'\r\nimport ListaAdyacencia from '../estructuras/EstructurasNoLineales/ReccProfAnch'\r\nimport CostoUniforme from '../estructuras/EstructurasNoLineales/CostoUniforme'\r\n\r\nconst countryOptions = [\r\n    { key: 'ini', value: 'Inicio', text: 'Inicio' },\r\n    { key: 'fin', value: 'Final', text: 'Final' },\r\n    { key: 'ord', value: 'Ordenado', text: 'Ordenado' },\r\n    \r\n  ]\r\n\r\nexport default class Agregar extends Component {\r\n\r\n    state={\r\n           open: false,\r\n           textoDato: \"\" ,\r\n           prioridad: \"\",\r\n           opciones: null\r\n    }\r\n\r\n\r\n    swtEdd=()=>{\r\n        let nombre = this.props.nombre\r\n        let edd = this.props.edd\r\n        let dato = this.state.textoDato\r\n        let prioridad = this.state.prioridad\r\n        let opciones = this.state.opciones\r\n        let splitarr;\r\n        let i;\r\n        let j;\r\n        let tamaño;\r\n        let funcion;\r\n        let colision;\r\n                \r\n        switch(nombre){\r\n            case \"Pila\" :\r\n                if(edd == null){\r\n                    edd = new Pila();\r\n                }\r\n                edd.agregar(dato)\r\n                break\r\n            case \"Cola\":\r\n                if(edd == null){\r\n                    edd = new Cola();\r\n                }\r\n                edd.Agregar(dato)\r\n                break\r\n            case \"Cola de prioridad\":\r\n                if(edd == null){\r\n                    edd = new ColaPrioridad();\r\n                }\r\n                edd.Agregar(dato,prioridad)\r\n                break\r\n            case \"Lista simplemente enlazada\":\r\n    \r\n                if(edd == null){\r\n                    edd = new ListaSimple();\r\n                }\r\n                edd.agregar(dato,opciones)\r\n                break\r\n    \r\n            case \"Lista doblemente enlazada\":\r\n    \r\n                if(edd == null){\r\n                    edd = new ListaDoble();\r\n                }\r\n                edd.agregar(dato,opciones)\r\n                break\r\n    \r\n            case \"Lista circular simplemente enlazada\":\r\n    \r\n                if(edd == null){\r\n                    edd = new ListaCS();\r\n                }\r\n                edd.agregar(dato,opciones)\r\n                break\r\n    \r\n            case \"Lista circular doblemente enlazada\":\r\n    \r\n                if(edd == null){\r\n                    edd = new ListaCirD();\r\n                }\r\n                edd.agregar(dato,opciones) \r\n                break\r\n            case \"Arbol ABB\":\r\n    \r\n                if(edd == null){\r\n                    edd = new ABB();\r\n                }\r\n                edd.insertar(dato) \r\n                break\r\n            case \"Arbol AVL\":\r\n    \r\n                if(edd == null){\r\n                    edd = new ArbolAVL();\r\n                }\r\n                edd.agregar(dato) \r\n                edd.recorridoPre(edd.raiz)\r\n                break\r\n            case \"Arbol B\":\r\n    \r\n                if(edd == null){\r\n                    edd = new ArbolB(this.state.opciones);\r\n                }\r\n                edd.insertar(dato) \r\n                break\r\n            case \"Arbol B+\":\r\n\r\n                if(edd == null){\r\n                    edd = new ArbolBplus(this.state.opciones);\r\n                }\r\n                edd.agregar(dato)\r\n            break\r\n            case \"Arbol Merkle\":\r\n\r\n                if(edd == null){\r\n                    edd = new MerkleTree(this.state.opciones);\r\n                }\r\n            edd.insertar(dato)\r\n            break\r\n        case \"Tabla Hash Abierta\":\r\n\r\n            if(edd == null){\r\n                splitarr = opciones.split(\",\")\r\n                tamaño = i = parseInt(splitarr[0])== NaN ? splitarr[0]: parseInt(splitarr[0])\r\n                i = parseInt(splitarr[1])== NaN ? splitarr[1]: parseInt(splitarr[1])\r\n                j = parseInt(splitarr[2])== NaN ? splitarr[2]: parseInt(splitarr[2])\r\n                funcion = splitarr[3]\r\n                edd = new TablaHashAbierta(tamaño,i,j,funcion);\r\n            }\r\n            edd.agregar(dato)\r\n            break\r\n        case \"Tabla Hash Cerrada\":\r\n            splitarr = opciones.split(\",\")\r\n            tamaño = i = parseInt(splitarr[0])== NaN ? splitarr[0]: parseInt(splitarr[0])\r\n            i = parseInt(splitarr[1])== NaN ? splitarr[1]: parseInt(splitarr[1])\r\n            j = parseInt(splitarr[2])== NaN ? splitarr[2]: parseInt(splitarr[2])\r\n            funcion = splitarr[3]\r\n            colision = splitarr[4]\r\n            if(edd == null){\r\n                edd = new TablaHashCerrada(tamaño,i,j,funcion,colision);\r\n            }\r\n            edd.agregar(dato)\r\n            break;\r\n        case \"Col Major\":\r\n                let arreglosplit = opciones.split(\",\")\r\n                let x = arreglosplit[0]\r\n                let y = arreglosplit[1]\r\n                edd.actualizar(x,y,nombre,dato)\r\n            break;\r\n        case \"Row Major\":    \r\n                 splitarr = opciones.split(\",\")\r\n                 i = splitarr[0]\r\n                 j = splitarr[1]\r\n                edd.actualizar(i,j,nombre,dato)\r\n            break;\r\n         case \"Matriz Dispersa\":\r\n                if(edd === null){\r\n                    edd = new Matriz();\r\n                }\r\n                 splitarr = opciones.split(\",\")\r\n                 i = parseInt(splitarr[0])== NaN ? splitarr[0]: parseInt(splitarr[0])\r\n                 j = parseInt(splitarr[1])== NaN ? splitarr[1]: parseInt(splitarr[1])\r\n                edd.insertar(dato,i,j)\r\n            break\r\n        case \"Grafo Dirigido\":\r\n                if(edd === null){\r\n                    edd = new ListaAdyacencia();\r\n                }\r\n                 splitarr = dato.split(\",\")\r\n                 i = parseInt(splitarr[0])== NaN ? splitarr[0]: parseInt(splitarr[0])\r\n                 j = parseInt(splitarr[1])== NaN ? splitarr[1]: parseInt(splitarr[1])\r\n                edd.insertar(opciones,opciones,i,j)\r\n            break\r\n        case \"Grafo No Dirigido\":\r\n                if(edd === null){\r\n                    edd = new ListaAdyacencia();\r\n                }\r\n                splitarr = dato.split(\",\")\r\n                 i = parseInt(splitarr[0])== NaN ? splitarr[0]: parseInt(splitarr[0])\r\n                 j = parseInt(splitarr[1])== NaN ? splitarr[1]: parseInt(splitarr[1])\r\n                edd.insertarNoDirigido(opciones,opciones,i,j)\r\n            break;\r\n        case \"Algoritmo de costo uniforme\":\r\n                if(edd === null){\r\n                    edd = new CostoUniforme();\r\n                }\r\n                splitarr = dato.split(\",\")\r\n                 i = parseInt(splitarr[0])== NaN ? splitarr[0]: parseInt(splitarr[0])\r\n                 j = parseInt(splitarr[1])== NaN ? splitarr[1]: parseInt(splitarr[1])\r\n                edd.insertarNoDirigido(opciones,opciones,i,j)\r\n            break;\r\n            default:\r\n                break;\r\n        }\r\n        this.props.obtenerDatos(edd);\r\n    }\r\n\r\n    obtenerText = e =>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    render() {\r\n       if(this.props.nombre=== \"Cola de prioridad\"){\r\n        return (\r\n            <Modal\r\n                className=\"modalAgregar\"\r\n                basic\r\n                onClose={() => this.setState({open: false})}\r\n                onOpen={() =>  this.setState({open: true})}\r\n                open={this.state.open}\r\n                size='small'\r\n                trigger={<Menu.Item>Agregar</Menu.Item>}\r\n                >\r\n                <Header icon>\r\n                    <Icon name='add' />\r\n                    Agregar Dato\r\n                </Header>\r\n                <Modal.Content>\r\n                        <Input className=\"inputAgregar\" type=\"text\" name=\"textoDato\" value={this.state.textoDato}  fluid placeholder=\"agregar dato\" onChange={this.obtenerText}/>\r\n                        <br/>\r\n                        <Input className=\"inputAgregar\" type=\"text\" name=\"prioridad\" value={this.state.prioridad}  fluid placeholder=\"agregar prioridad\" onChange={this.obtenerText}/>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() =>  this.setState({open: false})}>\r\n                    <Icon name='remove' /> No\r\n                    </Button>\r\n                    <Button className=\"buttonAgregar\" color='green' inverted onClick={this.swtEdd}>\r\n                    <Icon name='checkmark' /> Si\r\n                    </Button>\r\n                </Modal.Actions>\r\n                </Modal>\r\n        )\r\n\r\n       }else if(this.props.nombre=== \"Lista simplemente enlazada\" ||\r\n                this.props.nombre=== \"Lista doblemente enlazada\" ||\r\n                this.props.nombre=== \"Lista circular simplemente enlazada\" ||\r\n                this.props.nombre=== \"Lista circular doblemente enlazada\" ||\r\n                this.props.nombre === \"Arbol B\" ||\r\n                this.props.nombre === \"Col Major\" ||\r\n                this.props.nombre === \"Row Major\" ||\r\n                this.props.nombre === \"Row Major\" ||\r\n                this.props.nombre === \"Matriz Dispersa\" ||\r\n                this.props.nombre === \"Grafo Dirigido\" ||\r\n                this.props.nombre === \"Grafo No Dirigido\" ||\r\n                this.props.nombre === \"Tabla Hash Cerrada\" ||\r\n                this.props.nombre === \"Tabla Hash Abierta\"){\r\n        return (\r\n            <Modal\r\n                className=\"modalAgregar\"\r\n                basic\r\n                onClose={() => this.setState({open: false})}\r\n                onOpen={() =>  this.setState({open: true})}\r\n                open={this.state.open}\r\n                size='small'\r\n                trigger={<Menu.Item>Agregar</Menu.Item>}\r\n                >\r\n                <Header icon>\r\n                    <Icon name='add' />\r\n                    Agregar Dato\r\n                </Header>\r\n                <Modal.Content>\r\n                <Input placeholder='Opciones' name=\"opciones\" options={countryOptions} value={this.state.opciones} onChange={this.obtenerText} fluid/> \r\n                <br/>\r\n                <Input className=\"inputAgregar\" type=\"text\" name=\"textoDato\" value={this.state.textoDato}  fluid placeholder=\"agregar dato\" onChange={this.obtenerText}/>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() =>  this.setState({open: false})}>\r\n                    <Icon name='remove' /> No\r\n                    </Button>\r\n                    <Button className=\"buttonAgregar\" color='green' inverted onClick={this.swtEdd}>\r\n                    <Icon name='checkmark' /> Si\r\n                    </Button>\r\n                </Modal.Actions>\r\n                </Modal>\r\n        )\r\n       }else{\r\n        return (\r\n            <Modal\r\n                className=\"modalAgregar\"\r\n                basic\r\n                onClose={() => this.setState({open: false})}\r\n                onOpen={() =>  this.setState({open: true})}\r\n                open={this.state.open}\r\n                size='small'\r\n                trigger={<Menu.Item>Agregar</Menu.Item>}\r\n                >\r\n                <Header icon>\r\n                    <Icon name='add' />\r\n                    Agregar Dato\r\n                </Header>\r\n                <Modal.Content>\r\n                <Input className=\"inputAgregar\" type=\"text\" name=\"textoDato\" value={this.state.textoDato}  fluid placeholder=\"agregar dato\" onChange={this.obtenerText}/>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() =>  this.setState({open: false})}>\r\n                    <Icon name='remove' /> No\r\n                    </Button>\r\n                    <Button className=\"buttonAgregar\" color='green' inverted onClick={this.swtEdd}>\r\n                    <Icon name='checkmark' /> Si\r\n                    </Button>\r\n                </Modal.Actions>\r\n                </Modal>\r\n        )\r\n       }\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\n\r\n\r\n\r\n\r\nexport default class Eliminar extends Component {\r\n\r\n    state={\r\n        open: false,\r\n        textoDato: \"\" \r\n    }\r\n\r\n    swtEdd=()=>{\r\n        let nombre = this.props.nombre\r\n        let edd = this.props.edd\r\n        let dato = this.state.textoDato\r\n        switch(nombre){\r\n            case \"Pila\" :\r\n                edd.eliminar(dato)\r\n                break\r\n            case \"Cola\":\r\n                edd.eliminar(dato)\r\n                break\r\n            case \"Cola de prioridad\":\r\n                edd.eliminar(dato)\r\n                break\r\n            case \"Lista simplemente enlazada\":\r\n                edd.eliminar(dato)\r\n                break\r\n    \r\n            case \"Lista doblemente enlazada\":\r\n                edd.eliminar(dato)\r\n                break\r\n    \r\n            case \"Lista circular simplemente enlazada\":\r\n    \r\n                edd.eliminar(dato)\r\n                break\r\n    \r\n            case \"Lista circular doblemente enlazada\":\r\n                edd.eliminar(dato)\r\n                break\r\n            case \"Arbol ABB\":\r\n                edd.eliminando(dato);\r\n                break\r\n            case \"Arbol AVL\":\r\n                edd.eliminar(dato)\r\n                break\r\n             case \"Arbol B\":\r\n                edd.eliminar(dato)\r\n                break\r\n            case \"Arbol B+\":\r\n                edd.eliminar(dato)\r\n                break\r\n             case \"Arbol Merkle\":\r\n                edd.Eliminar(dato)\r\n                break\r\n            case \"Tabla Hash Cerrada\":\r\n                edd.eliminar(dato)\r\n            break\r\n            case \"Tabla Hash Abierta\":\r\n                edd.eliminar(dato)\r\n            break;\r\n            case \"Col Major\":\r\n                let arreglosplit = dato.split(\",\")\r\n                let x = arreglosplit[0]\r\n                let y = arreglosplit[1]\r\n                edd.eliminar(x,y,nombre,dato)\r\n            break;\r\n            case \"Row Major\":    \r\n                let splitarr = dato.split(\",\")\r\n                let i = splitarr[0]\r\n                let j = splitarr[1]\r\n                edd.eliminar(i,j,nombre,dato)\r\n            break;\r\n\r\n            case \"Matriz Dispersa\":\r\n                edd.eliminar(dato)\r\n                break;\r\n            case \"Grafo Dirigido\":\r\n                edd.eliminar(dato)\r\n                break;\r\n            case \"Grafo No Dirigido\":\r\n                edd.eliminar(dato)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.props.obtenerDatos(edd);\r\n    }\r\n\r\n    obtenerText = e =>{\r\n       this.setState({\r\n           [e.target.name]: e.target.value\r\n       })\r\n       }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                basic\r\n                onClose={() => this.setState({open: false})}\r\n                onOpen={() => this.setState({open: true})}\r\n                open={this.state.open}\r\n                size='small'\r\n                trigger={<Menu.Item>Eliminar</Menu.Item>}\r\n                >\r\n                <Header icon>\r\n                    <Icon name='trash' />\r\n                    Eliminar Dato\r\n                </Header>\r\n                <Modal.Content>\r\n                        <Input type=\"text\" fluid name=\"textoDato\" value={this.state.textoDato} onChange={this.obtenerText} placeholder=\"Eliminanr dato\"/>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() => this.setState({open: false})}>\r\n                    <Icon name='remove' /> No\r\n                    </Button>\r\n                    <Button color='green' inverted onClick={this.swtEdd}>\r\n                    <Icon name='checkmark' /> Yes\r\n                    </Button>\r\n                </Modal.Actions>\r\n                </Modal>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\n\r\nexport default class Actualizar extends Component {\r\n\r\n    state={\r\n        open: false,\r\n        datoAnterior: \"\" ,\r\n        datoNuevo: \"\"\r\n }\r\n\r\n    swtEdd=()=>{\r\n        let nombre = this.props.nombre\r\n        let edd = this.props.edd\r\n        let datoAnterior = this.state.datoAnterior\r\n        let datoNuevo = this.state.datoNuevo\r\n        let splitarr ;\r\n        let i;\r\n        let j;\r\n        switch(nombre){\r\n            case \"Pila\" :\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Cola\":\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Cola de prioridad\":\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Lista simplemente enlazada\":\r\n\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n\r\n            case \"Lista doblemente enlazada\":\r\n\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n\r\n            case \"Lista circular simplemente enlazada\":\r\n\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n\r\n            case \"Lista circular doblemente enlazada\":\r\n\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Arbol ABB\":\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Arbol AVL\":\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Arbol B\":\r\n                edd.modificar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Arbol B+\":\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n            break\r\n            case \"Arbol Merkle\":\r\n                edd.modificar(datoAnterior,datoNuevo)\r\n            break\r\n            case \"Tabla Hash Cerrada\":\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n            break\r\n            case \"Tabla Hash Abierta\":\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n            break\r\n            case \"Col Major\":\r\n                let arreglosplit = datoAnterior.split(\",\")\r\n                let x = arreglosplit[0]\r\n                let y = arreglosplit[1]\r\n                edd.actualizar(x,y,nombre,datoNuevo)\r\n            break\r\n            case \"Row Major\":    \r\n                 splitarr = datoAnterior.split(\",\")\r\n                 i = splitarr[0]\r\n                 j = splitarr[1]\r\n                edd.actualizar(i,j,nombre,datoNuevo)\r\n            break\r\n            case \"Matriz Dispersa\":    \r\n                edd.modificar(datoAnterior,datoNuevo)\r\n            break\r\n            case \"Grafo No Dirigido\":    \r\n                edd.modificar(datoAnterior,datoNuevo)\r\n            break\r\n            case \"Grafo Dirigido\":    \r\n                edd.modificar(datoAnterior,datoNuevo)\r\n            break\r\n            default:\r\n                break;\r\n        }\r\n        this.props.obtenerDatos(edd);\r\n    }\r\n\r\n obtenerText = e =>{\r\n    this.setState({\r\n        [e.target.name]: e.target.value\r\n    })\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal\r\n            basic\r\n            onClose={() =>this.setState({open: false})}\r\n            onOpen={() => this.setState({open: true})}\r\n            open={this.state.open}\r\n            size='small'\r\n            trigger={<Menu.Item>Actualizar</Menu.Item>}\r\n            >\r\n            <Header icon>\r\n                <Icon name='edit' />\r\n                Actualizar Dato\r\n            </Header>\r\n            <Modal.Content>\r\n                    <Input type=\"text\" name=\"datoAnterior\" value={this.state.datoAnterior} fluid placeholder=\"Dato Anterior\" onChange={this.obtenerText}/>\r\n                    <br/>\r\n                    <Input type=\"text\" name=\"datoNuevo\" value={this.state.datoNuevo} fluid placeholder=\"Dato Nuevo\" onChange={this.obtenerText}/>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button basic color='red' inverted onClick={() => this.setState({open: false})}>\r\n                <Icon name='remove' /> No\r\n                </Button>\r\n                <Button color='green' inverted onClick={this.swtEdd}>\r\n                <Icon name='checkmark' /> Yes\r\n                </Button>\r\n            </Modal.Actions>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport Graph from \"react-graph-vis\";\r\n\r\nexport default function GraficaListas(props) {\r\n\r\n    let nodosAfuera = props.edd.Recorrido()\r\n    if(props.buscar != \"\"){\r\n      nodosAfuera = props.edd.Recorrido(props.buscar)\r\n    }\r\n    let uniones = edgeF()\r\n\r\n\r\n    function edgeF(){\r\n      let edgefuera = []\r\n      for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n        let edge = {from:i, to:i+1}\r\n        edgefuera[i] = edge\r\n        \r\n      }\r\n\r\n      if(props.nombre == \"Lista doblemente enlazada\"){\r\n          let contador = nodosAfuera.length-1\r\n          for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n              let edge = {from:i+1, to:i}\r\n              edgefuera[contador] = edge\r\n              contador++\r\n          }\r\n          \r\n      }\r\n\r\n      return edgefuera\r\n    }\r\n\r\n    console.log(nodosAfuera)\r\n    console.log(uniones)\r\n\r\n    const graph = {\r\n        nodes: nodosAfuera.map((node, index, arr) => {\r\n          const angle = 2 * (index / arr.length +0.75 );\r\n          node.x = 9000 * angle;\r\n          node.y = 10 * angle;\r\n          if (index % 2 === 0) {\r\n            node.value = index + 1;\r\n          }\r\n          return node;\r\n        }),\r\n\r\n        edges: uniones\r\n      };\r\n     \r\n\r\n\r\n\r\n      const diseño = {\r\n          direction: 'LR'\r\n      }\r\n\r\n      const options = {\r\n        physics: false,\r\n        edges: {\r\n            color: \"white\",\r\n            width: 2,\r\n            shadow: true\r\n          },\r\n          nodes:{\r\n            shape:\"box\",\r\n            color: \"red\",\r\n            font: {\r\n              size: 32,\r\n              color: \"#ffffff\",\r\n            },\r\n            borderWidth: 2,\r\n            shadow: true\r\n        },\r\n        interaction: {\r\n          navigationButtons: true,\r\n          keyboard: true,\r\n        }\r\n        ,\r\n        height: \"500px\"\r\n      };\r\n     \r\n      const events = {\r\n        select: function(event) {\r\n          var { nodes, edges } = event;\r\n        }\r\n      };\r\n      return (\r\n        <Graph\r\n          graph={graph}\r\n          options={options}\r\n          events={events}\r\n          getNetwork={network => {\r\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n          }}\r\n        />\r\n      );\r\n}\r\n","import React from 'react'\r\nimport Graph from \"react-graph-vis\";\r\n\r\nexport default function GraficaListaCircular(props) {\r\n\r\n    let nodosAfuera = props.edd.Recorrido()\r\n    if(props.buscar != \"\"){\r\n      nodosAfuera = props.edd.Recorrido(props.buscar)\r\n    }\r\n    let edgefuera =[]\r\n\r\n    for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n        let edge = {from:i, to:i+1}\r\n        edgefuera[i] = edge\r\n\r\n        if(i == nodosAfuera.length-2){\r\n            let edge = {from:nodosAfuera.length-1, to:0}\r\n            edgefuera[nodosAfuera.length-1] = edge\r\n        }\r\n        \r\n    }\r\n\r\n    if(props.nombre == \"Lista circular doblemente enlazada\"){\r\n        let contador = nodosAfuera.length\r\n        for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n            let edge = {from:i+1, to:i}\r\n            edgefuera[contador] = edge\r\n            contador++\r\n            if(i == nodosAfuera.length-2){\r\n                let edge = {from:0, to:nodosAfuera.length-1}\r\n                edgefuera[contador] = edge\r\n            }\r\n        }\r\n    }\r\n    console.log(edgefuera)\r\n\r\n    const graph = {\r\n        nodes: nodosAfuera.map((node, index, arr) => {\r\n            const angle = 2 * Math.PI * (index / arr.length + 0.75);\r\n            node.x = 1000 * Math.cos(angle);\r\n            node.y = 1000 * Math.sin(angle);\r\n            if (index % 2 === 0) {\r\n              node.value = index + 1;\r\n            }\r\n            return node;\r\n        }),\r\n\r\n        edges: edgefuera\r\n      };\r\n     \r\n\r\n\r\n      const options = {\r\n        physics: false,\r\n        edges: {\r\n            color: \"white\",\r\n            width: 2,\r\n            shadow: true\r\n          },\r\n        nodes:{\r\n            shape:\"box\",\r\n            color: \"red\",\r\n            font: {\r\n              size: 32,\r\n              color: \"#ffffff\",\r\n            },\r\n            borderWidth: 2,\r\n            shadow: true\r\n        },\r\n        height: \"500px\"\r\n      };\r\n     \r\n      const events = {\r\n        select: function(event) {\r\n          var { nodes, edges } = event;\r\n        }\r\n      };\r\n      return (\r\n        <Graph\r\n          graph={graph}\r\n          options={options}\r\n          events={events}\r\n          getNetwork={network => {\r\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n          }}\r\n        />\r\n      );\r\n}\r\n","import React from 'react'\r\nimport {\r\n    BarChart,\r\n    Bar,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend\r\n  } from \"recharts\";\r\n\r\nimport './GraficoOrdenamiento.css'\r\n\r\n\r\n\r\n  let data;\r\n\r\n\r\nlet duration = 10000; \r\n\r\n\r\nexport default function GraficoOrdenamientos(props) {\r\n    \r\n  data = props.arreglo\r\n\r\n    return (\r\n        <div className=\"grafico\">\r\n        \r\n        <BarChart\r\n          width={1000}\r\n          height={600}\r\n          data={data} \r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5\r\n          }}\r\n          \r\n        >\r\n         \r\n          <XAxis dataKey=\"valor\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Bar dataKey=\"ASCII\" fill=\"#82ca9d\" animationDuration={duration}/>\r\n        </BarChart>\r\n    \r\n        \r\n        </div>\r\n      );\r\n}\r\n","import React, { Component } from 'react'\r\nimport GraficaListas from './GraficaListas'\r\nimport GraficaListaCircular from './GraficaListaCircular'\r\nimport GraficoOrdenamientos from './GraficoOrdenamientos'\r\n\r\nexport default class Dibujar extends Component {\r\n  render() {\r\n     if(this.props.nombre == \"Lista circular simplemente enlazada\" || this.props.nombre == \"Lista circular doblemente enlazada\"){\r\n      return (\r\n        <div>\r\n            <GraficaListaCircular nombre={this.props.nombre} buscar={this.props.valorBusqueda} edd={this.props.estructura}/>\r\n        </div>\r\n      )\r\n    \r\n    }else if(this.props.nombre == \"Ordenamiento Selección\" ||\r\n    this.props.nombre == \"Ordenamiento Inserción\" ||\r\n    this.props.nombre == \"Ordenamiento Burbuja\" ||\r\n    this.props.nombre == \"Ordenamiento Rapido\"){\r\n      return(\r\n        <div>\r\n        <br/>\r\n        <GraficoOrdenamientos arreglo={this.props.estructura}/> \r\n        </div>\r\n      ) \r\n    }\r\n    else{\r\n      return (\r\n        <div>\r\n             <GraficaListas nombre={this.props.nombre}  buscar={this.props.valorBusqueda} edd={this.props.estructura}/> \r\n        </div>\r\n      )\r\n    } \r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\n\r\nexport default class Buscar extends Component {\r\n    state={\r\n        open: false,\r\n        textoDato: \"\" \r\n    }\r\n\r\n    retornarValor = () =>{\r\n        this.props.busqueda(this.state.textoDato)\r\n    }\r\n\r\n    obtenerText = e =>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n            basic\r\n            onClose={() =>  this.setState({open: false})}\r\n            onOpen={() =>  this.setState({open: true})}\r\n            open={this.state.open}\r\n            size='small'\r\n            trigger={<Menu.Item>Buscar</Menu.Item>}\r\n            >\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Buscar Dato\r\n            </Header>\r\n            <Modal.Content>\r\n                    <Input type=\"text\" fluid name='textoDato' value={this.state.textoDato} onChange={this.obtenerText} placeholder=\"buscar dato\" icon=\"search\"/>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button basic color='red' inverted onClick={() =>  this.setState({open: false})}>\r\n                <Icon name='remove' /> No\r\n                </Button>\r\n                <Button color='green' inverted onClick={this.retornarValor}>\r\n                <Icon name='checkmark' /> Yes\r\n                </Button>\r\n            </Modal.Actions>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactFlow, { Background, MiniMap, Handle,ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nconst customNodeStyles = {\r\n    background: 'green',\r\n    color: '#FFF',\r\n    padding: 10,\r\n  };\r\n  \r\n  const CustomNodeComponent = ({ data }) => {\r\n    return (\r\n      <div style={customNodeStyles}>\r\n        <Handle type=\"target\" position=\"left\" style={{ borderRadius: 0 }} />\r\n        <Handle type=\"source\" position=\"right\" style={{ borderRadius: 0 }} />\r\n        <div>{data.text}</div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const nodeTypes = {\r\n    special: CustomNodeComponent,\r\n  };\r\n\r\nexport default function GraficarTablaHash(props) {\r\n    console.log(props.estructura.graficar())\r\n    let elements = props.estructura.graficar()\r\n\r\n    if(props.valorBusqueda != \"\"){\r\n         elements = props.estructura.graficar(props.valorBusqueda)\r\n    }\r\n    return (\r\n        <div style={{ height: 500 }}>\r\n          < ReactFlowProvider >\r\n                <ReactFlow elements={elements} nodeTypes={nodeTypes}>\r\n                <Background\r\n                variant=\"dots\"\r\n                gap={12}\r\n                size={1}\r\n                />\r\n\r\n            <MiniMap\r\n                    nodeStrokeColor={(n) => {\r\n                    if (n.type === 'input') return '#0041d0';\r\n                    if (n.type === 'selectorNode') return \"red\";\r\n                    if (n.type === 'default') return \"gray\";\r\n                    if (n.type === 'output') return '#ff0072';\r\n                    if (n.type === 'special') return 'green';\r\n                    }}\r\n                    nodeColor={(n) => {\r\n                    if (n.type === 'selectorNode') return \"gray\";\r\n                    return '#fff';\r\n                    }}\r\n                />\r\n                </ReactFlow>\r\n            </ ReactFlowProvider >\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactFlow, { Background, MiniMap, Handle,ReactFlowProvider } from 'react-flow-renderer';\r\n\r\n\r\nconst customNodeStyles = {\r\n    background: \"#EEBF1D\",\r\n    padding: 0,\r\n    height: \"40px\"\r\n  };\r\n  \r\n  const divnodo = {\r\n  \r\n  float:\"left\",\r\n  border:\"1px solid black\",\r\n  margin:\"5px\",\r\n  padding: \"5px\"\r\n  \r\n  }\r\n  \r\n  const CustomNodeComponent = ({ data }) => {\r\n    return (\r\n      <div style={customNodeStyles}> \r\n      <Handle type=\"target\" position=\"top\" style={{ borderRadius: 0 }} />\r\n      <Handle type=\"source\" position=\"bottom\" style={{ borderRadius: 0 }} />\r\n    \r\n        <div style={divnodo}>{data.text}</div>\r\n        <div style={divnodo}>{data.nodo}</div>\r\n      \r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const nodeTypes = {\r\n    special: CustomNodeComponent,\r\n  };\r\n\r\nexport default function GraficarTablaHashCerrada(props) {\r\n    console.log(props.estructura.graficar())\r\n    let elements = props.estructura.graficar()\r\n\r\n    if(props.valorBusqueda != \"\"){\r\n         elements = props.estructura.graficar(props.valorBusqueda)\r\n    }\r\n    return (\r\n        <div style={{ height: 500 }}>\r\n          < ReactFlowProvider >\r\n                <ReactFlow elements={elements} nodeTypes={nodeTypes}>\r\n                <Background\r\n                variant=\"dots\"\r\n                gap={12}\r\n                size={1}\r\n                />\r\n\r\n            <MiniMap\r\n                    nodeStrokeColor={(n) => {\r\n                    if (n.type === 'input') return '#0041d0';\r\n                    if (n.type === 'selectorNode') return \"red\";\r\n                    if (n.type === 'default') return \"gray\";\r\n                    if (n.type === 'output') return '#ff0072';\r\n                    if (n.type === 'special') return 'green';\r\n                    }}\r\n                    nodeColor={(n) => {\r\n                    if (n.type === 'selectorNode') return \"gray\";\r\n                    return '#fff';\r\n                    }}\r\n                />\r\n                </ReactFlow>\r\n            </ ReactFlowProvider >\r\n        </div>\r\n    )\r\n}\r\n","export default function Seleccion(arr){\r\n    \r\n    let menor, posicion, tmp\r\n    for (let index = 0; index < arr.length-1; index++) {\r\n         menor = arr[index]\r\n         posicion = index;\r\n        for (let y = index+1; y < arr.length; y++) {\r\n            \r\n            if(arr[y].ASCII< menor.ASCII){\r\n                menor = arr[y]\r\n                posicion = y\r\n            }\r\n            \r\n        }\r\n  \r\n        if(posicion != index){\r\n            tmp = arr[index]\r\n            arr[index] = arr[posicion];\r\n            arr[posicion] = tmp;\r\n        }\r\n  \r\n    }\r\n    \r\n    return arr\r\n  }","export default function Insercion(arr){\r\n    let derecha, aux\r\n    for (let x = 0; x < arr.length; x++) {\r\n        derecha = x\r\n        aux = arr[x]\r\n        while((derecha>0) && (arr[derecha-1].ASCII > aux.ASCII)){\r\n            arr[derecha] = arr[derecha-1]\r\n            derecha--\r\n        }\r\n\r\n        arr[derecha] = aux\r\n    }\r\n\r\n    return arr\r\n}","//Funcion de Ordenamiento rapido\r\nexport default function ordRapido(arreglo){\r\n    //Posible Arreglo de un solo dato\r\n    if (arreglo.length === 1){\r\n        return arreglo;\r\n    }\r\n    const pivote = arreglo[arreglo.length - 1]\r\n    const partIzq = []\r\n    const partDer = []\r\n    //Iterador\r\n    for (const el of arreglo.slice(0, arreglo.length - 1)){\r\n        el.ASCII<pivote.ASCII ? partIzq.push(el) : partDer.push(el)\r\n    }\r\n    //Construccion de salida\r\n    if(partIzq.length>0 && partDer.length > 0){\r\n        return [ ...ordRapido(partIzq) , pivote , ...ordRapido(partDer)]\r\n    } else if(partIzq.length> 0){\r\n        return [...ordRapido(partIzq) , pivote]\r\n    } else{\r\n        return [pivote , ...ordRapido(partDer)]\r\n    }\r\n}","var fs = require('fs')\r\nclass Ordenamiento{\r\n    constructor(){\r\n        this.arreglo = null;\r\n        this.contadorArreglos = 0;\r\n    }\r\n    ordenar(datos){\r\n        this.arreglo = datos;\r\n        for (let i = 0; i< datos.length-1; i++){\r\n            for(let j = 0; j< datos.length-1; j++ ){\r\n                if(datos[j].ASCII> datos[j+1].ASCII){\r\n                    let temporal = datos[j];\r\n                    datos[j] = datos[j+1];\r\n                    datos[j+1] = temporal;\r\n                }\r\n            }\r\n        }\r\n        this.arreglo = datos;\r\n        return datos\r\n    }\r\n\r\n    cargar(archivo){\r\n        let datos = JSON.parse[datos];\r\n        let arreglo = datos[\"valores\"];\r\n        this.ordenar(arreglo)\r\n\r\n    }\r\n\r\n    guardar(){\r\n        let contadorListas\r\n        contadorListas ++;\r\n        let archivojs;\r\n        archivojs[\"Datos\"] = this.arreglo;        \r\n       \r\n        let json = JSON.stringify(archivojs)\r\n        let nombre = \"Ordenamiento\" + contadorListas;\r\n        fs.writeFile(nombre, json)\r\n\r\n    }\r\n}\r\n\r\nexport default Ordenamiento;","import React from 'react'\r\nimport { Graphviz } from 'graphviz-react';\r\n\r\n\r\n\r\nexport default function GraficarArboles(props) {\r\n    let dot = props.estructura.graficar();\r\n\r\n    if(props.valorBusqueda != \"\"){\r\n        dot =  props.estructura.graficar(props.valorBusqueda);\r\n      }\r\n\r\n    return (\r\n        <div>\r\n            <Graphviz dot={dot} options={{zoom:true,height: 2000,width: 2000}} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport Graph from \"react-graph-vis\";\r\n\r\nexport default function GraficarArbol(props) {\r\n\r\n    let nodosAfuera = props.estructura.obtenerNodos()\r\n\r\n    if(props.buscar != \"\"){\r\n      nodosAfuera = props.estructura.obtenerNodos(props.valorBusqueda)\r\n    }\r\n\r\n    let uniones =  props.estructura.obtenerAputadores()\r\n\r\n  /*   function edgeF(){\r\n      let edgefuera = []\r\n      for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n        let edge = {from:i, to:i+1}\r\n        edgefuera[i] = edge\r\n        \r\n      }\r\n\r\n      if(props.nombre == \"Lista doblemente\"){\r\n          let contador = nodosAfuera.length-1\r\n          for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n              let edge = {from:i+1, to:i}\r\n              edgefuera[contador] = edge\r\n              contador++\r\n          }\r\n          \r\n      }\r\n\r\n      return edgefuera\r\n    } */\r\n\r\n    /* console.log(nodosAfuera)\r\n    console.log(uniones) */\r\n\r\n    const graph = {\r\n        nodes: nodosAfuera,\r\n\r\n        edges: uniones\r\n      };\r\n     \r\n\r\n      const options = {\r\n        layout: {\r\n            hierarchical: {\r\n              direction: \"UD\",\r\n              sortMethod: \"directed\",\r\n            },\r\n        },\r\n        physics: false,\r\n        edges: {\r\n          color: \"white\",\r\n          width: 2,\r\n          shadow: true\r\n        },\r\n        nodes:{\r\n            shape:\"box\",\r\n            color: \"red\",\r\n            font: {\r\n              size: 32,\r\n              color: \"#ffffff\",\r\n            },\r\n            borderWidth: 2,\r\n            shadow: true\r\n        },\r\n        interaction: {\r\n          navigationButtons: true,\r\n          keyboard: true,\r\n        }\r\n        ,\r\n        height: \"500px\"\r\n      };\r\n     \r\n      const events = {\r\n        select: function(event) {\r\n          var { nodes, edges } = event;\r\n        }\r\n      };\r\n      return (\r\n        <Graph\r\n          graph={graph}\r\n          options={options}\r\n          events={events}\r\n          getNetwork={network => {\r\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n          }}\r\n        />\r\n      );\r\n}\r\n","import React from 'react';\r\nimport ReactFlow, { Background, MiniMap, Handle,ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nconst customNodeStyles = {\r\n    background: 'green',\r\n    color: '#FFF',\r\n    padding: 10,\r\n  };\r\n  \r\n  const CustomNodeComponent = ({ data }) => {\r\n    return (\r\n      <div style={customNodeStyles}>\r\n        <Handle type=\"target\" position=\"left\" style={{ borderRadius: 0 }} />\r\n        <Handle type=\"source\" position=\"right\" style={{ borderRadius: 0 }} />\r\n        <div>{data.text}</div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const nodeTypes = {\r\n    special: CustomNodeComponent,\r\n  };\r\n\r\nexport default function GraficarAdayacencia(props) {\r\n    let elements = props.estructura.graficarML() \r\n    return (\r\n       \r\n\r\n      <div style={{ height: 250 }}>\r\n      <h1 style={{ color: 'white' }}>{props.estructura.almacenamiento}</h1>\r\n      < ReactFlowProvider >\r\n          <ReactFlow elements={elements} nodeTypes={nodeTypes}>\r\n          <Background\r\n          variant=\"dots\"\r\n          gap={12}\r\n          size={1}\r\n          />\r\n          </ReactFlow>\r\n\r\n      </ ReactFlowProvider >\r\n      \r\n      </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactFlow, { Background, MiniMap, Handle,ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nconst customNodeStyles = {\r\n    background: 'green',\r\n    color: '#FFF',\r\n    padding: 10,\r\n  };\r\n  \r\n  const CustomNodeComponent = ({ data }) => {\r\n    return (\r\n      <div style={customNodeStyles}>\r\n        <Handle type=\"target\" position=\"left\" style={{ borderRadius: 0 }} />\r\n        <Handle type=\"source\" position=\"right\" style={{ borderRadius: 0 }} />\r\n        <div>{data.text}</div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const nodeTypes = {\r\n    special: CustomNodeComponent,\r\n  };\r\n\r\nexport default function GraficaLinealizado(props) {\r\n    let elements = props.estructura.graficarMatriz()\r\n    let linealizado;\r\n    if(props.estructura.vector != null){\r\n        linealizado = props.estructura.graficarVector();     \r\n        if(props.valorBusqueda != \"\"){\r\n            let splitarr = props.valorBusqueda.split(\",\")\r\n            let i = splitarr[0]\r\n            let j = splitarr[1]\r\n            elements = props.estructura.graficarMatriz(i,j)\r\n            linealizado = props.estructura.graficarVector(i,j,props.nombre)\r\n        }\r\n    }\r\n    return (\r\n       \r\n\r\n      <div style={{ height: 250 }}>\r\n      <h1 style={{ color: 'white' }}>Matriz</h1>\r\n      < ReactFlowProvider >\r\n          <ReactFlow elements={elements} nodeTypes={nodeTypes}>\r\n          <Background\r\n          variant=\"dots\"\r\n          gap={12}\r\n          size={1}\r\n          />\r\n          </ReactFlow>\r\n\r\n      </ ReactFlowProvider >\r\n      < ReactFlowProvider >\r\n      <h1>Vector</h1>\r\n          <ReactFlow elements={linealizado} nodeTypes={nodeTypes}>\r\n          <Background\r\n          variant=\"dots\"\r\n          gap={12}\r\n          size={1}\r\n          />\r\n          </ReactFlow>\r\n      </ ReactFlowProvider >\r\n      </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactFlow, { Background, MiniMap, Handle,ReactFlowProvider } from 'react-flow-renderer';\r\n\r\nconst customNodeStyles = {\r\n    background: 'green',\r\n    color: '#FFF',\r\n    padding: 10,\r\n  };\r\n  \r\n  const CustomNodeComponent = ({ data }) => {\r\n    return (\r\n      <div style={customNodeStyles}>\r\n        <Handle type=\"target\" position=\"left\" style={{ borderRadius: 0 }} />\r\n        <Handle type=\"source\" position=\"right\" style={{ borderRadius: 0 }} />\r\n        <div>{data.text}</div>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  const nodeTypes = {\r\n    special: CustomNodeComponent,\r\n  };\r\n\r\nexport default function GraficarMDispersa(props) {\r\n    console.log(props.estructura.graficar())\r\n    let elements = props.estructura.graficar()\r\n\r\n    if(props.valorBusqueda != \"\"){\r\n         elements = props.estructura.graficar(props.valorBusqueda)\r\n    }\r\n    return (\r\n        <div style={{ height: 500 }}>\r\n          < ReactFlowProvider >\r\n                <ReactFlow elements={elements} nodeTypes={nodeTypes}>\r\n                <Background\r\n                variant=\"dots\"\r\n                gap={12}\r\n                size={1}\r\n                />\r\n\r\n            <MiniMap\r\n                    nodeStrokeColor={(n) => {\r\n                    if (n.type === 'input') return '#0041d0';\r\n                    if (n.type === 'selectorNode') return \"red\";\r\n                    if (n.type === 'default') return \"gray\";\r\n                    if (n.type === 'output') return '#ff0072';\r\n                    if (n.type === 'special') return 'green';\r\n                    }}\r\n                    nodeColor={(n) => {\r\n                    if (n.type === 'selectorNode') return \"gray\";\r\n                    return '#fff';\r\n                    }}\r\n                />\r\n                </ReactFlow>\r\n            </ ReactFlowProvider >\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport Graph from \"react-graph-vis\";\r\n\r\nexport default function GraficarGrafo(props) {\r\n\r\n    var nodes = props.estructura.graficarNodos()\r\n    if(props.valorBusqueda != \"\"){\r\n        nodes = props.estructura.graficarNodos(props.valorBusqueda)\r\n    }\r\n    // create some edges\r\n    var edges = props.estructura.graficarEnlaces()\r\n\r\n    const graph = {\r\n        nodes: nodes,\r\n        edges: edges\r\n      };\r\n\r\n      const options = {\r\n        physics: {\r\n            forceAtlas2Based: {\r\n              gravitationalConstant: -26,\r\n              centralGravity: 0.005,\r\n              springLength: 230,\r\n              springConstant: 0.18,\r\n            },\r\n            maxVelocity: 146,\r\n            solver: \"forceAtlas2Based\",\r\n            timestep: 0.35,\r\n            stabilization: { iterations: 150 },\r\n          },\r\n        edges: {\r\n            color: \"white\",\r\n            width: 2,\r\n            shadow: true\r\n          },\r\n          nodes:{\r\n            shape: \"dot\",\r\n            size: 16,\r\n            color: \"red\",\r\n            font: {\r\n              color: \"#ffffff\",\r\n            }\r\n        },\r\n        interaction: {\r\n          navigationButtons: true,\r\n          keyboard: true,\r\n        }\r\n        ,\r\n        height: \"500px\"\r\n      };\r\n     \r\n      const events = {\r\n        select: function(event) {\r\n          var { nodes, edges } = event;\r\n        }\r\n      };\r\n      return (\r\n        <Graph\r\n          graph={graph}\r\n          options={options}\r\n          events={events}\r\n          getNetwork={network => {\r\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n          }}\r\n        />\r\n      );\r\n}\r\n","import React from 'react'\r\nimport MUIDataTable from \"mui-datatables\";\r\n/* \r\nconst columns = [\"Name\", \"Company\", \"City\", \"State\"];\r\n\r\nconst data = [\r\n [\"Joe James\", \"Test Corp\", \"Yonkers\", \"NY\"],\r\n [\"John Walsh\", \"Test Corp\", \"Hartford\", \"CT\"],\r\n [\"Bob Herm\", \"Test Corp\", \"Tampa\", \"FL\"],\r\n [\"James Houston\", \"Test Corp\", \"Dallas\", \"TX\"],\r\n]; */\r\n\r\nconst options = {\r\n  filterType: 'checkbox',\r\n};\r\n\r\nexport default function TablaCodificacion(props) {\r\n    let data = props.estructura.graficardatos()\r\n    let columns = props.estructura.graficarencabezados()\r\n    return (\r\n        <div>\r\n                <MUIDataTable \r\n                title={props.nombre} \r\n                data={data} \r\n                columns={columns} \r\n                options={options} \r\n                />\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Menu, Input } from 'semantic-ui-react'\r\nimport Cargar from './Cargar'\r\nimport Agregar from './Agregar'\r\nimport Eliminar from './Eliminar'\r\nimport Actualizar from './Actualizar'\r\nimport {Link} from 'react-router-dom'\r\nimport Dibujar from './Dibujar';\r\nimport Buscar from './Buscar'\r\nimport GraficarTablaHash from './GraficarTablaHash'\r\nimport GraficarTablaHashCerrada from './GraficarTablaHashCerrada'\r\n\r\nimport Seleccion from '../estructuras/Ordenamientos/Seleccion'\r\nimport Insercion from '../estructuras/Ordenamientos/Insercion'\r\nimport ordRapido from '../estructuras/Ordenamientos/OrdRapido'\r\nimport Ordenamiento from '../estructuras/Ordenamientos/OrdBurbuja'\r\n\r\nimport GraficarArboles from './GraficarArboles'\r\nimport GraficarArbol from './GraficarArbol'\r\nimport GraficarAdayacencia from './GraficarAdayacencia'\r\n\r\n\r\nimport './NavbarInter.css'\r\nimport GraficaLinealizado from './GraficaLinealizado'\r\nimport GraficarMDispersa from './GraficarMDispersa'\r\nimport GraficarGrafo from './GraficarGrafo'\r\nimport TablaCodificacion from './TablaCodificacion'\r\n\r\n\r\nlet count = 0;\r\nexport default class NavbarInter extends Component {\r\n\r\n    state = {\r\n      estrutura : null,\r\n      busqueda: \"\",\r\n      nombre: '',\r\n      datoaencriptar: '',\r\n      fileDownloadUrl: null,\r\n      valorGrafo: \"\"\r\n     }\r\n\r\n\r\n     componentDidMount(){\r\n       this.setState({nombre: this.props.location.state.nombre})\r\n     }\r\n    \r\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name })\r\n     \r\n    obtenerDatos = (edd) =>{\r\n      this.setState({\r\n        estrutura: edd\r\n      })\r\n      if(this.state.nombre ===\"Código de Hamming\" || this.state.nombre ===\"Algoritmo de Huffman\" || this.state.nombre ===\"Algoritmo LZW\" || this.state.nombre ===\"Cifrado Feistel\"){\r\n        this.setState({\r\n          datoaencriptar: this.state.estrutura.dato\r\n        })\r\n      }\r\n    }\r\n\r\n    obtenerBusqueda = (datoBuscar) =>{\r\n      this.setState({\r\n        busqueda: datoBuscar\r\n      })\r\n    }\r\n\r\n\r\n    ordenarDatos=()=>{\r\n      let arregloOrdenado = []\r\n        switch (this.state.nombre) {\r\n          case \"Ordenamiento Selección\":\r\n            arregloOrdenado = Seleccion(this.state.estrutura);\r\n            break;\r\n          \r\n          case \"Ordenamiento Inserción\":\r\n            arregloOrdenado = Insercion(this.state.estrutura);\r\n            break;\r\n          case \"Ordenamiento Burbuja\":\r\n            let burbuja = new Ordenamiento()\r\n            arregloOrdenado = burbuja.ordenar(this.state.estrutura); \r\n            break;\r\n          case \"Ordenamiento Rapido\":\r\n              arregloOrdenado = ordRapido(this.state.estrutura);\r\n            break;\r\n          default:\r\n            break;\r\n          \r\n        }\r\n\r\n        this.setState({\r\n          estrutura: arregloOrdenado\r\n        })\r\n    }\r\n\r\n    desencolar=()=>{\r\n        switch (this.state.nombre) {\r\n          case \"Cola\":\r\n            this.state.estrutura.Pop()\r\n            break;\r\n          \r\n          case \"Cola de prioridad\":\r\n            this.state.estrutura.Pop()\r\n            break;\r\n          case \"Pila\":\r\n            this.state.estrutura.eliminar()\r\n            break;\r\n          default:\r\n            break;\r\n          \r\n        }\r\n\r\n        this.setState({\r\n          estrutura: this.state.estrutura\r\n        })\r\n    }\r\n\r\n    linealizar=()=>{\r\n      switch (this.state.nombre) {\r\n        case \"Col Major\":\r\n          this.state.estrutura.colMajor()\r\n          break;\r\n        \r\n        case \"Row Major\":\r\n          this.state.estrutura.rowMajor()\r\n          break;\r\n        default:\r\n          break;\r\n        \r\n      }\r\n\r\n      this.setState({\r\n        estrutura: this.state.estrutura\r\n      })\r\n  }\r\n\r\n  recorridosAnchura=()=>{\r\n    switch (this.state.nombre) {\r\n      case \"Grafo Dirigido\":\r\n        this.state.estrutura.BFS()\r\n        break;\r\n      case \"Grafo No Dirigido\":\r\n        this.state.estrutura.BFS()\r\n        break;\r\n     \r\n      default:\r\n        break;\r\n      \r\n    }\r\n    this.setState({\r\n      estrutura: this.state.estrutura\r\n    })\r\n}\r\n\r\nobtenerText = e =>{\r\n  this.setState({\r\n      [e.target.name]: e.target.value\r\n  })\r\n  \r\n}\r\n\r\nencryptado = () =>{\r\n  if(this.state.nombre === \"Cifrado Feistel\"){\r\n    let splitEntrada = this.state.datoaencriptar.split(\",\")\r\n\r\n    this.state.estrutura.cargar(splitEntrada[0],splitEntrada[1],splitEntrada[2])\r\n  }else{\r\n    this.state.estrutura.cargar(this.state.datoaencriptar)\r\n  }\r\n  this.setState({\r\n    estrutura: this.state.estrutura\r\n  })\r\n}\r\n\r\nrecorridosProfundidad=()=>{\r\n  switch (this.state.nombre) {\r\n    case \"Grafo Dirigido\":\r\n      this.state.estrutura.DFS()\r\n      break;\r\n    case \"Grafo No Dirigido\":\r\n      this.state.estrutura.DFS()\r\n      break;\r\n   \r\n    default:\r\n      break;\r\n    \r\n  }\r\n\r\nthis.setState({\r\n  estrutura: this.state.estrutura\r\n})\r\n}\r\n\r\nbusquedaConRecorrido=()=>{\r\n  this.state.estrutura.busquedaEspecifica(this.state.busqueda)\r\n\r\n  this.setState({\r\n    estrutura: this.state.estrutura\r\n  })\r\n}\r\n\r\ncostoUniforme=()=>{\r\n\r\n  let splitEntrada = this.state.valorGrafo.split(\",\")\r\n  this.state.estrutura.costoMinimo(splitEntrada[0], splitEntrada[1])\r\n\r\n  this.setState({\r\n    estrutura: this.state.estrutura\r\n  })\r\n}\r\n\r\nrecubrimientoMinimo=()=>{\r\n  this.state.estrutura.recubrimientoMinimo(this.state.valorGrafo)\r\n\r\n  this.setState({\r\n    estrutura: this.state.estrutura\r\n  })\r\n}\r\n\r\n\r\n\r\n   guardarOrdenamiento=(event) =>{\r\n\r\n     event.preventDefault();\r\n      let archivoJSON = JSON.stringify({valores: this.state.estrutura}, null,4)\r\n      const blob = new Blob([archivoJSON])\r\n\r\n      const fileDownloadUrl = URL.createObjectURL(blob);\r\n      this.setState ({fileDownloadUrl: fileDownloadUrl}, \r\n        () => {\r\n          this.dofileDownload.click(); \r\n          URL.revokeObjectURL(fileDownloadUrl); \r\n          this.setState({fileDownloadUrl: \"\"})\r\n      })    \r\n\r\n  }\r\n\r\n  guardarEstructuras=(event) =>{\r\n\r\n    event.preventDefault();\r\n     let archivoJSON = JSON.stringify({nombre:this.state.nombre,valores: this.state.estrutura.guardar()}, null,4)\r\n     const blob = new Blob([archivoJSON])\r\n\r\n     const fileDownloadUrl = URL.createObjectURL(blob);\r\n     this.setState ({fileDownloadUrl: fileDownloadUrl}, \r\n       () => {\r\n         this.dofileDownload.click(); \r\n         URL.revokeObjectURL(fileDownloadUrl); \r\n         this.setState({fileDownloadUrl: \"\"})\r\n     })    \r\n\r\n }\r\n\r\n\r\n \r\n guardarCodificados=(event) =>{\r\n\r\n  event.preventDefault();\r\n   let archivoJSON = this.state.estrutura.guardar()\r\n   const blob = new Blob([archivoJSON])\r\n\r\n   const fileDownloadUrl = URL.createObjectURL(blob);\r\n   this.setState ({fileDownloadUrl: fileDownloadUrl}, \r\n     () => {\r\n       this.dofileDownload.click(); \r\n       URL.revokeObjectURL(fileDownloadUrl); \r\n       this.setState({fileDownloadUrl: \"\"})\r\n   })    \r\n\r\n}\r\n\r\n\r\n    render() {\r\n      const { activeItem } = this.state\r\n  \r\n      if(this.state.estrutura == null){\r\n        return (\r\n          <div>\r\n              <Menu className=\"ui tpo inverted attached menu\">\r\n                <Menu.Item>\r\n                            <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                </Menu.Item>\r\n                <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                <Buscar  busqueda={this.obtenerBusqueda}  key={count++}/>\r\n              <Menu.Menu position='right'>\r\n                <Menu.Item name=\"Guardar\" icon='save'  onClick={this.handleItemClick, this.guardarEstructuras}>\r\n                </Menu.Item>\r\n                \r\n              </Menu.Menu>\r\n            </Menu>\r\n            \r\n           \r\n            <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n            <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n\r\n          \r\n          </div>\r\n        )\r\n\r\n\r\n\r\n      }else{\r\n        if(this.state.nombre == \"Ordenamiento Selección\" ||\r\n           this.state.nombre == \"Ordenamiento Inserción\" ||\r\n           this.state.nombre == \"Ordenamiento Burbuja\" ||\r\n           this.state.nombre == \"Ordenamiento Rapido\" ){\r\n          return (\r\n            <div>\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                  <Menu.Item>\r\n                              <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                  </Menu.Item>\r\n                  <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Menu.Item name=\"Ordenar\" icon='chart bar' \r\n                    onClick={this.handleItemClick, this.ordenarDatos}>\r\n                  </Menu.Item>\r\n                <Menu.Menu position='right'>\r\n                  <Menu.Item name=\"Guardar\" icon='save' onClick={this.handleItemClick, this.guardarOrdenamiento}>\r\n                    \r\n                  </Menu.Item>\r\n                  \r\n                </Menu.Menu>\r\n              </Menu>\r\n              <br/>\r\n              <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n               <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n               {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n              <Dibujar nombre={this.state.nombre} estructura={this.state.estrutura}  key={count++}/>\r\n            </div>\r\n          )\r\n        }else if(this.state.nombre == \"Arbol ABB\"\r\n              ||this.state.nombre == \"Arbol AVL\"){\r\n          return (\r\n            <div>\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                  <Menu.Item>\r\n                              <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                  </Menu.Item>\r\n                  <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                  <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n                  <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n                <Menu.Menu position='right'>\r\n                  <Menu.Item name=\"Guardar\" icon='save'  onClick={this.handleItemClick, this.guardarEstructuras}>\r\n                  </Menu.Item>\r\n                  \r\n                </Menu.Menu>\r\n              </Menu>\r\n              <br/>\r\n              <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n               <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n               {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n               <GraficarArbol nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/>\r\n            </div>\r\n          )\r\n        }else if(this.state.nombre == \"Arbol B\"\r\n              ||this.state.nombre == \"Arbol B+\"\r\n              ||this.state.nombre == \"Arbol Merkle\"\r\n        ){\r\n    return (\r\n      <div>\r\n          <Menu className=\"ui tpo inverted attached menu\">\r\n            <Menu.Item>\r\n                        <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n            </Menu.Item>\r\n            <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n            <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n            <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n            <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n            <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n          <Menu.Menu position='right'>\r\n            <Menu.Item name=\"Guardar\" icon='save'  onClick={this.handleItemClick, this.guardarEstructuras}>\r\n            </Menu.Item>\r\n            \r\n          </Menu.Menu>\r\n        </Menu>\r\n        <br/>\r\n        <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n         <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n         {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n         <GraficarArboles nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/>\r\n      </div>\r\n    )\r\n        }else if(this.state.nombre == \"Tabla Hash Abierta\"\r\n        ){\r\n      return (\r\n      <div>\r\n          <Menu className=\"ui tpo inverted attached menu\">\r\n            <Menu.Item>\r\n                        <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n            </Menu.Item>\r\n            <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n            <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n            <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n            <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n            <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n          <Menu.Menu position='right'>\r\n            <Menu.Item name=\"Guardar\" icon='save'  onClick={this.handleItemClick, this.guardarEstructuras}>\r\n            </Menu.Item>\r\n            \r\n          </Menu.Menu>\r\n        </Menu>\r\n        <br/>\r\n        <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n        <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n        {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n        <GraficarTablaHash nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/> \r\n      </div>\r\n      )\r\n        }else if(this.state.nombre == \"Matriz Dispersa\"\r\n        ){\r\n      return (\r\n      <div>\r\n          <Menu className=\"ui tpo inverted attached menu\">\r\n            <Menu.Item>\r\n                        <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n            </Menu.Item>\r\n            <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n            <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n            <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n            <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n            <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n          <Menu.Menu position='right'>\r\n            <Menu.Item name=\"Guardar\" icon='save'  onClick={this.handleItemClick, this.guardarEstructuras}>\r\n            </Menu.Item>\r\n            \r\n          </Menu.Menu>\r\n        </Menu>\r\n        <br/>\r\n        <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n        <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n        {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n        <GraficarMDispersa nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/> \r\n      </div>\r\n      )\r\n        }else if(this.state.nombre == \"Col Major\" || this.state.nombre == \"Row Major\"\r\n        ){\r\n      return (\r\n      <div>\r\n          <Menu className=\"ui tpo inverted attached menu\">\r\n            <Menu.Item>\r\n                        <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n            </Menu.Item>\r\n            <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n            <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n            <Menu.Item name=\"Linealizar\" icon='chart bar' \r\n                    onClick={this.handleItemClick, this.linealizar}>\r\n            </Menu.Item>\r\n            <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n            <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n            <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n          <Menu.Menu position='right'>\r\n            <Menu.Item name=\"Guardar\" icon='save'  onClick={this.handleItemClick, this.guardarEstructuras}>\r\n            </Menu.Item>\r\n            \r\n          </Menu.Menu>\r\n        </Menu>\r\n        <br/>\r\n        <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n        <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n        {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n        <GraficaLinealizado nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/> \r\n      </div>\r\n      )\r\n        }else if(this.state.nombre == \"Tabla Hash Cerrada\"\r\n        ){\r\n      return (\r\n      <div>\r\n          <Menu className=\"ui tpo inverted attached menu\">\r\n            <Menu.Item>\r\n                        <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n            </Menu.Item>\r\n            <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n            <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n            <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n            <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n            <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n          <Menu.Menu position='right'>\r\n            <Menu.Item name=\"Guardar\" icon='save'  onClick={this.handleItemClick, this.guardarEstructuras}>\r\n            </Menu.Item>\r\n            \r\n          </Menu.Menu>\r\n        </Menu>\r\n        <br/>\r\n        <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n        <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n        {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n        <GraficarTablaHashCerrada nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/> \r\n      </div>\r\n      )\r\n        }else if(this.state.nombre == \"Grafo Dirigido\" || this.state.nombre == \"Grafo No Dirigido\" || this.state.nombre == \"Algoritmo de costo uniforme\"\r\n        ){\r\n      return (\r\n      <div>\r\n          <Menu className=\"ui tpo inverted attached menu\">\r\n            <Menu.Item>\r\n                        <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n            </Menu.Item>\r\n            <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n            <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n            <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n            <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n            <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n            \r\n            <Menu.Item name=\"Buscar con Recorrido\"\r\n                    onClick={this.handleItemClick, this.busquedaConRecorrido}> \r\n            </Menu.Item>\r\n\r\n            <Menu.Item name=\"Profundidad\"\r\n                    onClick={this.handleItemClick, this.recorridosProfundidad}>\r\n            </Menu.Item>\r\n            <Menu.Item name=\"Anchura\"\r\n                    onClick={this.handleItemClick, this.recorridosAnchura}> \r\n            </Menu.Item>\r\n            \r\n            <Menu.Item name=\"Costo Uniforme\"\r\n                    onClick={this.handleItemClick, this.costoUniforme}> \r\n            </Menu.Item>\r\n\r\n            <Menu.Item name=\"Recubrimiento mínimo\"\r\n                    onClick={this.handleItemClick, this.recubrimientoMinimo}> \r\n            </Menu.Item>\r\n          <Menu.Menu position='right'>\r\n            <Menu.Item name=\"Guardar\" icon='save'  onClick={this.handleItemClick, this.guardarEstructuras}>\r\n            </Menu.Item>\r\n            \r\n          </Menu.Menu>\r\n        </Menu>\r\n        <br/>\r\n        <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n        <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n        {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n        <Input className=\"inputAgregar\" type=\"text\" name=\"valorGrafo\" value={this.state.valorGrafo}  fluid placeholder=\"opciones\" onChange={this.obtenerText}/>\r\n        <br/>\r\n        <GraficarGrafo nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/> \r\n        <GraficarAdayacencia nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/> \r\n      </div>\r\n      )\r\n        }else if(this.state.nombre == \"Código de Hamming\" || this.state.nombre == \"Algoritmo de Huffman\" || this.state.nombre == \"Algoritmo LZW\" ||this.state.nombre == \"Cifrado Feistel\"\r\n        ){\r\n      return (\r\n      <div>\r\n          <Menu className=\"ui tpo inverted attached menu\">\r\n            <Menu.Item>\r\n                        <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n            </Menu.Item>\r\n            <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n            <Menu.Item name=\"Encriptar\"\r\n                    onClick={this.handleItemClick, this.encryptado}> \r\n            </Menu.Item>\r\n          <Menu.Menu position='right'>\r\n            <Menu.Item name=\"Guardar\" icon='save'  onClick={this.handleItemClick, this.guardarCodificados}>\r\n            </Menu.Item>\r\n            \r\n          </Menu.Menu>\r\n        </Menu>\r\n        <br/>\r\n        <a className=\"hidden\"\r\n              download={this.state.nombre+\".txt\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n        <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n        {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n        <h3 style={{ color: 'white' }}>Entrada</h3>\r\n        <Input className=\"inputAgregar\" type=\"text\" name=\"datoaencriptar\" value={this.state.datoaencriptar}  fluid placeholder=\"agregar dato\" onChange={this.obtenerText}/>\r\n        <br/>\r\n        <TablaCodificacion nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/> \r\n\r\n        <h3 style={{ color: 'white' }}>Resultado</h3>\r\n        <Input className=\"inputAgregar\" type=\"text\" name=\"textoDato\" value={this.state.estrutura.ecriptado}  fluid placeholder=\"agregar dato\" />\r\n      </div>\r\n      )\r\n        }else if(this.state.nombre == \"Pila\"\r\n              || this.state.nombre == \"Cola\"\r\n              || this.state.nombre == \"Cola de prioridad\"){\r\n          return (\r\n            <div>\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                  <Menu.Item>\r\n                              <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                  </Menu.Item>\r\n                  <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                  <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n                  <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n                  <Menu.Item name=\"Desencolar\" \r\n                    onClick={this.handleItemClick, this.desencolar}>\r\n                  </Menu.Item>\r\n                <Menu.Menu position='right'>\r\n                  <Menu.Item name=\"Guardar\" icon='save'  onClick={this.handleItemClick, this.guardarEstructuras}>\r\n                  </Menu.Item>\r\n                  \r\n                </Menu.Menu>\r\n              </Menu>\r\n              <br/>\r\n              <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n\r\n               <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n               {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n              <Dibujar nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/>\r\n            </div>\r\n          )\r\n        }else{\r\n          return (\r\n            <div>\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                  <Menu.Item>\r\n                              <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                  </Menu.Item>\r\n                  <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                  <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n                  <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n                <Menu.Menu position='right'>\r\n                  <Menu.Item name=\"Guardar\" icon='save'  onClick={this.handleItemClick, this.guardarEstructuras}>\r\n                  </Menu.Item>\r\n                  \r\n                </Menu.Menu>\r\n              </Menu>\r\n              <br/>\r\n              <a className=\"hidden\"\r\n              download={this.state.nombre+\".json\"}\r\n              href={this.state.fileDownloadUrl}\r\n              ref={e=>this.dofileDownload = e}\r\n              >download it</a>\r\n            \r\n               <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n               {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n              <Dibujar nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/>\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n    }\r\n}\r\n","\r\n\r\nimport React from 'react'\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\r\nimport Navbar from './components/Navbar';\r\nimport Divisiones from './components/Divisiones';\r\nimport NavbarInter from './components/NavbarInter'; \r\nvar sectionStyle = {\r\n  backgroundImage: \"url( https://res.cloudinary.com/practicaldev/image/fetch/s--AILWL9dz--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/6vnsxy7g486k12yp4bhd.jpg )\"\r\n};\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={sectionStyle}>\r\n      <Router>\r\n      <Route exact path=\"/tytusds/20211SVAC/G03/build/\" render={() =>{\r\n        return <div> \r\n          <Navbar/>\r\n          <Divisiones/> \r\n        </div>\r\n      }}>\r\n        </Route>\r\n\r\n        <Route exact path=\"/tytusds/20211SVAC/G03/build/estructura\" component={NavbarInter}/>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","var fs = require('fs')\r\nclass Nodo {\r\n    constructor(valor){\r\n        this.valor = valor;\r\n        this.siguiente = null;        \r\n    }\r\n   \r\n}\r\nclass ListaSimple{  \r\n\r\n    constructor(){\r\n       this.primero = null;             \r\n    }  \r\n\r\n\r\n    agregar(elemento, accion){        \r\n        switch(accion){\r\n            case \"Ordenado\":\r\n                this.agregarOrdenado(elemento);\r\n                break;\r\n            case \"Final\":\r\n                this.agregarFinal(elemento);\r\n                break;\r\n            case \"Inicio\":\r\n                this.agregarInicio(elemento);\r\n                break;   \r\n        }\r\n    }\r\n\r\n\r\n    agregarInicio(elemento){\r\n        let nodo = new Nodo(elemento);\r\n        if(this.primero == null){\r\n            this.primero = nodo;\r\n        }else{\r\n            nodo.siguiente = this.primero;\r\n            this.primero = nodo;\r\n        }\r\n    }\r\n    \r\n    agregarOrdenado(elemento){\r\n        let nodo = new Nodo(elemento)\r\n        if(this.primero == null){\r\n            this.primero = nodo;\r\n        }else{\r\n            let temporal = this.primero;\r\n            while(temporal.siguiente != null ){\r\n                if(temporal.valor <= elemento && temporal.siguiente.valor >= elemento){\r\n                    nodo.siguiente = temporal.siguiente;\r\n                    temporal.siguiente = nodo;   \r\n                    break;                 \r\n                }else if(temporal == this.primero && temporal.valor >= elemento){\r\n                    nodo.siguiente = this.primero;\r\n                    this.primero = nodo;\r\n                    break;\r\n                }                                \r\n                temporal = temporal.siguiente;\r\n\r\n            }if(temporal.siguiente == null && temporal.valor <= elemento){\r\n                temporal.siguiente = nodo; \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    agregarFinal(elemento) {\r\n        //crear un nodo para agregar a la lista\r\n        let nodo = new Nodo(elemento)        \r\n        if (this.primero == null) {\r\n            this.primero = nodo;\r\n\r\n        }\r\n        else {\r\n            // Busca el final del arreglo e ingresa el nodo ahi\r\n            let temporal = this.primero;\r\n            while (temporal.siguiente != null) {\r\n                temporal = temporal.siguiente;\r\n            }            \r\n            temporal.siguiente = nodo;\r\n        }\r\n    }\r\n \r\n\r\n    eliminar(elemento) {\r\n        if (this.primero == null) {\r\n            console.log(\"No hay nada en las lista\")\r\n        }\r\n        else {\r\n            let temporal = this.primero;\r\n            while (temporal != null) {\r\n                if (temporal.valor == elemento) {\r\n                    temporal = temporal.siguiente;\r\n                }\r\n                else {\r\n                    if (temporal.siguiente != null) {\r\n                        if (temporal.siguiente.valor == elemento) {\r\n                            let siguienteT = temporal.siguiente;\r\n                            temporal.siguiente = siguienteT.siguiente;\r\n                            siguienteT.siguiente = null;\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n                temporal = temporal.siguiente;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    actualizar(id, valor) {\r\n        if (this.primero == null) {\r\n            console.log(\"No hay nada en las lista\")\r\n        }\r\n        else {\r\n            let temporal = this.primero;\r\n            while (temporal != null) {\r\n                if (temporal.valor == id) {\r\n                    temporal.valor = valor;\r\n                }\r\n                temporal = temporal.siguiente;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    buscar(valor) {\r\n        if (this.primero == null  ) {\r\n            console.log(\"no hay elementos en la lista\");           \r\n\r\n        }\r\n        else {\r\n            let temporal = this.primero;\r\n            while(temporal != null){ \r\n                if(temporal.valor == valor){\r\n                    return temporal;  \r\n                }\r\n                temporal = temporal.siguiente;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    cargar(arreglo,accion) {        \r\n        arreglo.map(elemento => {\r\n            this.agregar(elemento, accion);\r\n        });\r\n        \r\n\r\n    }\r\n    guardar() {\r\n        let archivojs= [];\r\n        let temporal = this.primero;\r\n        while (temporal != null){\r\n            archivojs.push(temporal.valor);\r\n            temporal = temporal.siguiente;\r\n            \r\n        }\r\n        return archivojs;\r\n        \r\n    }\r\n\r\n    imprimir(){\r\n        let temporal = this.primero;\r\n        while(temporal != null){\r\n            console.log(temporal.valor)\r\n            temporal = temporal.siguiente;\r\n        }\r\n    }\r\n\r\n    Recorrido(datoBuscar){\r\n\r\n        let arreglo = []\r\n        let contador = 0;\r\n        let temporal = this.primero;\r\n            while(temporal != null){ \r\n                let dato = {id: contador, label: temporal.valor.toString(),}\r\n                arreglo[contador] = dato\r\n\r\n                if(temporal.valor == datoBuscar){\r\n                    \r\n                    let dato = {id: contador, label: temporal.valor.toString(),  color: \"lime\"}\r\n                    arreglo[contador] = dato\r\n                }\r\n                temporal = temporal.siguiente;\r\n                contador++;\r\n            }\r\n\r\n            return arreglo;\r\n\r\n    }\r\n  \r\n}\r\n//module.exports.ListaSimple = ListaSimple;\r\nexport default ListaSimple;\r\n"],"sourceRoot":""}