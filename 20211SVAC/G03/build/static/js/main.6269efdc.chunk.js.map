{"version":3,"sources":["components/Cargar.js","components/Navbar.js","components/Division.js","components/Divisiones.js","estructuras/EstructurasLineales/Cola.js","estructuras/EstructurasLineales/ColaPrioridad.js","estructuras/Estructuras_Arboreas/ABB.js","components/Agregar.js","components/Eliminar.js","components/Actualizar.js","components/GraficaListas.js","components/GraficaListaCircular.js","components/GraficoOrdenamientos.js","components/Dibujar.js","components/Buscar.js","estructuras/Ordenamientos/Seleccion.js","estructuras/Ordenamientos/Insercion.js","components/GraficarArbol.js","components/NavbarInter.js","App.js","reportWebVitals.js","index.js"],"names":["propsG","Navbar","Menu","className","Item","to","Component","colorcard","background","Division","Card","color","this","props","style","Image","src","imagen","wrapped","ui","Content","Header","title","Description","descripcion","extra","Icon","pathname","state","nombre","Divisiones","Group","itemsPerRow","fs","require","Nodo","dato","siguiente","Cola","primero","ultimo","longitud","nuevoNodo","estaVacia","eliminado","nodoActual","text","datoAnterior","datoNuevo","nodoanterior","arr","map","e","Agregar","archivoJSON","JSON","stringify","writeFile","datoBuscar","arreglo","contador","id","label","toString","prioridad","ColaPrioridad","temp","temp1","console","log","valor","izquierda","derecha","ABB","raiz","add","nodo","buscar","imprimir","eliminar","tmp","maxiz","enlace","nodmax","maxIzq","trasiz","trasder","minder","nodmin","minDer","mandardato","datoborr","datoin","eliminando","insertar","vector","push","graficarNodos","graficarApuntadores","edge","from","onChange","files","target","reader","FileReader","onload","result","trim","data","parse","datos","edd","cargar","arrString","obtenerNodos","obtenerAputadores","obtenerDatos","structW","valores","readAsText","newarr","charCodeAt","i","length","getCharCodes","s","charCodeArr","Cargar","React","useState","open","setOpen","Modal","basic","onClose","onOpen","size","trigger","icon","name","Input","fluid","type","accept","Actions","Button","inverted","onClick","textoDato","swtEdd","obtenerText","setState","value","placeholder","Eliminar","Actualizar","actualizar","GraficaListas","nodosAfuera","Recorrido","uniones","edgefuera","edgeF","graph","nodes","node","index","angle","x","y","edges","options","physics","width","shadow","shape","font","borderWidth","interaction","navigationButtons","keyboard","height","events","select","event","getNetwork","network","GraficaListaCircular","Math","PI","cos","sin","GraficoOrdenamientos","BarChart","margin","top","right","left","bottom","XAxis","dataKey","YAxis","Tooltip","Bar","Number","fill","animationDuration","Dibujar","valorBusqueda","estructura","Buscar","retornarValor","busqueda","Seleccion","menor","posicion","Insercion","aux","GraficarArbol","layout","hierarchical","direction","sortMethod","count","NavbarInter","estrutura","handleItemClick","activeItem","obtenerBusqueda","ordenarDatos","arregloOrdenado","guardarOrdenamiento","location","position","sectionStyle","backgroundImage","App","exact","path","render","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6269efdc.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\n\r\nimport Cola from '../estructuras/EstructurasLineales/Cola'\r\nimport ColaPrioridad from '../estructuras/EstructurasLineales/ColaPrioridad'\r\nimport ABB from '../estructuras/Estructuras_Arboreas/ABB'\r\n\r\nlet propsG\r\nfunction onChange(e){\r\n    let files = e.target.files[0];\r\n    let reader = new FileReader();\r\n    console.log(e.target.files[0])\r\n    reader.onload = (e) => {\r\n        const text = reader.result.toString().trim();\r\n        console.log(text)\r\n        let data = JSON.parse(text); //parseo de archivo JSON\r\n        structW(propsG.nombre, data.valores, propsG.edd) \r\n    }\r\n    reader.readAsText(files);\r\n}\r\nfunction structW(nombre,datos,edd){ // FUNCION PARA SABER QUE TIPO DE ESTRUCTURA ES.\r\n    switch(nombre){\r\n        case \"Pila\" :\r\n            if(edd == null){\r\n                edd = new Cola();\r\n            }\r\n            edd.cargar(datos)\r\n            break\r\n        case \"Cola\":\r\n            if(edd == null){\r\n                edd = new Cola();\r\n            }\r\n            edd.cargar(datos)\r\n            break\r\n        case \"Cola de prioridad\":\r\n            if(edd == null){\r\n                edd = new ColaPrioridad();\r\n            }\r\n            edd.cargar(datos)\r\n            break\r\n        case \"Lista simplemente enlazada\":\r\n\r\n            /* edd = new Cola();\r\n            edd.cargar(datos) */\r\n            break\r\n\r\n        case \"Lista doblemente enlazada\":\r\n\r\n             edd = new Cola();\r\n            edd.cargar(datos) \r\n            break\r\n\r\n        case \"Lista circular simplemente enlazada\":\r\n\r\n            /* edd = new Cola();\r\n            edd.cargar(datos) */\r\n            break\r\n\r\n        case \"Lista circular doblemente enlazada\":\r\n\r\n            edd = new Cola();\r\n            edd.cargar(datos) \r\n            break\r\n        case \"Ordenamiento Selección\":\r\n\r\n            edd = arrString(datos)\r\n            break\r\n        case \"Ordenamiento Inserción\":\r\n\r\n            edd = arrString(datos)\r\n            break\r\n        case \"Ordenamiento Burbuja\":\r\n\r\n            edd = arrString(datos)\r\n            break\r\n        case \"Ordenamiento Rapido\":\r\n\r\n            edd = arrString(datos)\r\n            break\r\n        case \"Arbol ABB\":\r\n\r\n            edd = new ABB();\r\n            edd.cargar(datos)\r\n            console.log(edd.obtenerNodos())\r\n            console.log(edd.obtenerAputadores())\r\n            break\r\n        default:\r\n            break;\r\n    }\r\n    propsG.obtenerDatos(edd);\r\n}\r\n\r\n\r\n\r\nfunction arrString(arreglo){\r\n    let newarr = []\r\n  \r\n    \r\n    if(arreglo[0].charCodeAt){\r\n        for (let i = 0; i < arreglo.length-1; i++) {\r\n          newarr.push(getCharCodes(arreglo[i]))\r\n          \r\n        }\r\n    }else{\r\n      console.log(\"soy un numero\")\r\n      return arreglo\r\n    }\r\n  \r\n    return newarr\r\n  }\r\n  \r\n  function getCharCodes(s){\r\n    let charCodeArr = 0;\r\n    \r\n    for(let i = 0; i < s.length; i++){\r\n        let code = s.charCodeAt(i);\r\n        charCodeArr += code\r\n    }\r\n    \r\n    return charCodeArr;\r\n  }\r\n\r\n\r\nexport default function Cargar(props) {\r\n    propsG = props\r\n    const [open, setOpen] = React.useState(false)\r\n    return (\r\n        <Modal\r\n            className=\"modalcargar\"\r\n            basic\r\n            onClose={() => setOpen(false)}\r\n            onOpen={() => setOpen(true)}\r\n            open={open}\r\n            size='small'\r\n            trigger={<Menu.Item>Cargar</Menu.Item> }\r\n            >\r\n            <Header icon>\r\n                <Icon name='folder open outline' />\r\n                Cargar\r\n            </Header>\r\n            <Modal.Content>\r\n            </Modal.Content>\r\n                <Input className=\"inputcargar\" fluid type=\"file\" accept=\".json\" onChange={(e) =>  onChange(e)} />\r\n            <Modal.Actions>\r\n                <Button basic color='red' inverted onClick={() => setOpen(false)}>\r\n                <Icon name='remove' /> No\r\n                </Button>\r\n                <Button className=\"buttoncargar\" color='green' inverted onClick={() =>  setOpen(false)}>\r\n                <Icon name='checkmark' /> Si\r\n                </Button>\r\n            </Modal.Actions>\r\n            </Modal>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Menu } from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default class Navbar extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                    <Menu.Item>\r\n                        <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                    </Menu.Item>\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Card, Icon, Image } from 'semantic-ui-react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nvar colorcard ={\r\n    background: \"rgba(0, 0, 0, 0.1)\"\r\n}\r\n\r\n\r\nexport default class Division extends Component {\r\n\r\n   \r\n    render() {\r\n        return (\r\n                 <Card color = {this.props.color} style={colorcard}>\r\n                    <Image src={this.props.imagen} wrapped ui={false} />\r\n                    <Card.Content>\r\n                    <Card.Header style={{ color: 'white' }}>{this.props.title}</Card.Header>\r\n                    <Card.Description style={{ color: 'white' }}>\r\n                        {this.props.descripcion}\r\n                    </Card.Description>\r\n                    </Card.Content>\r\n                    <Card.Content extra>\r\n                    <a>\r\n                        <Icon className='angle double right icon' style={{ color: 'white' }}>\r\n                            <Link style={{ color: 'white' }} to={{pathname:\"/tytusds/20211SVAC/G03/build/estructura\", state:{nombre: this.props.title}}}>IR</Link>\r\n                         </Icon>\r\n                    </a>\r\n                    </Card.Content>\r\n                </Card>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Card } from 'semantic-ui-react'\r\nimport Division from './Division'\r\nimport './Divisiones.css'\r\n\r\n\r\nexport default class Divisiones extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"divisiones\"> \r\n            <div className=\"one\">\r\n                <h1 style={{ color: 'white' }}>TytusDS</h1>\r\n            </div>\r\n            \r\n            <br/>\r\n            <br/>\r\n            <Card.Group itemsPerRow={4} >\r\n                    <Division title=\"Ordenamiento Burbuja\" descripcion=\"this a description\" color='red' imagen=\"https://upload.wikimedia.org/wikipedia/commons/e/ef/Sorting_shaker_sort_anim.gif\"/>\r\n                    <Division title=\"Ordenamiento Selección\" descripcion=\"this a description\" color='green' imagen=\"https://upload.wikimedia.org/wikipedia/commons/a/a5/Smoothsort.gif\"/>\r\n                    <Division title=\"Ordenamiento Inserción\" descripcion=\"this a description\" color='yellow' imagen=\"https://thumbs.gfycat.com/DazzlingGracefulAngelfish-size_restricted.gif\"/>\r\n                    <Division title=\"Ordenamiento Rapido\" descripcion=\"this a description\" color='blue' imagen=\"https://media.geeksforgeeks.org/wp-content/uploads/20190705180519/quicksort.gif\"/>\r\n                   \r\n                    <Division title=\"Lista simplemente enlazada\" descripcion=\"this a description\" color='green' imagen=\"https://s6.gifyu.com/images/A-1.gif\"/>\r\n                    <Division title=\"Lista doblemente enlazada\" descripcion=\"this a description\" color='yellow' imagen=\"https://s6.gifyu.com/images/A-2.gif\"/>\r\n                    <Division title=\"Lista circular simplemente enlazada\" descripcion=\"this a description\" color='blue' imagen=\"https://s6.gifyu.com/images/A-4.gif\"/>\r\n                    <Division title=\"Lista circular doblemente enlazada\" descripcion=\"this a description\" color='violet' imagen=\"https://s6.gifyu.com/images/A-3.gif\"/>\r\n\r\n                    <Division title=\"Pila\" descripcion=\"this a description\" color='green' imagen=\"https://s6.gifyu.com/images/Pila.gif\"/>\r\n                    <Division title=\"Cola\" descripcion=\"this a description\" color='yellow' imagen=\"https://s6.gifyu.com/images/Cola.gif\"/>\r\n                    <Division title=\"Cola de prioridad\" descripcion=\"this a description\" color='blue' imagen=\"https://s6.gifyu.com/images/Cola-de-Prioridad.gif\"/>\r\n\r\n\r\n                    <Division title=\"Arbol ABB\" descripcion=\"this a description\" color='yellow' imagen=\"https://s6.gifyu.com/images/Arbol-ABB.gif\"/>\r\n                    <Division title=\"Arbol AVL\" descripcion=\"this a description\" color = 'green' imagen=\"https://s6.gifyu.com/images/Arbol-AVL.gif\"/>\r\n                    <Division title=\"Arbol B\" descripcion=\"this a description\"color='blue' imagen=\"https://s6.gifyu.com/images/Arbol-B.gif\"/>\r\n                    <Division title=\"Arbol B+\" descripcion=\"this a description\" color='violet' imagen=\"https://s6.gifyu.com/images/Arbol-B03b18e464b7dd774.gif\"/>\r\n                    <Division title=\"Arbol Merkle\" descripcion=\"this a description\" color=\"green\" imagen=\"https://s6.gifyu.com/images/Arbol-Merkle.gif\"/>\r\n            </Card.Group>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","var fs = require('fs')\r\nclass Nodo {\r\n    constructor(dato){\r\n        this.dato = dato\r\n        this.siguiente = null\r\n    }\r\n}\r\n\r\nclass Cola {\r\n    constructor(){\r\n        this.primero = null\r\n        this.ultimo = null\r\n        this.longitud = 0 \r\n    }\r\n\t\r\n\testaVacia() {\r\n        if (this.primero == null){\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    Agregar(dato){\r\n        let nuevoNodo = new Nodo(dato)\r\n\r\n        if(this.estaVacia()){\r\n            this.primero = nuevoNodo\r\n            this.ultimo = nuevoNodo\r\n        }else{\r\n            nuevoNodo.siguiente = this.primero\r\n            this.primero = nuevoNodo\r\n        }\r\n\r\n        this.longitud++\r\n    }\r\n\t\r\n\tPop(){\r\n        let eliminado = this.ultimo\r\n        if (this.primero == this.ultimo){\r\n            this.primero = null\r\n            this.ultimo = null\r\n        }else{\r\n            let nodoActual = this.primero\r\n            while (nodoActual.siguiente != eliminado){\r\n                nodoActual = nodoActual.siguiente\r\n            }\r\n\r\n            this.ultimo = nodoActual\r\n            this.ultimo.siguiente = null\r\n        }\r\n        this.longitud--\r\n    }\r\n\t\r\n\tImprimir(){\r\n        let text = \"\"\r\n        let nodoActual = this.primero\r\n\r\n        while (nodoActual != null){\r\n            text += nodoActual.dato + \"->\"\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            \r\n        }\r\n        text += \"null\"\r\n\r\n        return text\r\n    }\r\n\t\r\n\tactualizar(datoAnterior, datoNuevo){\r\n        let nodoActual = this.primero\r\n\r\n        while(nodoActual != null){\r\n            if(nodoActual.dato == datoAnterior){\r\n                nodoActual.dato = datoNuevo\r\n            }\r\n\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n    }\r\n\t\r\n\tbuscar (dato){\r\n        let datoEncontrado = null\r\n        let nodoActual = this.primero\r\n\r\n        while(nodoActual != null){\r\n            if(nodoActual.dato == dato){\r\n                datoEncontrado = \"El dato se encontró: \"+ nodoActual.dato\r\n                return datoEncontrado\r\n            }\r\n\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n        datoEncontrado = \"no se encontro el dato\"\r\n        return  datoEncontrado\r\n    }\r\n\t\r\n\teliminar(dato){\r\n       let nodoActual = this.primero\r\n        let nodoanterior = null\r\n\r\n        if(nodoActual != null && nodoActual.dato == dato){\r\n            this.primero = nodoActual.siguiente\r\n            return\r\n        }\r\n\r\n        while(nodoActual != null && nodoActual.dato != dato){\r\n            nodoanterior = nodoActual\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n\r\n        if (nodoActual == null){\r\n            return\r\n        }\r\n\r\n        nodoanterior.siguiente = nodoActual.siguiente;\r\n    }\r\n\t\r\n\tcargar(arr){\r\n        arr.map(e => {\r\n            this.Agregar(e)\r\n        })\r\n    }\r\n\r\n    guardar(arr){\r\n        var archivoJSON = JSON.stringify(arr)\r\n\r\n        fs.writeFile(\"Cola.json\", archivoJSON)\r\n    }\r\n\t\r\n\tRecorrido(datoBuscar){\r\n        let arreglo = []\r\n        let nodoActual = this.primero\r\n        let contador = 0\r\n\r\n        while (nodoActual != null){\r\n            let dato = {id: contador, label: nodoActual.dato.toString(),}\r\n            arreglo[contador] = dato\r\n\r\n            if(nodoActual.dato == datoBuscar){\r\n                let dato = {id: contador, label: nodoActual.dato.toString(),  color: \"lime\"}\r\n                arreglo[contador] = dato\r\n            }\r\n\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            contador++\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n\r\n}\r\n\r\nexport default Cola;","var fs = require('fs')\r\nclass Nodo {\r\n    constructor(dato, prioridad){\r\n        this.dato = dato\r\n        this.prioridad = prioridad\r\n        this.siguiente = null\r\n    }\r\n}\r\n\r\nclass ColaPrioridad {\r\n    constructor(){\r\n        this.primero = null\r\n        this.ultimo = null\r\n        this.longitud = 0 \r\n    }\r\n\t\r\n\testaVacia() {\r\n        if (this.primero == null){\r\n            return true\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n    Agregar(dato,prioridad){\r\n        let nuevoNodo = new Nodo(dato,prioridad)\r\n\r\n        if(this.estaVacia()){\r\n            this.primero = nuevoNodo\r\n            this.ultimo = nuevoNodo\r\n        }else{\r\n\r\n            nuevoNodo.siguiente = this.primero\r\n            this.primero = nuevoNodo\r\n            // Ordenando cola segun la prioridad\r\n            let temp,nodoActual,temp1\r\n            nodoActual = this.primero\r\n            let siguiente = nodoActual.siguiente\r\n            while(nodoActual.siguiente != null){\r\n            \r\n                if(nodoActual.prioridad > siguiente.prioridad){\r\n                    temp = nodoActual.dato\r\n                    temp1 = nodoActual.prioridad\r\n                    nodoActual.dato = siguiente.dato\r\n                    nodoActual.prioridad = siguiente.prioridad\r\n                    siguiente.dato = temp\r\n                    siguiente.prioridad = temp1\r\n        \r\n                    nodoActual = nodoActual.siguiente\r\n                    siguiente = siguiente.siguiente\r\n                }else{\r\n                    nodoActual = nodoActual.siguiente\r\n                    siguiente = siguiente.siguiente\r\n                }\r\n            }\r\n        }\r\n\r\n        this.longitud++\r\n    }\r\n\t\r\n\t Pop(){\r\n        let eliminado = this.ultimo\r\n        if (this.primero == this.ultimo){\r\n            this.primero = null\r\n            this.ultimo = null\r\n        }else{\r\n            let nodoActual = this.primero\r\n            while (nodoActual.siguiente != eliminado){\r\n                nodoActual = nodoActual.siguiente\r\n            }\r\n\r\n            this.ultimo = nodoActual\r\n            this.ultimo.siguiente = null\r\n        }\r\n        this.longitud--\r\n    }\r\n\t\r\n\t Imprimir(){\r\n        let text = \"\"\r\n        let nodoActual = this.primero\r\n\r\n        while (nodoActual != null){\r\n            text += nodoActual.dato + \"->\"\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            \r\n        }\r\n        text += \"null\"\r\n\r\n        console.log(text)\r\n    }\r\n\r\n    actualizar(datoAnterior, datoNuevo){\r\n        let nodoActual = this.primero\r\n\r\n        while(nodoActual != null){\r\n            if(nodoActual.dato == datoAnterior){\r\n                nodoActual.dato = datoNuevo\r\n            }\r\n\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n    }\r\n\r\n    buscar (dato){\r\n        let datoEncontrado = null\r\n        let nodoActual = this.primero\r\n\r\n        while(nodoActual != null){\r\n            if(nodoActual.dato == dato){\r\n                datoEncontrado = \"El dato se encontró: \"+ nodoActual.dato\r\n                return datoEncontrado\r\n            }\r\n\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n        datoEncontrado = \"no se encontro el dato\"\r\n        return  datoEncontrado\r\n    }\r\n\t\r\n\teliminar(dato){\r\n       let nodoActual = this.primero\r\n        let nodoanterior = null\r\n\r\n        if(nodoActual != null && nodoActual.dato == dato){\r\n            this.primero = nodoActual.siguiente\r\n            return\r\n        }\r\n\r\n        while(nodoActual != null && nodoActual.dato != dato){\r\n            nodoanterior = nodoActual\r\n            nodoActual = nodoActual.siguiente\r\n        }\r\n\r\n        if (nodoActual == null){\r\n            return\r\n        }\r\n\r\n        nodoanterior.siguiente = nodoActual.siguiente;\r\n    }\r\n    \r\n    cargar(arr){\r\n        arr.map(e => {\r\n            this.Agregar(e.valor,e.prioridad)\r\n        })\r\n    }\r\n\r\n    guardar(arr){\r\n        var archivoJSON = JSON.stringify(arr)\r\n\r\n        fs.writeFile(\"Cola.json\", archivoJSON)\r\n    }\r\n\t\r\n\tRecorrido(datoBuscar){\r\n        let arreglo = []\r\n        let nodoActual = this.primero\r\n        let contador = 0\r\n\r\n        while (nodoActual != null){\r\n            let dato = {id: contador, label: nodoActual.dato.toString(),}\r\n            arreglo[contador] = dato\r\n\r\n            if(nodoActual.dato == datoBuscar){\r\n                let dato = {id: contador, label: nodoActual.dato.toString(),  color: \"lime\"}\r\n                arreglo[contador] = dato\r\n            }\r\n\r\n            if(nodoActual.siguiente != null){\r\n                nodoActual = nodoActual.siguiente\r\n            }else{\r\n                nodoActual = null\r\n            }\r\n            contador++\r\n        }\r\n\r\n        return arreglo\r\n    }\r\n}\r\n\r\n\r\nexport default ColaPrioridad;","//Clase Nodo\r\nclass Nodo{\r\n    constructor(dato){  //Constructor\r\n        this.dato = dato\r\n        this.izquierda = null\r\n        this.derecha = null\r\n    }\r\n}\r\n//Clase Arbol Binario de Busqueda\r\nclass ABB{\r\n    //Constructor\r\n    constructor(){\r\n        this.raiz = null\r\n    }\r\n\r\n    //Metodo Insertar\r\n    insertar(dato){\r\n        this.raiz = this.add(dato, this.raiz)\r\n        console.log(\"Inserto un nodo\" )\r\n    }\r\n\r\n    //Sub Metodo Insertar\r\n    add(dato, nodo){\r\n        if(nodo == null){\r\n            return new Nodo(dato)\r\n        }else{\r\n            if(dato > nodo.dato){\r\n                nodo.derecha =  this.add(dato,nodo.derecha)\r\n            }else{\r\n                nodo.izquierda =  this.add(dato,nodo.izquierda)\r\n            }\r\n        }\r\n        return nodo\r\n    }\r\n\r\n    //Metodo Buscar\r\n    buscar(dato, nodo){\r\n        if(nodo!= null){\r\n            if(dato == nodo.dato){\r\n                console.log(nodo.dato + \" fue encontrado\")\r\n                return \r\n            }\r\n            this.buscar(dato, nodo.izquierda)\r\n            this.buscar(dato, nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //SubMetodo Buscar\r\n    buscando(dato){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        if(dato == this.raiz.dato){\r\n            console.log(this.raiz.dato)\r\n            return\r\n        }\r\n        let nodo = this.raiz\r\n        this.buscar(dato, nodo)\r\n    }\r\n\r\n    //Metodo Imprimir\r\n    imprimir(nodo){\r\n        if(nodo != null){\r\n            console.log(nodo.dato)\r\n            this.imprimir(nodo.izquierda)\r\n            this.imprimir(nodo.derecha)\r\n        }\r\n    }\r\n\r\n    //Sub Metodo Imprimir\r\n    imprimiendo(){\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        this.imprimir(this.raiz)\r\n    }\r\n\r\n    //Metodo Eliminar\r\n    eliminando(dato){\r\n        //Caso1: no existe arbol\r\n        if(this.raiz ==null){\r\n            console.log(\"No existe arbol\")\r\n            return\r\n        }\r\n        //asignando valor inicial\r\n        let nodo = this.raiz\r\n        this.eliminar(dato, nodo)\r\n    }\r\n\r\n    //Sub Metodo Eliminar\r\n    eliminar(dato, nodo){\r\n        //Caso2: el dato a buscar se encuentra en la raiz\r\n        if(dato == this.raiz.dato){\r\n            if(nodo.izquierda != null){\r\n                let nodiz = nodo.izquierda\r\n                let maxiz= null\r\n                if(nodiz.derecha != null){\r\n                    maxiz = this.maxIzq(nodo.izquierda)\r\n                }else{\r\n                    maxiz = nodo.izquierda\r\n                    if(nodo.derecha != null){\r\n                        let enlace = nodo.derecha\r\n                        maxiz.derecha = enlace\r\n                        nodo.derecha = null\r\n                    }\r\n                    nodo.izquierda = null\r\n                    console.log(\"se elimino el nodo\")\r\n                    return\r\n                }\r\n                let nodmax = new nodo(maxiz)\r\n                let trasiz = null\r\n                let trasder = null\r\n                if(nodo.izquierda!=null){\r\n                    trasiz = nodo.izquierda\r\n                }\r\n                if(nodo.derecha != null){\r\n                    trasder = nodo.derecha\r\n                }\r\n                if(trasiz != null){\r\n                    nodmax.izquierda = trasiz\r\n                    nodo.izquierda = null\r\n                }\r\n                if(trasder != null){\r\n                    nodmax.derecha = trasder\r\n                    nodo.derecha = null\r\n                }\r\n                console.log(\"se elimino el nodo\")\r\n                return\r\n            }else if(nodo.izquierda == null && nodo.derecha != null){\r\n                let nodiz = nodo.derecha\r\n                let minder= null\r\n                if(nodiz.izquierda != null){\r\n                    minder = this.minDer(nodo.derecha) // minder con valor de dato\r\n                }else{\r\n                    minder = nodo.derecha // miner con valor de nodo\r\n                    if(nodo.izquierda != null){\r\n                        let enlace = nodo.izquierda\r\n                        minder.izquierda = enlace\r\n                        nodo.izquierda = null\r\n                    }\r\n                    this.raiz = nodo.derecha\r\n                    nodo.derecha = null\r\n                    console.log(\"se elimino el nodo\")\r\n                    return\r\n                }\r\n                let nodmin = new nodo(minder)\r\n                let trasiz = null\r\n                let trasder = null\r\n                if(nodo.izquierda!=null){\r\n                    trasiz = nodo.izquierda\r\n                }\r\n                if(nodo.derecha != null){\r\n                    trasder = nodo.derecha\r\n                }\r\n                if(trasiz != null){\r\n                    nodmin.izquierda = trasiz\r\n                    nodo.izquierda = null\r\n                }\r\n                if(trasder != null){\r\n                    nodmin.derecha = trasder\r\n                    nodo.derecha = null\r\n                }\r\n                this.raiz = nodmin\r\n                console.log(\"se elimino el nodo\")\r\n                return\r\n            }else{\r\n                this.raiz = null\r\n                return\r\n            }\r\n        }\r\n        //Demas Casos: eliminacion dentro del arbol\r\n        if(nodo.izquierda!= null){\r\n            //Dato encontrado a la izquierda\r\n            if(dato == nodo.izquierda.dato){\r\n                let tmp = nodo.izquierda\r\n                //Caso3: Eliminacion de hijo a la izquierda\r\n                if(tmp.izquierda == null && tmp.derecha == null){\r\n                    nodo.izquierda = null\r\n                    console.log(\"nodo hoja fue eliminado con exito\")\r\n                    return\r\n                }else{ // Caso 4: Eliminacion de no hijo a la izquierda\r\n                    if(tmp.izquierda != null){ // Reestructuracion de arbol y eliminacion de nodo\r\n                        let nodiz = tmp.izquierda\r\n                        let maxiz= null\r\n                        if(nodiz.derecha != null){\r\n                            maxiz = this.maxIzq(tmp.izquierda) // maxiz con valor de dato \r\n                        }else{\r\n                            maxiz = tmp.izquierda // maxiz con valor de nodo\r\n                            if(tmp.derecha != null){\r\n                                let enlace = tmp.derecha\r\n                                maxiz.derecha = enlace\r\n                                tmp.derecha = null\r\n                            }\r\n                            tmp.izquierda = null\r\n                            nodo.izquierda = maxiz\r\n                            console.log(\"se elimino el nodo\")\r\n                            return\r\n                        }\r\n                        let nodmax = new nodo(maxiz)\r\n                        let trasiz = null\r\n                        let trasder = null\r\n                        if(tmp.izquierda!=null){\r\n                            trasiz = tmp.izquierda\r\n                        }\r\n                        if(tmp.derecha != null){\r\n                            trasder = tmp.derecha\r\n                        }\r\n                        if(trasiz != null){\r\n                            nodmax.izquierda = trasiz\r\n                            tmp.izquierda = null\r\n                        }\r\n                        if(trasder != null){\r\n                            nodmax.derecha = trasder\r\n                            tmp.derecha = null\r\n                        }\r\n                        nodo.izquierda = nodmax\r\n                        console.log(\"se elimino el nodo\")\r\n                        return\r\n                    }else if(tmp.izquierda == null && tmp.derecha != null){ // Reestructuracion de arbol y eliminacion de nodo\r\n                        let nodiz = tmp.derecha\r\n                        let minder= null\r\n                        if(nodiz.izquierda != null){\r\n                            minder = this.minDer(tmp.derecha) // minder con valor de dato \r\n                        }else{\r\n                            minder = tmp.derecha // minder con valor de nodo\r\n                            if(tmp.izquierda != null){\r\n                                let enlace = tmp.izquierda\r\n                                minder.izquierda = enlace\r\n                                tmp.izquierda = null\r\n                            }\r\n                            nodo.derecha = minder\r\n                            tmp.derecha = null\r\n                            console.log(\"se elimino el nodo\")\r\n                            return\r\n                        }\r\n                        let nodmin = new nodo(minder)\r\n                        let trasiz = null\r\n                        let trasder = null\r\n                        if(tmp.izquierda!=null){\r\n                            trasiz = tmp.izquierda\r\n                        }\r\n                        if(tmp.derecha != null){\r\n                            trasder = tmp.derecha\r\n                        }\r\n                        if(trasiz != null){\r\n                            nodmin.izquierda = trasiz\r\n                            tmp.izquierda = null\r\n                        }\r\n                        if(trasder != null){\r\n                            nodmin.derecha = trasder\r\n                            tmp.derecha = null\r\n                        }\r\n                        nodo.derecha = nodmin\r\n                        console.log(\"se elimino el nodo\")\r\n                        return\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(nodo.derecha != null){\r\n // Caso 5: Eliminacion de hijo a la derecha\r\n            if(dato == nodo.derecha.dato){\r\n                let tmp = nodo.derecha\r\n                if(tmp.izquierda == null && tmp.derecha == null){\r\n                    nodo.derecha = null\r\n                    console.log(\"nodo hoja fue eliminado con exito\")\r\n                    return\r\n                }else{ // Caso 6: Eliminacion de no hijo a la derecha\r\n                    if(tmp.derecha != null){ // Reestructuracion de arbol y eliminacion de nodo\r\n                        let nodiz = tmp.derecha\r\n                        let minder= null\r\n                        if(nodiz.izquierda != null){\r\n                            minder = this.minDer(tmp.derecha) // minder con valor de dato \r\n                        }else{\r\n                            minder = tmp.derecha // minder con valor de nodo\r\n                            if(tmp.izquierda != null){\r\n                                let enlace = tmp.izquierda\r\n                                minder.izquierda = enlace\r\n                                tmp.izquierda = null\r\n                            }\r\n                            nodo.derecha = minder\r\n                            tmp.derecha = null\r\n                            console.log(\"se elimino el nodo\")\r\n                            return\r\n                        }\r\n                        let nodmin = new nodo(minder)\r\n                        let trasiz = null\r\n                        let trasder = null\r\n                        if(tmp.izquierda!=null){\r\n                            trasiz = tmp.izquierda\r\n                        }\r\n                        if(tmp.derecha != null){\r\n                            trasder = tmp.derecha\r\n                        }\r\n                        if(trasiz != null){\r\n                            nodmin.izquierda = trasiz\r\n                            tmp.izquierda = null\r\n                        }\r\n                        if(trasder != null){\r\n                            nodmin.derecha = trasder\r\n                            tmp.derecha = null\r\n                        }\r\n                        nodo.derecha = nodmin\r\n                    }else if(tmp.derecha == null && tmp.izquierda != null){ // Reestructuracion de arbol y eliminacion de nodo\r\n                        let nodiz = tmp.izquierda\r\n                        let maxiz= null\r\n                        if(nodiz.derecha != null){\r\n                            maxiz = this.maxIzq(tmp.izquierda) // maxiz con valor de dato \r\n                        }else{\r\n                            maxiz = tmp.izquierda // maxiz con valor de nodo\r\n                            if(tmp.derecha != null){\r\n                                let enlace = tmp.derecha\r\n                                maxiz.derecha = enlace\r\n                                tmp.derecha = null\r\n                            }\r\n                            tmp.izquierda = null\r\n                            nodo.izquierda = maxiz\r\n                            console.log(\"se elimino el nodo\")\r\n                            return\r\n                        }\r\n                        let nodmax = new nodo(maxiz)\r\n                        let trasiz = null\r\n                        let trasder = null\r\n                        if(tmp.izquierda!=null){\r\n                            trasiz = tmp.izquierda\r\n                        }\r\n                        if(tmp.derecha != null){\r\n                            trasder = tmp.derecha\r\n                        }\r\n                        if(trasiz != null){\r\n                            nodmax.izquierda = trasiz\r\n                            tmp.izquierda = null\r\n                        }\r\n                        if(trasder != null){\r\n                            nodmax.derecha = trasder\r\n                            tmp.derecha = null\r\n                        }\r\n                        nodo.izquierda = nodmax\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if(nodo.izquierda !=null){\r\n            this.eliminar(dato, nodo.izquierda)\r\n        }\r\n       if(nodo.derecha != null){\r\n            this.eliminar(dato, nodo.derecha)\r\n       }\r\n    }\r\n\r\n    //Metodo de obtencion para maximo valor a la Izquierda\r\n    maxIzq(nodo){\r\n        if (nodo.derecha != null){\r\n            let tmp = nodo.derecha\r\n            if(tmp.derecha !=null){\r\n                this.maxIzq(tmp)\r\n            }else{\r\n                var mandardato = tmp.dato\r\n                if(tmp.izquierda != null){\r\n                    nodo.derecha = tmp.izquierda\r\n                    tmp.izquierda = null\r\n                }else{\r\n                    nodo.derecha = null\r\n                }\r\n                return mandardato\r\n            }\r\n        }\r\n    }\r\n\r\n    //Metodo de obtencion para minimo valor a la Derecha\r\n    minDer(nodo){\r\n        if (nodo.izquierda != null){\r\n            let tmp = nodo.izquierda\r\n            if(tmp.izquierda !=null){\r\n                this.minDer(tmp)\r\n            }else{\r\n                var mandardato = tmp.dato\r\n                if(tmp.derecha != null){\r\n                    nodo.izquierda = tmp.derecha\r\n                    tmp.derecha = null\r\n                }else{\r\n                    nodo.izquierda = null\r\n                }\r\n                return mandardato\r\n            }\r\n        }\r\n    }\r\n\r\n    //Metodo Actualizar\r\n    actualizar(datoborr, datoin){\r\n        if(this.raiz==null){\r\n            console.log(\"no existe ningun arbol\")\r\n        }\r\n        this.eliminando(datoborr)\r\n        this.insertar(datoin)\r\n        console.log(\"Actualizado\")\r\n    }\r\n\r\n    cargar(arreglo) {\r\n        arreglo.map(e => {\r\n            this.insertar(e)\r\n        })\r\n    }\r\n    \r\n    graficarNodos(nodo,vector,datoBuscar){\r\n\r\n        if(nodo.izquierda == null && nodo.derecha == null){\r\n            let dato\r\n            if(datoBuscar == nodo.dato){\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(), color: \"lime\"}\r\n            }else{\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(),}\r\n            }\r\n            \r\n            vector.push(dato)\r\n        }else{\r\n            let dato\r\n            if(datoBuscar == nodo.dato){\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(), color: \"lime\"}\r\n            }else{\r\n                dato = {id: nodo.dato, label: nodo.dato.toString(),}\r\n            }\r\n            \r\n            vector.push(dato)\r\n        }\r\n        \r\n        if(nodo.izquierda != null){\r\n            this.graficarNodos(nodo.izquierda,vector,datoBuscar)\r\n        }\r\n\r\n        if (nodo.derecha != null){\r\n            this.graficarNodos(nodo.derecha,vector,datoBuscar)\r\n        }\r\n\r\n        return vector\r\n    }\r\n\r\n    obtenerNodos(datoBuscar){\r\n        let vector = []\r\n\r\n        return this.graficarNodos(this.raiz,vector,datoBuscar)\r\n    }\r\n\r\n    graficarApuntadores(nodo,vector){\r\n\r\n        if(nodo.izquierda != null){\r\n            this.graficarApuntadores(nodo.izquierda,vector)\r\n            let edge = {from:nodo.dato, to:nodo.izquierda.dato}\r\n            vector.push(edge)\r\n        }\r\n\r\n        if (nodo.derecha != null){\r\n            this.graficarApuntadores(nodo.derecha,vector)\r\n            let edge = {from:nodo.dato, to:nodo.derecha.dato}\r\n            vector.push(edge)\r\n        }\r\n\r\n        return vector\r\n    }\r\n\r\n    obtenerAputadores(){\r\n        let vector = []\r\n\r\n        return this.graficarApuntadores(this.raiz,vector)\r\n    }\r\n}\r\n\r\nexport default ABB;","\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\nimport './modal.css'\r\nimport React, { Component } from 'react'\r\nimport Cola from '../estructuras/EstructurasLineales/Cola'\r\nimport ColaPrioridad from '../estructuras/EstructurasLineales/ColaPrioridad'\r\nimport ABB from '../estructuras/Estructuras_Arboreas/ABB'\r\n\r\n\r\nexport default class Agregar extends Component {\r\n\r\n    state={\r\n           open: false,\r\n           textoDato: \"\" ,\r\n           prioridad: \"\"\r\n    }\r\n\r\n\r\n    swtEdd=()=>{\r\n        let nombre = this.props.nombre\r\n        let edd = this.props.edd\r\n        let dato = this.state.textoDato\r\n        let prioridad = this.state.prioridad\r\n        switch(nombre){\r\n            case \"Pila\" :\r\n                if(edd == null){\r\n                    edd = new Cola();\r\n                }\r\n                edd.cargar(dato)\r\n                break\r\n            case \"Cola\":\r\n                if(edd == null){\r\n                    edd = new Cola();\r\n                }\r\n                edd.Agregar(dato)\r\n                break\r\n            case \"Cola de prioridad\":\r\n                if(edd == null){\r\n                    edd = new ColaPrioridad();\r\n                }\r\n                edd.Agregar(dato,prioridad)\r\n                break\r\n            case \"Lista simplemente enlazada\":\r\n    \r\n                /* edd = new Cola();\r\n                edd.cargar(datos) */\r\n                break\r\n    \r\n            case \"Lista doblemente enlazada\":\r\n    \r\n                 edd = new Cola();\r\n                edd.cargar(dato) \r\n                break\r\n    \r\n            case \"Lista circular simplemente enlazada\":\r\n    \r\n                /* edd = new Cola();\r\n                edd.cargar(datos) */\r\n                break\r\n    \r\n            case \"Lista circular doblemente enlazada\":\r\n    \r\n                edd = new Cola();\r\n                edd.cargar(dato) \r\n                break\r\n            case \"Arbol ABB\":\r\n    \r\n                if(edd == null){\r\n                    edd = new ABB();\r\n                }\r\n                edd.insertar(dato) \r\n                console.log(edd.obtenerNodos())\r\n                console.log(edd.obtenerAputadores())\r\n                break\r\n            default:\r\n                break;\r\n        }\r\n        this.props.obtenerDatos(edd);\r\n    }\r\n\r\n    obtenerText = e =>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    render() {\r\n       if(this.props.nombre=== \"Cola de prioridad\"){\r\n        return (\r\n            <Modal\r\n                className=\"modalAgregar\"\r\n                basic\r\n                onClose={() => this.setState({open: false})}\r\n                onOpen={() =>  this.setState({open: true})}\r\n                open={this.state.open}\r\n                size='small'\r\n                trigger={<Menu.Item>Agregar</Menu.Item>}\r\n                >\r\n                <Header icon>\r\n                    <Icon name='add' />\r\n                    Agregar Dato\r\n                </Header>\r\n                <Modal.Content>\r\n                        <Input className=\"inputAgregar\" type=\"text\" name=\"textoDato\" value={this.state.textoDato}  fluid placeholder=\"agregar dato\" onChange={this.obtenerText}/>\r\n                        <br/>\r\n                        <Input className=\"inputAgregar\" type=\"text\" name=\"prioridad\" value={this.state.prioridad}  fluid placeholder=\"agregar prioridad\" onChange={this.obtenerText}/>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() =>  this.setState({open: false})}>\r\n                    <Icon name='remove' /> No\r\n                    </Button>\r\n                    <Button className=\"buttonAgregar\" color='green' inverted onClick={this.swtEdd}>\r\n                    <Icon name='checkmark' /> Si\r\n                    </Button>\r\n                </Modal.Actions>\r\n                </Modal>\r\n        )\r\n\r\n       }else{\r\n        return (\r\n            <Modal\r\n                className=\"modalAgregar\"\r\n                basic\r\n                onClose={() => this.setState({open: false})}\r\n                onOpen={() =>  this.setState({open: true})}\r\n                open={this.state.open}\r\n                size='small'\r\n                trigger={<Menu.Item>Agregar</Menu.Item>}\r\n                >\r\n                <Header icon>\r\n                    <Icon name='add' />\r\n                    Agregar Dato\r\n                </Header>\r\n                <Modal.Content>\r\n                        <Input className=\"inputAgregar\" type=\"text\" name=\"textoDato\" value={this.state.textoDato}  fluid placeholder=\"agregar dato\" onChange={this.obtenerText}/>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() =>  this.setState({open: false})}>\r\n                    <Icon name='remove' /> No\r\n                    </Button>\r\n                    <Button className=\"buttonAgregar\" color='green' inverted onClick={this.swtEdd}>\r\n                    <Icon name='checkmark' /> Si\r\n                    </Button>\r\n                </Modal.Actions>\r\n                </Modal>\r\n        )\r\n       }\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\n\r\n\r\n\r\n\r\nexport default class Eliminar extends Component {\r\n\r\n    state={\r\n        open: false,\r\n        textoDato: \"\" \r\n    }\r\n\r\n    swtEdd=()=>{\r\n        let nombre = this.props.nombre\r\n        let edd = this.props.edd\r\n        let dato = this.state.textoDato\r\n        switch(nombre){\r\n            case \"Pila\" :\r\n                edd.eliminar(dato)\r\n                break\r\n            case \"Cola\":\r\n                edd.eliminar(dato)\r\n                break\r\n            case \"Cola de prioridad\":\r\n                edd.eliminar(dato)\r\n                break\r\n            case \"Lista simplemente enlazada\":\r\n    \r\n                /* edd = new Cola();\r\n                edd.cargar(datos) */\r\n                break\r\n    \r\n            case \"Lista doblemente enlazada\":\r\n    \r\n                edd.cargar(dato) \r\n                break\r\n    \r\n            case \"Lista circular simplemente enlazada\":\r\n    \r\n                /* edd = new Cola();\r\n                edd.cargar(datos) */\r\n                break\r\n    \r\n            case \"Lista circular doblemente enlazada\":\r\n    \r\n                \r\n                break\r\n            case \"Arbol ABB\":\r\n                edd.eliminando(dato);\r\n                break\r\n            default:\r\n                break;\r\n        }\r\n        this.props.obtenerDatos(edd);\r\n    }\r\n\r\n    obtenerText = e =>{\r\n       this.setState({\r\n           [e.target.name]: e.target.value\r\n       })\r\n       }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n                basic\r\n                onClose={() => this.setState({open: false})}\r\n                onOpen={() => this.setState({open: true})}\r\n                open={this.state.open}\r\n                size='small'\r\n                trigger={<Menu.Item>Eliminar</Menu.Item>}\r\n                >\r\n                <Header icon>\r\n                    <Icon name='trash' />\r\n                    Eliminar Dato\r\n                </Header>\r\n                <Modal.Content>\r\n                        <Input type=\"text\" fluid name=\"textoDato\" value={this.state.textoDato} onChange={this.obtenerText} placeholder=\"Eliminanr dato\"/>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button basic color='red' inverted onClick={() => this.setState({open: false})}>\r\n                    <Icon name='remove' /> No\r\n                    </Button>\r\n                    <Button color='green' inverted onClick={this.swtEdd}>\r\n                    <Icon name='checkmark' /> Yes\r\n                    </Button>\r\n                </Modal.Actions>\r\n                </Modal>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\n\r\nimport Cola from '../estructuras/EstructurasLineales/Cola'\r\n\r\nexport default class Actualizar extends Component {\r\n\r\n    state={\r\n        open: false,\r\n        datoAnterior: \"\" ,\r\n        datoNuevo: \"\"\r\n }\r\n\r\n    swtEdd=()=>{\r\n        let nombre = this.props.nombre\r\n        let edd = this.props.edd\r\n        let datoAnterior = this.state.datoAnterior\r\n        let datoNuevo = this.state.datoNuevo\r\n        switch(nombre){\r\n            case \"Pila\" :\r\n                if(edd == null){\r\n                    edd = new Cola();\r\n                }\r\n              //  edd.cargar(dato)\r\n                break\r\n            case \"Cola\":\r\n                if(edd == null){\r\n                    edd = new Cola();\r\n                }\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Cola de prioridad\":\r\n                if(edd == null){\r\n                    edd = new Cola();\r\n                }\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            case \"Lista simplemente enlazada\":\r\n\r\n                /* edd = new Cola();\r\n                edd.cargar(datos) */\r\n                break\r\n\r\n            case \"Lista doblemente enlazada\":\r\n\r\n                /* edd = new Cola();\r\n                edd.cargar(dato)  */\r\n                break\r\n\r\n            case \"Lista circular simplemente enlazada\":\r\n\r\n                /* edd = new Cola();\r\n                edd.cargar(datos) */\r\n                break\r\n\r\n            case \"Lista circular doblemente enlazada\":\r\n\r\n               /*  edd = new Cola();\r\n                edd.cargar(dato)  */\r\n                break\r\n            case \"Arbol ABB\":\r\n                console.log(\"actualizando ABB\")\r\n                edd.actualizar(datoAnterior,datoNuevo)\r\n                break\r\n            default:\r\n                break;\r\n        }\r\n        this.props.obtenerDatos(edd);\r\n    }\r\n\r\n obtenerText = e =>{\r\n    this.setState({\r\n        [e.target.name]: e.target.value\r\n    })\r\n    }\r\n    render() {\r\n        return (\r\n            <Modal\r\n            basic\r\n            onClose={() =>this.setState({open: false})}\r\n            onOpen={() => this.setState({open: true})}\r\n            open={this.state.open}\r\n            size='small'\r\n            trigger={<Menu.Item>Actualizar</Menu.Item>}\r\n            >\r\n            <Header icon>\r\n                <Icon name='edit' />\r\n                Actualizar Dato\r\n            </Header>\r\n            <Modal.Content>\r\n                    <Input type=\"text\" name=\"datoAnterior\" value={this.state.datoAnterior} fluid placeholder=\"Dato Anterior\" onChange={this.obtenerText}/>\r\n                    <br/>\r\n                    <Input type=\"text\" name=\"datoNuevo\" value={this.state.datoNuevo} fluid placeholder=\"Dato Nuevo\" onChange={this.obtenerText}/>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button basic color='red' inverted onClick={() => this.setState({open: false})}>\r\n                <Icon name='remove' /> No\r\n                </Button>\r\n                <Button color='green' inverted onClick={this.swtEdd}>\r\n                <Icon name='checkmark' /> Yes\r\n                </Button>\r\n            </Modal.Actions>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react'\r\nimport Graph from \"react-graph-vis\";\r\n\r\nexport default function GraficaListas(props) {\r\n\r\n    let nodosAfuera = props.edd.Recorrido()\r\n    if(props.buscar != \"\"){\r\n      nodosAfuera = props.edd.Recorrido(props.buscar)\r\n    }\r\n    let uniones = edgeF()\r\n\r\n\r\n    function edgeF(){\r\n      let edgefuera = []\r\n      for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n        let edge = {from:i, to:i+1}\r\n        edgefuera[i] = edge\r\n        \r\n      }\r\n\r\n      if(props.nombre == \"Lista doblemente\"){\r\n          let contador = nodosAfuera.length-1\r\n          for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n              let edge = {from:i+1, to:i}\r\n              edgefuera[contador] = edge\r\n              contador++\r\n          }\r\n          \r\n      }\r\n\r\n      return edgefuera\r\n    }\r\n\r\n    console.log(nodosAfuera)\r\n    console.log(uniones)\r\n\r\n    const graph = {\r\n        nodes: nodosAfuera.map((node, index, arr) => {\r\n          const angle = 2 * (index / arr.length +0.75 );\r\n          node.x = 9000 * angle;\r\n          node.y = 10 * angle;\r\n          if (index % 2 === 0) {\r\n            node.value = index + 1;\r\n          }\r\n          return node;\r\n        }),\r\n\r\n        edges: uniones\r\n      };\r\n     \r\n\r\n\r\n\r\n      const diseño = {\r\n          direction: 'LR'\r\n      }\r\n\r\n      const options = {\r\n        physics: false,\r\n        edges: {\r\n            color: \"white\",\r\n            width: 2,\r\n            shadow: true\r\n          },\r\n          nodes:{\r\n            shape:\"box\",\r\n            color: \"red\",\r\n            font: {\r\n              size: 32,\r\n              color: \"#ffffff\",\r\n            },\r\n            borderWidth: 2,\r\n            shadow: true\r\n        },\r\n        interaction: {\r\n          navigationButtons: true,\r\n          keyboard: true,\r\n        }\r\n        ,\r\n        height: \"500px\"\r\n      };\r\n     \r\n      const events = {\r\n        select: function(event) {\r\n          var { nodes, edges } = event;\r\n        }\r\n      };\r\n      return (\r\n        <Graph\r\n          graph={graph}\r\n          options={options}\r\n          events={events}\r\n          getNetwork={network => {\r\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n          }}\r\n        />\r\n      );\r\n}\r\n","import React from 'react'\r\nimport Graph from \"react-graph-vis\";\r\n\r\nexport default function GraficaListaCircular(props) {\r\n\r\n    let nodosAfuera = props.edd.Recorrido()\r\n    if(props.buscar != \"\"){\r\n      nodosAfuera = props.edd.Recorrido(props.buscar)\r\n    }\r\n    let edgefuera =[]\r\n\r\n    for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n        let edge = {from:i, to:i+1}\r\n        edgefuera[i] = edge\r\n\r\n        if(i == nodosAfuera.length-2){\r\n            let edge = {from:nodosAfuera.length-1, to:0}\r\n            edgefuera[nodosAfuera.length-1] = edge\r\n        }\r\n        \r\n    }\r\n\r\n    if(props.nombre == \"Lista circular doblemente Enlazada\"){\r\n        let contador = nodosAfuera.length\r\n        for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n            let edge = {from:i+1, to:i}\r\n            edgefuera[contador] = edge\r\n            contador++\r\n            if(i == nodosAfuera.length-2){\r\n                let edge = {from:0, to:nodosAfuera.length-1}\r\n                edgefuera[contador] = edge\r\n            }\r\n        }\r\n    }\r\n    console.log(edgefuera)\r\n\r\n    const graph = {\r\n        nodes: nodosAfuera.map((node, index, arr) => {\r\n            const angle = 2 * Math.PI * (index / arr.length + 0.75);\r\n            node.x = 1000 * Math.cos(angle);\r\n            node.y = 1000 * Math.sin(angle);\r\n            if (index % 2 === 0) {\r\n              node.value = index + 1;\r\n            }\r\n            return node;\r\n        }),\r\n\r\n        edges: edgefuera\r\n      };\r\n     \r\n\r\n\r\n      const options = {\r\n        physics: false,\r\n        edges: {\r\n            color: \"white\",\r\n            width: 2,\r\n            shadow: true\r\n          },\r\n        nodes:{\r\n            shape:\"box\",\r\n            color: \"red\",\r\n            font: {\r\n              size: 32,\r\n              color: \"#ffffff\",\r\n            },\r\n            borderWidth: 2,\r\n            shadow: true\r\n        },\r\n        height: \"500px\"\r\n      };\r\n     \r\n      const events = {\r\n        select: function(event) {\r\n          var { nodes, edges } = event;\r\n        }\r\n      };\r\n      return (\r\n        <Graph\r\n          graph={graph}\r\n          options={options}\r\n          events={events}\r\n          getNetwork={network => {\r\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n          }}\r\n        />\r\n      );\r\n}\r\n","import React from 'react'\r\nimport {\r\n    BarChart,\r\n    Bar,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend\r\n  } from \"recharts\";\r\n\r\nimport './GraficoOrdenamiento.css'\r\n\r\n\r\n\r\n  let data;\r\n\r\n\r\nlet duration = 10000; \r\n\r\n\r\nexport default function GraficoOrdenamientos(props) {\r\n    \r\n  data = props.arreglo\r\n\r\n    return (\r\n        <div className=\"grafico\">\r\n        \r\n        <BarChart\r\n          width={1000}\r\n          height={600}\r\n          data={data} \r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5\r\n          }}\r\n          \r\n        >\r\n         \r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis />\r\n          <Tooltip />\r\n          <Bar dataKey={Number} fill=\"#8884d8\" animationDuration={duration}/>\r\n        </BarChart>\r\n    \r\n        \r\n        </div>\r\n      );\r\n}\r\n","import React, { Component } from 'react'\r\nimport GraficaListas from './GraficaListas'\r\nimport GraficaListaCircular from './GraficaListaCircular'\r\nimport GraficoOrdenamientos from './GraficoOrdenamientos'\r\n\r\nexport default class Dibujar extends Component {\r\n  render() {\r\n     if(this.props.nombre == \"Lista circular simplemente enlazada\" || this.props.nombre == \"Lista circular doblemente enlazada\"){\r\n      return (\r\n        <div>\r\n            <GraficaListaCircular nombre={this.props.nombre} buscar={this.props.valorBusqueda} edd={this.props.estructura}/>\r\n        </div>\r\n      )\r\n    \r\n    }else if(this.props.nombre == \"Ordenamiento Selección\" ||\r\n    this.props.nombre == \"Ordenamiento Inserción\" ||\r\n    this.props.nombre == \"Ordenamiento Burbuja\" ||\r\n    this.props.nombre == \"Ordenamiento Rapido\"){\r\n      return(\r\n        <div>\r\n        <br/>\r\n        <GraficoOrdenamientos arreglo={this.props.estructura}/> \r\n        </div>\r\n      ) \r\n    }\r\n    else{\r\n      return (\r\n        <div>\r\n             <GraficaListas nombre={this.props.nombre}  buscar={this.props.valorBusqueda} edd={this.props.estructura}/> \r\n        </div>\r\n      )\r\n    } \r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Button, Header, Icon, Modal,Menu,Input } from 'semantic-ui-react'\r\n\r\nexport default class Buscar extends Component {\r\n    state={\r\n        open: false,\r\n        textoDato: \"\" \r\n    }\r\n\r\n    retornarValor = () =>{\r\n        this.props.busqueda(this.state.textoDato)\r\n    }\r\n\r\n    obtenerText = e =>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Modal\r\n            basic\r\n            onClose={() =>  this.setState({open: false})}\r\n            onOpen={() =>  this.setState({open: true})}\r\n            open={this.state.open}\r\n            size='small'\r\n            trigger={<Menu.Item>Buscar</Menu.Item>}\r\n            >\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Buscar Dato\r\n            </Header>\r\n            <Modal.Content>\r\n                    <Input type=\"text\" fluid name='textoDato' value={this.state.textoDato} onChange={this.obtenerText} placeholder=\"buscar dato\" icon=\"search\"/>\r\n            </Modal.Content>\r\n            <Modal.Actions>\r\n                <Button basic color='red' inverted onClick={() =>  this.setState({open: false})}>\r\n                <Icon name='remove' /> No\r\n                </Button>\r\n                <Button color='green' inverted onClick={this.retornarValor}>\r\n                <Icon name='checkmark' /> Yes\r\n                </Button>\r\n            </Modal.Actions>\r\n            </Modal>\r\n        )\r\n    }\r\n}\r\n\r\n","export default function Seleccion(arr){\r\n    \r\n    let menor, posicion, tmp\r\n    for (let index = 0; index < arr.length-1; index++) {\r\n        menor = arr[index]\r\n         posicion = index;\r\n        for (let y = index+1; y < arr.length; y++) {\r\n            \r\n            if(arr[y] < menor){\r\n                menor = arr[y]\r\n                posicion = y\r\n            }\r\n            \r\n        }\r\n  \r\n        if(posicion != index){\r\n            tmp = arr[index]\r\n            arr[index] = arr[posicion];\r\n            arr[posicion] = tmp;\r\n        }\r\n  \r\n    }\r\n    \r\n    return arr\r\n  }","export default function Insercion(arr){\r\n    let derecha, aux\r\n    for (let x = 0; x < arr.length; x++) {\r\n        derecha = x\r\n        aux = arr[x]\r\n        while((derecha>0) && (arr[derecha-1] > aux)){\r\n            arr[derecha] = arr[derecha-1]\r\n            derecha--\r\n        }\r\n\r\n        arr[derecha] = aux\r\n    }\r\n\r\n    return arr\r\n}","import React from 'react'\r\nimport Graph from \"react-graph-vis\";\r\n\r\nexport default function GraficarArbol(props) {\r\n\r\n    let nodosAfuera = props.estructura.obtenerNodos()\r\n\r\n    if(props.buscar != \"\"){\r\n      nodosAfuera = props.estructura.obtenerNodos(props.valorBusqueda)\r\n    }\r\n\r\n    let uniones =  props.estructura.obtenerAputadores()\r\n\r\n  /*   function edgeF(){\r\n      let edgefuera = []\r\n      for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n        let edge = {from:i, to:i+1}\r\n        edgefuera[i] = edge\r\n        \r\n      }\r\n\r\n      if(props.nombre == \"Lista doblemente\"){\r\n          let contador = nodosAfuera.length-1\r\n          for (let i = 0; i < nodosAfuera.length-1; i++) {\r\n              let edge = {from:i+1, to:i}\r\n              edgefuera[contador] = edge\r\n              contador++\r\n          }\r\n          \r\n      }\r\n\r\n      return edgefuera\r\n    } */\r\n\r\n    /* console.log(nodosAfuera)\r\n    console.log(uniones) */\r\n\r\n    const graph = {\r\n        nodes: nodosAfuera,\r\n\r\n        edges: uniones\r\n      };\r\n     \r\n\r\n      const options = {\r\n        layout: {\r\n            hierarchical: {\r\n              direction: \"UD\",\r\n              sortMethod: \"directed\",\r\n            },\r\n        },\r\n        physics: false,\r\n        edges: {\r\n          color: \"white\",\r\n          width: 2,\r\n          shadow: true\r\n        },\r\n        nodes:{\r\n            shape:\"box\",\r\n            color: \"red\",\r\n            font: {\r\n              size: 32,\r\n              color: \"#ffffff\",\r\n            },\r\n            borderWidth: 2,\r\n            shadow: true\r\n        },\r\n        interaction: {\r\n          navigationButtons: true,\r\n          keyboard: true,\r\n        }\r\n        ,\r\n        height: \"500px\"\r\n      };\r\n     \r\n      const events = {\r\n        select: function(event) {\r\n          var { nodes, edges } = event;\r\n        }\r\n      };\r\n      return (\r\n        <Graph\r\n          graph={graph}\r\n          options={options}\r\n          events={events}\r\n          getNetwork={network => {\r\n            //  if you want access to vis.js network api you can set the state in a parent component using this property\r\n          }}\r\n        />\r\n      );\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Menu } from 'semantic-ui-react'\r\nimport Cargar from './Cargar'\r\nimport Agregar from './Agregar'\r\nimport Eliminar from './Eliminar'\r\nimport Actualizar from './Actualizar'\r\nimport {Link} from 'react-router-dom'\r\nimport Dibujar from './Dibujar';\r\nimport Buscar from './Buscar'\r\n\r\nimport Seleccion from '../estructuras/Ordenamientos/Seleccion'\r\nimport Insercion from '../estructuras/Ordenamientos/Insercion'\r\nimport Grafica from './GraficaListas'\r\nimport GraficarArbol from './GraficarArbol'\r\nlet count = 0;\r\nexport default class NavbarInter extends Component {\r\n    state = {\r\n      estrutura : null,\r\n      busqueda: \"\",\r\n      nombre: ''\r\n     }\r\n\r\n\r\n     componentDidMount(){\r\n       this.setState({nombre: this.props.location.state.nombre})\r\n     }\r\n    \r\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name })\r\n     \r\n    obtenerDatos = (edd) =>{\r\n      this.setState({\r\n        estrutura: edd\r\n      })\r\n    }\r\n\r\n    obtenerBusqueda = (datoBuscar) =>{\r\n      this.setState({\r\n        busqueda: datoBuscar\r\n      })\r\n    }\r\n\r\n\r\n    ordenarDatos=()=>{\r\n      let arregloOrdenado = []\r\n        switch (this.state.nombre) {\r\n          case \"Ordenamiento Selección\":\r\n            arregloOrdenado = Seleccion(this.state.estrutura);\r\n            console.log(\"estoy ordenando Seleccion\")\r\n            break;\r\n          \r\n          case \"Ordenamiento Inserción\":\r\n            arregloOrdenado = Insercion(this.state.estrutura);\r\n            \r\n            console.log(\"estoy ordenando Insercion\")\r\n            break;\r\n          case \"Ordenamiento Burbuja\":\r\n            \r\n            console.log(\"estoy ordenando Burbuja\")\r\n            break;\r\n          case \"Ordenamiento Rapido\":\r\n            \r\n            console.log(\"estoy ordenando Rapido\")\r\n            break;\r\n          default:\r\n            break;\r\n          \r\n        }\r\n\r\n        this.setState({\r\n          estrutura: arregloOrdenado\r\n        })\r\n    }\r\n\r\n\r\n   guardarOrdenamiento=() =>{\r\n      let archivoJSON = JSON.stringify(this.state.estrutura)\r\n\r\n  }\r\n\r\n    render() {\r\n      const { activeItem } = this.state\r\n  \r\n      if(this.state.estrutura == null){\r\n        return (\r\n          <div>\r\n              <Menu className=\"ui tpo inverted attached menu\">\r\n                <Menu.Item>\r\n                            <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                </Menu.Item>\r\n                <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                <Buscar  busqueda={this.obtenerBusqueda}  key={count++}/>\r\n              <Menu.Menu position='right'>\r\n                <Menu.Item name=\"Guardar\" icon='save'>\r\n                </Menu.Item>\r\n                \r\n              </Menu.Menu>\r\n            </Menu>\r\n            <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n            \r\n          </div>\r\n        )\r\n      }else{\r\n        if(this.state.nombre == \"Ordenamiento Selección\" ||\r\n           this.state.nombre == \"Ordenamiento Inserción\" ||\r\n           this.state.nombre == \"Ordenamiento Burbuja\" ||\r\n           this.state.nombre == \"Ordenamiento Rapido\" ){\r\n          return (\r\n            <div>\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                  <Menu.Item>\r\n                              <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                  </Menu.Item>\r\n                  <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Menu.Item name=\"Ordenar\" icon='chart bar' \r\n                    onClick={this.handleItemClick, this.ordenarDatos}>\r\n                  </Menu.Item>\r\n                <Menu.Menu position='right'>\r\n                  <Menu.Item name=\"Guardar\" icon='save' onClick={this.handleItemClick, this.guardarOrdenamiento}>\r\n                  </Menu.Item>\r\n                  \r\n                </Menu.Menu>\r\n              </Menu>\r\n              <br/>\r\n               <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n               {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n              <Dibujar nombre={this.state.nombre} estructura={this.state.estrutura}  key={count++}/>\r\n            </div>\r\n          )\r\n        }else if(this.state.nombre == \"Arbol ABB\"){\r\n          return (\r\n            <div>\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                  <Menu.Item>\r\n                              <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                  </Menu.Item>\r\n                  <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                  <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n                  <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n                <Menu.Menu position='right'>\r\n                  <Menu.Item name=\"Guardar\" icon='save'>\r\n                  </Menu.Item>\r\n                  \r\n                </Menu.Menu>\r\n              </Menu>\r\n              <br/>\r\n               <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n               {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n               <GraficarArbol nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/>\r\n            </div>\r\n          )\r\n        }else{\r\n          return (\r\n            <div>\r\n                <Menu className=\"ui tpo inverted attached menu\">\r\n                  <Menu.Item>\r\n                              <Link to=\"/tytusds/20211SVAC/G03/build/\">TytusDS</Link>\r\n                  </Menu.Item>\r\n                  <Cargar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Agregar  obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++} />\r\n                  <Eliminar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/> \r\n                  <Actualizar obtenerDatos={this.obtenerDatos} nombre={this.state.nombre} edd={this.state.estrutura} key={count++}/>\r\n                  <Buscar busqueda={this.obtenerBusqueda} key={count++}/>\r\n                <Menu.Menu position='right'>\r\n                  <Menu.Item name=\"Guardar\" icon='save'>\r\n                  </Menu.Item>\r\n                  \r\n                </Menu.Menu>\r\n              </Menu>\r\n              <br/>\r\n               <h1 style={{ color: 'white' }}>{this.state.nombre}</h1>\r\n               {/* <h3>{this.state.estructura.Imprimir()}</h3> */}\r\n              <Dibujar nombre={this.state.nombre} estructura={this.state.estrutura} valorBusqueda={this.state.busqueda} key={count++}/>\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n    }\r\n}\r\n","\r\n\r\nimport React from 'react'\r\nimport './App.css';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\r\nimport Navbar from './components/Navbar';\r\nimport Divisiones from './components/Divisiones';\r\nimport NavbarInter from './components/NavbarInter'; \r\nvar sectionStyle = {\r\n  backgroundImage: \"url( https://res.cloudinary.com/practicaldev/image/fetch/s--AILWL9dz--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/6vnsxy7g486k12yp4bhd.jpg )\"\r\n};\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\" style={sectionStyle}>\r\n      <Router>\r\n      <Route exact path=\"/tytusds/20211SVAC/G03/build/\" render={() =>{\r\n        return <div> \r\n          <Navbar/>\r\n          <Divisiones/> \r\n        </div>\r\n      }}>\r\n        </Route>\r\n\r\n        <Route exact path=\"/tytusds/20211SVAC/G03/build/estructura\" component={NavbarInter}/>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}